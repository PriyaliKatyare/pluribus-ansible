---


- name: Virtual Router Redundancy Protocol (VRRP) - Layer 3 Setup
  hosts: spine[0]
  become: true
  become_method: su
  become_user: root

  vars_files:
  - ../playbookvariables/cli_vault.yml
  - ../playbookvariables/vars_l3_vrrp.yml

  vars:
    spine_count: "{{ groups['spine'] | length }}"
    leaf_count: "{{ groups['leaf'] | length }}"

  tasks:
    # This task checks if valid number of spine and leaf switches are present in hosts file or not.
    # It will fail the playbook progress if only 1 spine is present or no leafs are present.
    - name: Check valid number of spine and leaf switches
      fail:
        msg: "Only 1 spine or no leaf switches present. Please check hosts file."
      when: "{{ spine_count }} <= 1 or {{ leaf_count }} == 0"

    
    # This task is to configure VRRP for Layer 3 using csv lookup.
    # It takes required VRRP config data from csv file.
    # It uses pn_ztp_vrrp_l3.py module from library/ directory.
    # pn_cliusername and pn_clipassword comes from vars file - cli_vault.yml
    # If the tasks fails then it will retry as specified by retries count.
    - name: Configure VRRP L3 setup
      pn_ztp_vrrp_l3:
        pn_cliusername: "{{ USERNAME }}"        # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"        # Cli password (value comes from cli_vault.yml).
        pn_spine_list: "{{ groups['spine'] }}"  # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"    # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_csv_data: "{{ lookup('file', '{{ csv_file }}') }}"  # VRRP Layer3 data specified in CSV file.
      register: vrrp_out                        # Variable to hold/register output of the above tasks.
      until:  vrrp_out.failed != true           # If error pops up it will retry the code
      retries: 3                                # This is the retries count
      delay: 1
      ignore_errors: yes                        # Flag to indicate if we should ignore errors if any.

    - debug:
        var: vrrp_out.stdout_lines              # Print stdout_lines of register variable.

    - pause:
        seconds: 2                              # Pause playbook execution for specified amount of time.


    # This task is to configure ZTP layer 3 setup.
    # It uses pn_l3_ztp.py module from library/ directory.
    # pn_cliusername and pn_clipassword comes from vars file - cli_vault.yml
    # If the tasks fails then it will retry as specified by retries count.
    - name: Auto configure link IPs
      pn_l3_ztp:
        pn_cliusername: "{{ USERNAME }}"                # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"                # Cli password (value comes from cli_vault.yml).
        pn_spine_list: "{{ groups['spine'] }}"          # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"            # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_net_address: "{{ pn_net_address }}"          # Network address required to calculate link IPs for layer3 fabric.
        pn_cidr: "{{ pn_cidr }}"                        # Subnet mask required to calculate link IPs for layer3 fabric.
        pn_supernet: "{{ pn_supernet }}"                # Supernet mask required to calculate link IPs for layer3 fabric.
        pn_assign_loopback: "{{ pn_assign_loopback }}"  # Flag to indicate if loopback ips should be assigned to vrouters in layer3 fabric. Default: False.
        pn_loopback_ip: "{{ pn_loopback_ip }}"          # Loopback ip value for vrouters in layer3 fabric. Default: 109.109.109.0/24.
        pn_bfd: "{{ pn_bfd }}"                          # Flag to indicate if BFD config should be added to vrouter interfaces in case of layer3 fabric. Default: False.
        pn_bfd_min_rx: "{{ pn_bfd_min_rx }}"            # BFD-MIN-RX value required for adding BFD configuration to vrouter interfaces.
        pn_bfd_multiplier: "{{ pn_bfd_multiplier }}"    # BFD_MULTIPLIER value required for adding BFD configuration to vrouter interfaces.
        pn_update_fabric_to_inband: "{{ pn_update_fabric_to_inband }}"    # Flag to indicate if fabric network should be updated to in-band. Default: False.
        pn_stp: "{{ pn_stp }}"                          # Flag to enable STP. Default: True.

      register: ztp_l3_out                      # Variable to hold/register output of the above tasks.
      until:  ztp_l3_out.failed != true         # If error pops up it will retry the code
      retries: 3                                # This is the retries count
      delay: 1
      ignore_errors: yes                        # Flag to indicate if we should ignore errors if any.

    - debug:
        var: ztp_l3_out.stdout_lines            # Print stdout_lines of register variable.

    - pause:
        seconds: 2                              # Pause playbook execution for specified amount of time.


    # This task is to configure eBGP/OSPF.
    # It uses pn_ebgp_ospf.py module from library/ directory.
    # pn_cliusername and pn_clipassword comes from vars file - cli_vault.yml
    # If you don't specify values for pn_bgp_maxpath, pn_bgp_redistribute, pn_bgp_as_range,
    # then it will take the default values specified in the pn_ebgp_ospf.py module.
    # If the tasks fails then it will retry as specified by retries count.
    - name: Configure eBGP/OSPF
      pn_ebgp_ospf:
        pn_cliusername: "{{ USERNAME }}"                   # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"                   # Cli password (value comes from cli_vault.yml).
        pn_spine_list: "{{ groups['spine'] }}"             # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"               # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_bfd: "{{ pn_bfd }}"                             # Flag to indicate if BFD config should be added to eBGP/ospf. Default: False.
        pn_routing_protocol: "{{ pn_routing_protocol }}"   # Routing protocol to configure. Choices are ['ebgp', 'ospf']
        pn_bgp_maxpath: "{{ pn_bgp_maxpath }}"             # BGP-MAXPATH value to be assigned to vrouters. Default: 16
        pn_bgp_redistribute: "{{ pn_bgp_redistribute }}"   # BGP-REDISTRIBUTE value to be assigned to vrouters. Chocies: none, static, connected, rip, ospf. Default: connected
        pn_bgp_as_range: "{{ pn_bgp_as_range }}"           # BGP-AS-RANGE value to be assigned to vrouters. Default: 65000
        pn_ibgp_ip_range: "{{ pn_ibgp_ip_range }}"         # iBGP IP range to be assigned to interfaces. Default: '75.75.75.0/30'
        pn_ibgp_vlan: "{{ pn_ibgp_vlan }}"                 # iBGP vlan value to be assigned to interfaces. Default 4040
        pn_ospf_area_id: "{{ pn_ospf_area_id }}"           # Area id to configure for ospf. Default: 0
      register: bgp_out                         # Variable to hold/register output of the above tasks.
      until: bgp_out.failed != true             # If the above code fails it will retry the code
      retries: 3                                # This is the retries count
      delay: 1
      ignore_errors: yes                        # Flag to indicate if we should ignore errors if any.

    - debug:
        var: bgp_out.stdout_lines               # Print stdout_lines of register variable.

    - pause:
        seconds: 2                              # Pause playbook execution for specified amount of time.
