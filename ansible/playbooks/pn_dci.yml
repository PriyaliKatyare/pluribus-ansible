---

# This playbook first configure eBGP connection between spine and leaf switches.
# Then it reset all leaf switches, keeping spine configuration as it is.
# Then it implements DCI in leaf switches with different fabric name.
# That way it is able to simulate a use case where spine are acting as third party switches
# and all leafs are part of different DCs.

# Initial ZTP setup
- name: Zero Touch Provisioning - Initial setup
  hosts: all
  serial: 1
  become: true
  become_method: su
  become_user: root

  vars_files:
  - cli_vault.yml

  tasks:
    - name: Auto accept EULA, Disable STP, enable ports and create/join fabric
      pn_initial_ztp:
        pn_cliusername: "{{ USERNAME }}"               # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"               # Cli password (value comes from cli_vault.yml).
        pn_fabric_name: 'ansible_bgp_fabric'           # Name of the fabric to create/join.
        pn_current_switch: "{{ inventory_hostname }}"  # Name of the switch on which this task is currently getting executed.
        pn_spine_list: "{{ groups['spine'] }}"         # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"           # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_static_setup: True                          # Flag to indicate if static values should be assign to following switch setup params. Default: True.
        pn_mgmt_ip: "{{ ansible_host }}"               # Specify MGMT-IP value to be assign if pn_static_setup is True.
        pn_mgmt_ip_subnet: '16'                        # Specify subnet mask for MGMT-IP value to be assign if pn_static_setup is True.
      register: ztp_out              # Variable to hold/register output of the above tasks.
      until: ztp_out.failed != true  # If the above code fails it will retry the code
      retries: 3                     # This is the retries count
      delay: 3
      ignore_errors: yes             # Flag to indicate if we should ignore errors if any.

    - debug:
        var: ztp_out.stdout_lines    # Print stdout_lines of register variable.

    - pause:
        seconds: 2                   # Pause playbook execution for specified amount of time.


# Layer 3 ZTP setup
- name: Zero Touch Provisioning - Layer3 setup
  hosts: spine[0]
  become: true
  become_method: su
  become_user: root

  vars_files:
  - cli_vault.yml

  tasks:
    - name: Auto configure link IPs
      pn_l3_ztp:
        pn_cliusername: "{{ USERNAME }}"        # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"        # Cli password (value comes from cli_vault.yml).
        pn_spine_list: "{{ groups['spine'] }}"  # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"    # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_net_address: '172.168.1.0'           # Network address required to calculate link IPs for layer3 fabric.
        pn_cidr: '24'                           # Subnet mask required to calculate link IPs for layer3 fabric.
        pn_supernet: '30'                       # Supernet mask required to calculate link IPs for layer3 fabric.
        pn_assign_loopback: True                # Flag to indicate if loopback ips should be assigned to vrouters in layer3 fabric. Default: False.
        # pn_loopback_ip: '109.109.109.0/24'    # Loopback ip value for vrouters in layer3 fabric. Default: 109.109.109.0/24.
        pn_bfd: True                            # Flag to indicate if BFD config should be added to vrouter interfaces in case of layer3 fabric. Default: False.
        pn_bfd_min_rx: 200                      # BFD-MIN-RX value required for adding BFD configuration to vrouter interfaces.
        pn_bfd_multiplier: 3                    # BFD_MULTIPLIER value required for adding BFD configuration to vrouter interfaces.
        # pn_update_fabric_to_inband: False     # Flag to indicate if fabric network should be updated to in-band. Default: False.
        # pn_stp: True                          # Flag to enable STP. Default: True.
      register: ztp_l3_out                      # Variable to hold/register output of the above tasks.
      until:  ztp_l3_out.failed != true         # If error pops up it will retry the code
      retries: 3                                # This is the retries count
      delay: 1
      ignore_errors: yes                        # Flag to indicate if we should ignore errors if any.

    - debug:
        var: ztp_l3_out.stdout_lines            # Print stdout_lines of register variable.

    - pause:
        seconds: 2                              # Pause playbook execution for specified amount of time.


# eBGP setup
- name: Zero Touch Provisioning - BGP setup
  hosts: spine[0]
  become: true
  become_method: su
  become_user: root

  vars_files:
  - cli_vault.yml

  tasks:
    - name: Configure eBGP
      pn_ebgp_ospf:
        pn_cliusername: "{{ USERNAME }}"                   # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"                   # Cli password (value comes from cli_vault.yml).
        pn_spine_list: "{{ groups['spine'] }}"             # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"               # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_bfd: True                                       # Flag to indicate if BFD config should be added to eBGP/ospf. Default: False.
        pn_routing_protocol: 'ebgp'                        # Routing protocol to configure. Choices are ['ebgp', 'ospf']
        pn_bgp_maxpath: '16'                               # BGP-MAXPATH value to be assigned to vrouters. Default: 16
        pn_bgp_redistribute: 'connected'                   # BGP-REDISTRIBUTE value to be assigned to vrouters. Chocies: none, static, connected, rip, ospf. Default: connected
        pn_bgp_as_range: '65000'                           # BGP-AS-RANGE value to be assigned to vrouters. Default: 65000
        pn_ibgp_ip_range: '75.75.75.0/24'                  # iBGP IP range to be assigned to interfaces. Default: '75.75.75.0/24'
        pn_ibgp_vlan: '4040'                               # iBGP vlan value to be assigned to interfaces. Default 4040
      register: bgp_out                         # Variable to hold/register output of the above tasks.
      until: bgp_out.failed != true             # If the above code fails it will retry the code
      retries: 3                                # This is the retries count
      delay: 1
      ignore_errors: yes                        # Flag to indicate if we should ignore errors if any.

    - debug:
        var: bgp_out.stdout_lines               # Print stdout_lines of register variable.

    - pause:
        seconds: 2                              # Pause playbook execution for specified amount of time.


# Reset only leaf switches
- name: Switch Config Reset
  hosts: leaf

  vars_files:
  - cli_vault.yml

  tasks:
    - name: Reset all switches
      pn_switch_config_reset:
        pn_cliusername: "{{ USERNAME }}"  # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"  # Cli password (value comes from cli_vault.yml).
      register: reset_out                 # Variable to hold/register output of the above tasks.
      ignore_errors: yes

    - debug:
        var: reset_out.stdout_lines

    - name: Wait for nvOSd to reboot
      pause:
        minutes: 3                       # Pause playbook execution for specified amount of time.
      when: reset_out.stdout_lines != ["Switch has been already reset."]

    - name: Check nvOSd status (Retry until it's online)
      command: service svc-nvOSd status
      register: status
      until: status.stdout == 'online'   # Keep on checking the nvOSd status until it's online.
      retries: 10
      changed_when: False


# DCI initial setup - Accept EULA, Fabric join, eBGP
- name: Implement DCI
  hosts: leaf
  serial: 1
  become: true
  become_method: su
  become_user: root

  vars_files:
  - cli_vault.yml

  vars:
  - dci_file: /etc/ansible/pluribus-ansible/ansible/dci.csv
  - third_party_file: /etc/ansible/pluribus-ansible/ansible/third_party_dci.csv

  tasks:
    - name: Accept EULA, Join Fabric, Configure eBGP
      pn_dci:
        pn_cliusername: "{{ USERNAME }}"              # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"              # Cli password (value comes from cli_vault.yml).
        pn_fabric_name: 'ansible_dci_fabric'          # Name of the fabric to create/join.
        pn_current_switch: "{{ inventory_hostname }}" # Name of the switch on which this task is currently getting executed.
        pn_run_initial_setup: True                    # Flag to implement initial DCI setup
        pn_spine_list: "{{ groups['spine'] }}"        # List of third party switches
        pn_leaf_list: "{{ groups['leaf'] }}"          # List of all DC switches
        pn_inband_ip: '172.18.0.0/24'                 # In-band ip to be assigned to switches
        pn_loopback_ip: '108.108.108.0/24'            # Loopback interface to be assigned to vrouters
        pn_bgp_ip: '100.1.1.0/30'                     # BGP ip
        pn_csv_data: "{{ lookup('file', '{{ dci_file }}') }}"                     # VRRP and Vxlan data for DCI
        pn_third_party_bgp_data: "{{ lookup('file', '{{ third_party_file }}') }}" # Third party BGP config data
      register: dci_out                         # Variable to hold/register output of the above tasks.
      until:  dci_out.failed != true            # If error pops up it will retry the code
      retries: 3                                # This is the retries count
      delay: 1
      ignore_errors: yes                        # Flag to indicate if we should ignore errors if any.

    - debug:
        var: dci_out.stdout_lines               # Print stdout_lines of register variable.

    - pause:
        seconds: 2                              # Pause playbook execution for specified amount of time.


# Rest of DCI setup - iBGP, VRRP and VXLAN
- name: Implement DCI
  hosts: leaf[0]
  become: true
  become_method: su
  become_user: root

  vars_files:
  - cli_vault.yml

  vars:
  - dci_file: /etc/ansible/pluribus-ansible/ansible/dci.csv
  - third_party_file: /etc/ansible/pluribus-ansible/ansible/third_party_dci.csv

  tasks:
    - name: Configure iBGP, VRRP and Vxlan
      pn_dci:
        pn_cliusername: "{{ USERNAME }}"              # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"              # Cli password (value comes from cli_vault.yml).
        pn_fabric_name: 'ansible_dci_fabric'          # Name of the fabric to create/join.
        pn_current_switch: "{{ inventory_hostname }}" # Name of the switch on which this task is currently getting executed.
        pn_run_initial_setup: False                   # Flag to implement initial DCI setup
        pn_spine_list: "{{ groups['spine'] }}"        # List of third party switches
        pn_leaf_list: "{{ groups['leaf'] }}"          # List of all DC switches
        pn_inband_ip: '172.18.0.0/24'                 # In-band ip to be assigned to switches
        pn_loopback_ip: '108.108.108.0/24'            # Loopback interface to be assigned to vrouters
        pn_bgp_ip: '100.1.1.0/30'                     # BGP ip
        pn_csv_data: "{{ lookup('file', '{{ dci_file }}') }}"                     # VRRP and Vxlan data for DCI
        pn_third_party_bgp_data: "{{ lookup('file', '{{ third_party_file }}') }}" # Third party BGP config data
      register: vrrp_out                        # Variable to hold/register output of the above tasks.
      until:  vrrp_out.failed != true           # If error pops up it will retry the code
      retries: 3                                # This is the retries count
      delay: 1
      ignore_errors: yes                        # Flag to indicate if we should ignore errors if any.

    - debug:
        var: vrrp_out.stdout_lines              # Print stdout_lines of register variable.

    - pause:
        seconds: 2                              # Pause playbook execution for specified amount of time.
