---


# Reset all switches
- name: Switch Config Reset
  hosts: all

  vars_files:
  - cli_vault.yml

  tasks:
    - name: Reset all switches
      pn_switch_config_reset:
        pn_cliusername: "{{ USERNAME }}"  # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"  # Cli password (value comes from cli_vault.yml).
      register: reset_out                 # Variable to hold/register output of the above tasks.
      ignore_errors: yes

    - debug:
        var: reset_out.stdout_lines

    - name: Wait for nvOSd to reboot
      pause:                             # Pause playbook execution for specified amount of time.
        minutes: 3
      when: reset_out.stdout_lines != ["Switch has been already reset."]

    - name: Check nvOSd status (Retry until it's online)
      command: service svc-nvOSd status
      register: status
      until: status.stdout == 'online'   # Keep on checking the nvOSd status until it's online.
      retries: 10
      changed_when: False


# ZTP initial setup
- name: Zero Touch Provisioning - Initial setup
  hosts: all
  serial: 1
  become: true
  become_method: su
  become_user: root

  vars_files:
  - cli_vault.yml

  tasks:
    - name: Auto accept EULA, Disable STP, enable ports and create/join fabric
      pn_initial_ztp:
        pn_cliusername: "{{ USERNAME }}"               # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"               # Cli password (value comes from cli_vault.yml).
        pn_fabric_name: 'vrrp-l2-fabric'               # Name of the fabric to create/join.
        pn_current_switch: "{{ inventory_hostname }}"  # Name of the switch on which this task is currently getting executed.
        # pn_toggle_40g: True                          # Flag to indicate if 40g ports should be converted to 10g ports or not.
        # pn_inband_ip: '172.16.1.0/24'                # Inband ips to be assigned to switches starting with this value. Default: 172.16.0.0/24.
        # pn_fabric_network: 'mgmt'                    # Choices: in-band or mgmt.  Default: mgmt
        # pn_fabric_control_network: 'mgmt'            # Choices: in-band or mgmt.  Default: mgmt
        # pn_static_setup: False                       # Flag to indicate if static values should be assign to following switch setup params. Default: True.
        # pn_mgmt_ip: "{{ ansible_host }}"             # Specify MGMT-IP value to be assign if pn_static_setup is True.
        # pn_mgmt_ip_subnet: '16'                      # Specify subnet mask for MGMT-IP value to be assign if pn_static_setup is True.
        # pn_gateway_ip: '10.9.9.0'                    # Specify GATEWAY-IP value to be assign if pn_static_setup is True.
        # pn_dns_ip: '10.20.41.1'                      # Specify DNS-IP value to be assign if pn_static_setup is True.
        # pn_dns_secondary_ip: '10.20.4.1'             # Specify DNS-SECONDARY-IP value to be assign if pn_static_setup is True.
        # pn_domain_name: 'pluribusnetworks.com'       # Specify DOMAIN-NAME value to be assign if pn_static_setup is True.
        # pn_ntp_server: '0.us.pool.ntp.org'           # Specify NTP-SERVER value to be assign if pn_static_setup is True.
        # pn_web_api: True                             # Flag to enable web api. Default: True
        # pn_stp: False                                # Specify True if you want to enable STP at the end. Default: False.
      register: ztp_out              # Variable to hold/register output of the above tasks.
      until: ztp_out.failed != true  # If the above code fails it will retry the code
      retries: 3                     # This is the retries count
      delay: 3
      ignore_errors: yes             # Flag to indicate if we should ignore errors if any.

    - debug:
        var: ztp_out.stdout_lines    # Print stdout_lines of register variable.

    - pause:
        seconds: 2                   # Pause playbook execution for specified amount of time.


# L2 VRRP setup and automation tests
- name: L2 VRRP setup and tests
  hosts: spine[0]
  become: true
  become_method: su
  become_user: root

  vars_files:
  - cli_vault.yml

  vars:
    spine_count: "{{ groups['spine'] | length }}"
    leaf_count: "{{ groups['leaf'] | length }}"
    csv_file: /etc/ansible/pluribus-ansible/ansible/pn_vrrp_l2.csv  # CSV file path.

  tasks:
    # L2 ZTP setup
    - name: Configure L2 ZTP (auto vlag)
      pn_l2_ztp:
        pn_cliusername: "{{ USERNAME }}"        # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"        # Cli password (value comes from cli_vault.yml).
        pn_spine_list: "{{ groups['spine'] }}"  # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"    # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_update_fabric_to_inband: False       # Flag to indicate if fabric network should be updated to in-band. Default: False.
        pn_stp: False                           # Specify True if you want to enable STP at the end. Default: False.
      register: ztp_l2_out                      # Variable to hold/register output of the above tasks.
      until:  ztp_l2_out.failed != true         # If error pops up it will retry the code.
      retries: 3                                # This is the retries count.
      delay: 3
      ignore_errors: yes                        # Flag to indicate if we should ignore errors if any.

    - debug:
        var: ztp_l2_out.stdout_lines            # Print stdout_lines of register variable.

    - pause:
        seconds: 2                              # Pause playbook execution for specified amount of time.

    # L2 VRRP setup
    - name: Configure L2 VRRP
      pn_ztp_vrrp_l2_csv:
        pn_cliusername: "{{ USERNAME }}"        # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"        # Cli password (value comes from cli_vault.yml).
        pn_spine_list: "{{ groups['spine'] }}"  # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"    # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_vrrp_id: '18'                        # Specify VRRP ID to be assigned. Default: 18.
        pn_csv_data: "{{ lookup('file', '{{ csv_file }}') }}"  # VRRP layer2 data specified in csv file.
      register: vrrp_out                        # Variable to hold/register output of the above tasks.
      until:  vrrp_out.failed != true           # If error pops up it will retry the code
      retries: 3                                # This is the retries count
      delay: 1
      ignore_errors: yes                        # Flag to indicate if we should ignore errors if any.

    - debug:
        var: vrrp_out.stdout_lines              # Print stdout_lines of register variable.

    - pause:
        seconds: 2                              # Pause playbook execution for specified amount of time.

    # Test L2 ZTP configuration
    - name: Test Layer2 Zero Touch Provisioning
      pn_test_ztp_l2:
        pn_cliusername: "{{ USERNAME }}"       # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"       # Cli password (value comes from cli_vault.yml).
        pn_spine_count: "{{ spine_count }}"    # Count of Spine switches.
        pn_leaf_count: "{{ leaf_count }}"      # Count of Leaf switches.
      register: test_out

    - debug:
        var: test_out.stdout_lines             # Print stdout_lines of register variable.


    # Test L2 VRRP configuration
    - name: Test Layer2 VRRP
      pn_test_l2_vrrp:
        pn_cliusername: "{{ USERNAME }}"       # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"       # Cli password (value comes from cli_vault.yml).
        pn_spine_count: "{{ spine_count }}"    # Count of Spine switches.
        pn_leaf_count: "{{ leaf_count }}"      # Count of Leaf switches.
        pn_csv_data: "{{ lookup('file', '{{ csv_file }}') }}"  # VRRP layer2 data specified in csv file.
      register: test_l2_out

    - debug:
        var: test_l2_out.stdout_lines          # Print stdout_lines of register variable.
