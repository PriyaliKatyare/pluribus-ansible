---


# Reset all switches
- name: Switch Config Reset
  hosts: all

  vars_files:
  - cli_vault.yml

  tasks:
    - name: Reset all switches
      pn_switch_config_reset:
        pn_cliusername: "{{ USERNAME }}"  # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"  # Cli password (value comes from cli_vault.yml).
      register: reset_out                 # Variable to hold/register output of the above tasks.
      ignore_errors: yes

    - debug:
        var: reset_out.stdout_lines

    - name: Wait for nvOSd to reboot
      pause:                             # Pause playbook execution for specified amount of time.
        minutes: 3
      when: reset_out.msg != ["Switch has been already reset."]

    - name: Check nvOSd status (Retry until it's online)
      command: service svc-nvOSd status
      register: status
      until: status.stdout == 'online'   # Keep on checking the nvOSd status until it's online.
      retries: 10
      changed_when: False


# Initial ZTP setup
- name: Zero Touch Provisioning - Initial setup
  hosts: all
  serial: 1
  become: true
  become_method: su
  become_user: root

  vars_files:
  - cli_vault.yml

  vars:
  - json_file_path: /tmp/output.json

  tasks:
    - name: Auto accept EULA, Disable STP, enable ports and create/join fabric
      pn_initial_ztp_json:
        pn_cliusername: "{{ USERNAME }}"               # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"               # Cli password (value comes from cli_vault.yml).
        pn_fabric_name: 'test-l3-ospf-fab'             # Name of the fabric to create/join.
        pn_current_switch: "{{ inventory_hostname }}"  # Name of the switch on which this task is currently getting executed.
        pn_spine_list: "{{ groups['spine'] }}"         # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"           # List of all leaf switches mentioned under [leaf] grp in hosts file.
        # pn_toggle_40g: True                          # Flag to indicate if 40g ports should be converted to 10g ports or not.
        # pn_inband_ip: '172.16.1.0/24'                # Inband ips to be assigned to switches starting with this value. Default: 172.16.0.0/24.
        # pn_fabric_network: 'mgmt'                    # Choices: in-band or mgmt.  Default: mgmt
        # pn_fabric_control_network: 'mgmt'            # Choices: in-band or mgmt.  Default: mgmt
        # pn_static_setup: False                       # Flag to indicate if static values should be assign to following switch setup params. Default: True.
        # pn_mgmt_ip: "{{ ansible_host }}"             # Specify MGMT-IP value to be assign if pn_static_setup is True.
        # pn_mgmt_ip_subnet: '16'                      # Specify subnet mask for MGMT-IP value to be assign if pn_static_setup is True.
        # pn_gateway_ip: '10.9.9.0'                    # Specify GATEWAY-IP value to be assign if pn_static_setup is True.
        # pn_dns_ip: '10.20.41.1'                      # Specify DNS-IP value to be assign if pn_static_setup is True.
        # pn_dns_secondary_ip: '10.20.4.1'             # Specify DNS-SECONDARY-IP value to be assign if pn_static_setup is True.
        # pn_domain_name: 'pluribusnetworks.com'       # Specify DOMAIN-NAME value to be assign if pn_static_setup is True.
        # pn_ntp_server: '0.us.pool.ntp.org'           # Specify NTP-SERVER value to be assign if pn_static_setup is True.
        # pn_web_api: True                             # Flag to enable web api. Default: True
        # pn_stp: False                                # Specify True if you want to enable STP at the end. Default: False.
      register: ztp_out              # Variable to hold/register output of the above tasks.
      until: ztp_out.failed != true  # If the above code fails it will retry the code
      retries: 3                     # This is the retries count
      delay: 3
      ignore_errors: yes             # Flag to indicate if we should ignore errors if any.

    # Copy the json output of the above task in a file
    - local_action: copy content={{ ztp_out }} dest={{ json_file_path }}

    # Validate the json output stored in the file
    - local_action: command python validate_json.py {{ json_file_path }}
      register: validate

    # Remove the above created file
    - local_action: file path={{ json_file_path }} state=absent

    - fail:
        msg: "JSON validation failed"
      when: validate.stdout != "JSON Validation Successful"

    - pause:
        seconds: 2                   # Pause playbook execution for specified amount of time.


# L3 VRRP setup and automation tests
- name: L3 VRRP OSPF setup and tests
  hosts: spine[0]
  become: true
  become_method: su
  become_user: root

  vars_files:
  - cli_vault.yml

  vars:
    spine_count: "{{ groups['spine'] | length }}"
    leaf_count: "{{ groups['leaf'] | length }}"
    csv_file: /etc/ansible/pluribus-ansible/ansible/l3_auto_setup.csv  # CSV file path
    json_file_path: /tmp/output.json

  tasks:
    # L3 VRRP setup
    - name: Configure VRRP L3 setup
      pn_ztp_vrrp_l3_json:
        pn_cliusername: "{{ USERNAME }}"  # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"  # Cli password (value comes from cli_vault.yml).
        pn_spine_list: "{{ groups['spine'] }}"  # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"    # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_csv_data: "{{ lookup('file', '{{ csv_file }}') }}"  # VRRP Layer3 data specified in CSV file.
      register: vrrp_out               # Variable to hold/register output of the above tasks.
      until:  vrrp_out.failed != true  # If error pops up it will retry the code
      retries: 3                       # This is the retries count
      delay: 1
      ignore_errors: yes               # Flag to indicate if we should ignore errors if any.

    # Copy the json output of the above task in a file
    - local_action: copy content={{ vrrp_out }} dest={{ json_file_path }}

    # Validate the json output stored in the file
    - local_action: command python validate_json.py {{ json_file_path }}
      register: validate

    # Remove the above created file
    - local_action: file path={{ json_file_path }} state=absent

    - fail:
        msg: "JSON validation failed"
      when: validate.stdout != "JSON Validation Successful"

    - pause:
        seconds: 2                     # Pause playbook execution for specified amount of time.

    # L3 ZTP setup
    - name: Configure L3 ZTP (Auto configure link IPs)
      pn_l3_ztp_json:
        pn_cliusername: "{{ USERNAME }}"        # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"        # Cli password (value comes from cli_vault.yml).
        pn_spine_list: "{{ groups['spine'] }}"  # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"    # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_net_address: '172.168.1.0'           # Network address required to calculate link IPs for layer3 fabric.
        pn_cidr: '24'                           # Subnet mask required to calculate link IPs for layer3 fabric.
        pn_supernet: '30'                       # Supernet mask required to calculate link IPs for layer3 fabric.
        pn_assign_loopback: True                # Flag to indicate if loopback ips should be assigned to vrouters in layer3 fabric. Default: False.
        pn_loopback_ip: '109.109.109.0/24'      # Loopback ip value for vrouters in layer3 fabric. Default: 109.109.109.0/24.
        pn_bfd: True                            # Flag to indicate if BFD config should be added to vrouter interfaces in case of layer3 fabric. Default: False.
        pn_bfd_min_rx: 200                      # BFD-MIN-RX value required for adding BFD configuration to vrouter interfaces.
        pn_bfd_multiplier: 3                    # BFD_MULTIPLIER value required for adding BFD configuration to vrouter interfaces.
        pn_update_fabric_to_inband: False       # Flag to indicate if fabric network should be updated to in-band. Default: False.
        pn_stp: True                            # Flag to enable STP. Default: True.
      register: ztp_l3_out                      # Variable to hold/register output of the above tasks.
      until:  ztp_l3_out.failed != true         # If error pops up it will retry the code
      retries: 3                                # This is the retries count
      delay: 1
      ignore_errors: yes                        # Flag to indicate if we should ignore errors if any.

    # Copy the json output of the above task in a file
    - local_action: copy content={{ ztp_l3_out }} dest={{ json_file_path }}

    # Validate the json output stored in the file
    - local_action: command python validate_json.py {{ json_file_path }}
      register: validate

    # Remove the above created file
    - local_action: file path={{ json_file_path }} state=absent

    - fail:
        msg: "JSON validation failed"
      when: validate.stdout != "JSON Validation Successful"

    - pause:
        seconds: 2                              # Pause playbook execution for specified amount of time.

    # OSPF setup
    - name: Configure OSPF
      pn_ebgp_ospf_json:
        pn_cliusername: "{{ USERNAME }}"        # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"        # Cli password (value comes from cli_vault.yml).
        pn_spine_list: "{{ groups['spine'] }}"  # List of all spine switches mentioned under [spine] grp in hosts file.
        pn_leaf_list: "{{ groups['leaf'] }}"    # List of all leaf switches mentioned under [leaf] grp in hosts file.
        pn_bfd: True                            # Flag to indicate if BFD config should be added to eBGP/ospf. Default: False.
        pn_routing_protocol: 'ospf'             # Routing protocol to configure. Choices are ['ebgp', 'ospf']
      register: bgp_out                         # Variable to hold/register output of the above tasks.
      until: bgp_out.failed != true             # If the above code fails it will retry the code
      retries: 3                                # This is the retries count
      delay: 1
      ignore_errors: yes                        # Flag to indicate if we should ignore errors if any.

    # Copy the json output of the above task in a file
    - local_action: copy content={{ bgp_out }} dest={{ json_file_path }}

    # Validate the json output stored in the file
    - local_action: command python validate_json.py {{ json_file_path }}
      register: validate

    # Remove the above created file
    - local_action: file path={{ json_file_path }} state=absent

    - fail:
        msg: "JSON validation failed"
      when: validate.stdout != "JSON Validation Successful"

    - pause:
        seconds: 2                              # Pause playbook execution for specified amount of time.


    # Test L3 ZTP configuration
    - name: Test Layer3 Zero Touch Provisioning
      pn_test_ztp_l3:
        pn_cliusername: "{{ USERNAME }}"        # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"        # Cli password (value comes from cli_vault.yml).
        pn_spine_count: "{{ spine_count }}"     # Count of Spine switches.
        pn_leaf_count: "{{ leaf_count }}"       # Count of Leaf switches.
      register: test_out

    - debug:
        var: test_out.stdout_lines             # Print stdout_lines of register variable.

    # Test L3 VRRP configuration
    - name: Test Layer3 VRRP
      pn_test_l3_vrrp:
        pn_cliusername: "{{ USERNAME }}"       # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"       # Cli password (value comes from cli_vault.yml).
        pn_spine_count: "{{ spine_count }}"    # Count of Spine switches.
        pn_leaf_count: "{{ leaf_count }}"      # Count of Leaf switches.
      register: test_l3_out

    - debug:
        var: test_l3_out.stdout_lines          # Print stdout_lines of register variable.

    # Test eBGP configuration
    - name: Test OSPF
      pn_test_ebgp_ospf:
        pn_cliusername: "{{ USERNAME }}"       # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"       # Cli password (value comes from cli_vault.yml).
        pn_spine_count: "{{ spine_count }}"    # Count of Spine switches.
        pn_leaf_count: "{{ leaf_count }}"      # Count of Leaf switches.
        pn_routing_protocol: 'ospf'            # Routing protocol to configure. Choices are ['ebgp', 'ospf']
      register: test_ebgp_out

    - debug:
        var: test_ebgp_out.stdout_lines             # Print stdout_lines of register variable.

    # Full-mesh vrouter ping test
    - name: Full mesh vrouter-ping test
      pn_vrouter_ping_test:
        pn_cliusername: "{{ USERNAME }}"  # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"  # Cli password (value comes from cli_vault.yml).

    - pause:
        seconds: 2                        # Pause playbook execution for specified amount of time.
