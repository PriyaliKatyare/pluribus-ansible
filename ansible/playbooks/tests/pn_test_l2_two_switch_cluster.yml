---


- name: Reset switches
  hosts: localhost

  vars_files:
  - cli_vault.yml

  tasks:
    - name: Switch config reset
      pn_switch_config_reset:
        pn_cliusername: "{{ USERNAME }}"           # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"           # Cli password (value comes from cli_vault.yml).
        pn_host_list: "{{ groups['all'] }}"        # List of all switches
        pn_host_ips: "{{ groups['all'] | map('extract', hostvars, ['ansible_host']) | join(',') }}"  # IPs of all switches separated by comma
      register: reset_out                          # Variable to hold/register output of the above tasks.

    - name: Wait for nvOSd to reboot
      pause:
        minutes: 2
      when: reset_out.changed


# This task is to accept eula.
# It uses pn_eula_accept.py module from library/ directory.
# pn_cliusername and pn_clipassword comes from vars file - cli_vault.yml
- name: Zero Touch Provisioning - Eula accept
  hosts: localhost

  vars_files:
  - cli_vault.yml

  tasks:
    - name: Auto accept EULA
      pn_eula_accept:
        pn_cliusername: "{{ USERNAME }}"               # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"               # Cli password (value comes from cli_vault.yml).
        pn_host_list: "{{ groups['all'] }}"            # List of all switches
        pn_host_ips: "{{ groups['all'] | map('extract', hostvars, ['ansible_host']) | join(',') }}"   # IPs of all switches separated by comma


# This play is to configure fabric
# pn_cliusername and pn_clipassword comes from vars file - cli_vault.yml
- name: Create/join fabric
  hosts: all
  serial: 1

  vars_files:
  - cli_vault.yml

  vars:
  - json_file_path: /tmp/output.json

  tasks:
    - name: Fabric creation/join
      dlink_fabric_creation:
        pn_cliusername: "{{ USERNAME }}"                             # Cli username (value comes from cli_vault.yml).
        pn_clipassword: "{{ PASSWORD }}"                             # Cli password (value comes from cli_vault.yml).
        pn_switch: "{{ inventory_hostname }}"                        # Name of the switch on which this task is currently getting executed.
        pn_switch_list: "{{ groups['switch'] | default([]) }}"       # List of all switches mentioned under [switch] grp in hosts file.
        pn_fabric_name: "l2-two-switch-cluster"                            # Name of the fabric to create.
        pn_inband_ip: "172.13.11.0/24"                               # Inband ips to be assigned to switches starting with this value. Default: 172.16.0.0/24.
        #pn_toggle_40g: "{{ pn_toggle_40g }}"                         # Flag to indicate if 40g ports should be converted to 10g ports or not. Default: True
        #pn_dns_ip: "{{ pn_dns_ip }}"                                 # Specify DNS-IP value to be assigned to switches.
        #pn_dns_secondary_ip: "{{ pn_dns_secondary_ip }}"             # Specify DNS-SECONDARY-IP value to be assigned to switches.
        #pn_domain_name: "{{ pn_domain_name }}"                       # Specify DOMAIN-NAME value to be assigned to switches.
        #pn_ntp_server: "{{ pn_ntp_server }}"                         # Specify NTP-SERVER value to be assigned to switches.
      register: ztp_out                                              # Variable to hold/register output of the above tasks.
      until: ztp_out.failed != true                                  # If the above code fails it will retry the code
      retries: 3                                                     # This is the retries count
      delay: 3

    # Copy the json output of the above task in a file
    - local_action: copy content={{ ztp_out }} dest={{ json_file_path }}

    # Validate the json output stored in the file
    - local_action: command python validate_json.py {{ json_file_path }}
      register: validate

    # Remove the above created file
    - local_action: file path={{ json_file_path }} state=absent

    - fail:
        msg: "JSON validation failed"
      when: validate.stdout != "JSON Validation Successful"

    - pause:
        seconds: 2                                     # Pause playbook execution for specified amount of time.


- name: Configure L2 two switch cluster
  hosts: switch[0]

  vars_files:
  - cli_vault.yml

  vars:
  - json_file_path: /tmp/output.json
  - vlan_csv_file: /home/jenkins/pluribus-ansible/ansible/vlan.csv
  - trunk_csv_file: /home/jenkins/pluribus-ansible/ansible/dlink_spines_trunk.csv
  - vlag_csv_file: /home/jenkins/pluribus-ansible/ansible/dlink_spines_vlag.csv


  tasks:
    - name: Create cluster
      pn_cluster_creation:
        pn_cliusername: "{{ USERNAME }}"
        pn_clipassword: "{{ PASSWORD }}"
        pn_switch_list: "{{ groups['switch'] }}"
      register: cluster_out

    # Copy the json output of the above task in a file
    - local_action: copy content={{ cluster_out }} dest={{ json_file_path }}

    # Validate the json output stored in the file
    - local_action: command python validate_json.py {{ json_file_path }}
      register: validate

    # Remove the above created file
    - local_action: file path={{ json_file_path }} state=absent

    - fail:
        msg: "JSON validation failed"
      when: validate.stdout != "JSON Validation Successful"


    - name: Create trunks
      pn_trunk_creation:
        pn_cliusername: "{{ USERNAME }}"
        pn_clipassword: "{{ PASSWORD }}"
        pn_switch_list: "{{ groups['switch'] }}"
        pn_trunk_data: "{{ lookup('file', '{{ trunk_csv_file }}') }}"
      register: trunk_out

    # Copy the json output of the above task in a file
    - local_action: copy content={{ trunk_out }} dest={{ json_file_path }}

    # Validate the json output stored in the file
    - local_action: command python validate_json.py {{ json_file_path }}
      register: validate

    # Remove the above created file
    - local_action: file path={{ json_file_path }} state=absent

    - fail:
        msg: "JSON validation failed"
      when: validate.stdout != "JSON Validation Successful"


    - name: Create vlags
      pn_vlag_creation:
        pn_cliusername: "{{ USERNAME }}"
        pn_clipassword: "{{ PASSWORD }}"
        pn_switch_list: "{{ groups['switch'] }}"
        pn_vlag_data: "{{ lookup('file', '{{ vlag_csv_file }}') }}"
      register: vlag_out

    # Copy the json output of the above task in a file
    - local_action: copy content={{ vlag_out }} dest={{ json_file_path }}

    # Validate the json output stored in the file
    - local_action: command python validate_json.py {{ json_file_path }}
      register: validate

    # Remove the above created file
    - local_action: file path={{ json_file_path }} state=absent

    - fail:
        msg: "JSON validation failed"
      when: validate.stdout != "JSON Validation Successful"


    - name: Create vlans
      pn_vlan_creation:
        pn_cliusername: "{{ USERNAME }}"
        pn_clipassword: "{{ PASSWORD }}"
        pn_switch: "{{ inventory_hostname }}"
        pn_vlan_data: "{{ lookup('file', '{{ vlan_csv_file }}') }}"
      register: vlan_out

    # Copy the json output of the above task in a file
    - local_action: copy content={{ vlan_out }} dest={{ json_file_path }}

    # Validate the json output stored in the file
    - local_action: command python validate_json.py {{ json_file_path }}
      register: validate

    # Remove the above created file
    - local_action: file path={{ json_file_path }} state=absent

    - fail:
        msg: "JSON validation failed"
      when: validate.stdout != "JSON Validation Successful"

