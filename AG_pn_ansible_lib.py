"""
PN Ansible Library

This library is where we keep all cli manipulation functions which can be used in
modules to execute the tasks that we need done. 

**ALL FUNCTIONS THAT ARE CLI MANIPULATIONS SHOULD BE HERE, NOT IN A MODULE FILE**
We do this because we never know when a function we may think we will only use
once will become useful for a future module. By keeping all of the functions 
together we can avoid future re-factoring.

Make sure you run **ALL** tests if something in this file is changed. Because
there are many files which rely on the functions defined here, we must make sure
every module still works.

Also make sure that you run changes through pylint before pushing. This file 
should **ALWAYS** be PEP8 conforment with good coding style.

To use the functions in this library, include the following in your import 
header:

> import pn_ansible_lib as pn

then to use a function that is defined in the library use:

> pn.function_name(foo, bar)

"""

import shlex

def calc_link_ip_addr(addr, cidr, supernet):
    """
    Calculates link IP addresses for layer 3 fabric.
    :param addr:
    :param cidr:
    :param supernet:
    :return: A list of all avaliable IP addresses that can be assigned to the
    vrouter interfaces for the layer 3 fabric.
    """

    supernet_mapping = {
        27: 2,
        28: 14,
        29: 6,
        30: 2
    }

    addr = [int(x) for x in addr.split('.')]
    cidr = int(cidr)
    supernet = int(supernet)

    mask = [0, 0, 0, 0]
    for i in range(cidr):
        mask[i / 8] += (1 << (7 - i % 8))

    network = []
    for i in range(4):
        network.append(addr[i] & mask[i])

    broadcast = network
    for i in range(32 - cidr):
        broadcast[3 - i / 8] += (1 << (i % 8))

    avaliable_ips = []
    host = int(addr[3]) - ((int(addr[3]) % (supernet_mapping[supernet] + 2)))
    count = 0

    third_oct = network[2]
    
    while third_oct <= broadcast[2]:
        ip_list = []
        while count <  broadcast[3]:
            hostmin = host + 1
            hostmax = host + supernet_mapping[supernet]
            while hostmin <= hostmax:
                ip_list.append(hostmin)
                hostmin += 1
            host = hostmax + 2
            count += host

        ip_address = [broadcast[0], broadcast[1], third_oct]
        for i in range(len(ip_list)):
            avaliable_ips.append('.'.join(str(x) for x in ip_address)
                                 + ".%s/%s" % (ip_list[i], supernet))

        host = count = 0
        third_oct += 1

    return avaliable_ips


class PN_cli:
    """
    This is class designed to abstract the Pluribus CLI.
    """
    
    def __init__(self, module, prefix=''):
        """
        Initializes a PN_cli class. This class is used to interact with the
        command line of the destination switch.
        :param module: The ansible module instance, we need this to run commands
        throuh ssh on the destination host.
        :param prefix: The command prefix. This will be used when you are 
        repeatadly issuing commands with the same prefix, it allows less typing
        from the caller. By default the prefix will be '/usr/bin/cli --quiet' and
        '/usr/bin/cli --quiet --user {username}:{password}' if pn_cliusername and
        pn_clipassword are defined in the module parameters.
        :param command:
        """
        
        self.prefix = prefix

        if not prefix:
            self.prefix = '/usr/bin/cli --quiet'
            if ('pn_cliusername' in module.params) and \
               ('pn_clipassword' in module.params):
                self.prefix += ' --user %s:%s ' % (module.params['pn_cliusername']\
                                                 , module.params['pn_clipassword'])


        self.module = module


    def format(self, format):
        """
        Creates a format string to send to the CLI
        :param format: The string formatting option you would like back from the 
        cli.
        :return: A string in the form " format {format} no-show-headers".
        """
        
        return " format %s no-show-headers" % format


    def gen_command(self, command, prepend=''):
        """
        Concatenate the prefix with the command. This method isn't inteded to be
        used outside of the PN_cli class.
        :param command: The command to be concatenated with the prefix and 
        prepend strings.
        :param prepend: Anything to be prepended. This is used for generating
        output messages.
        :return: A concatenated string with the prefix and command
        """
        
        return ' '.join((prepend + " " + self.prefix + " " + command).split())

    
    def send_command(self, command, expect_output=True):
        """
        Send a command to the CLI on the destination host. Runs the current 
        instance's command on the destination host and returns the result. If the
        cli returns an error and does not execute the command Ansible will exit
        with a json error.
        :param command: The command to send to the cli.
        :return: The output sent back by the CLI
        """

        # TODO: Check for error instead of output
        command = shlex.split(self.gen_command(command))
        out, err = self.module.run_command(command)[1:]
        
        # TODO: Use module.fail_json?
        if expect_output and out:
            return out

        elif not expect_output and not out:
            return ""

        self.module.exit_json(
            error='1',
            failed=True,
            stderr = err.strip(),
            msg="Operation Failed: " + ' '.join(map(str, command)),
            changed=False
        )


    def check_command(self, command, string):
        """
        Replaces some instances of run_cli that check for a string in the output
        of the cli response. Returns a boolean, for the legacy version of this
        method which returns a string. Look at check_command_string.
        :param command: The command whose output will be checked.
        :param string: The string to search for in the CLI output.
        :return: True if string is in the output, False otherwise.
        """
        
        out = self.send_command(command)
        return True if out.find(string) > -1 else False


    def check_command_string(self, command, string, message):
        """
        Legacy version of the check_command method. For newer modules, this
        method should not be used, and should be replaced by the check_command
        method. This method should only be used for updating old modules where
        time is not avaliable for a ground-up rewrite.
        :param command: The command whose output will be checked.
        :param string: The string to search for in the CLI output.
        :param message: The message to be returned, typically the command being
        attempted.
        :return: {message}: [ Failed | Successful ]
        """
        
        if self.check_command(command, string):
            return "%s: Successful" % message

        return "%s: Failed" % message

    
    def send_exit(self, status, message, **kwargs):
        """
        Sends a module exit_json to Ansible.
        :param status: The status to be returned. Status 0 if success but no
        changes (idepotency), 1 is success and things were changed. Any other
        status is a general failure.
        :param message: The message to be sent back in the JSON response.
        :param kwargs: Unpacks all key word arguments into the module's exit json
        method. 
        """

        change = False
        
        if status is 0 or status is 1:
            
            if status is 1:
                change = True

            # Return statement not necessary, however it makes unit testing much
            # easier.
            return self.module.exit_json(
                msg=message,
                changed=change,
                **kwargs
            )
        
        # Return statement not necessary, however it makes unit testing much
        # easier.
        return self.module.fail_json(
            msg=message,
            **kwargs
        )


    def auto_accept_eula(self):
        """
        Accepts the EULA when Ansible logs into a new switch. This method is
        referenced from the auto_accept_eula in pn_initial_ztp.py
        :return: The output from the cli command sent to the target.
        """
        
        return self.send_command("--skip-setup --script-password "
                                 "switch-setup-modify password %s eula-accepted"
                                 " true" % module.params['password'])


    def vcfm_json(self, status_int, message, summary, task, status, **kwargs):
        """
        Outputs the required json for vcf-m applications. Follows standards
        outlined by: 
        confluence.pluribusnetworks.com/pages/viewpage.action?pageId=12452428
        This method is a specific implementation of the PN_cli.send_exit()
        method. See PN_cli.send_exit() for more information on the general 
        version of this funtion.
        :param status_int: Ansible status. 0 is success but no changes.
        (idempotency). 1 is success and things were changed. Any other status
        is a general failure.
        :param message: The status message to be sent back in the JSON output.
        :param summary: An array of dictionaries. Each dictionary has two 
        entries, "output" and "switch". Output is the CLI output returned by the
        switch. Switch is the name of the switch that the output was returned 
        from.
        :param task: A string that describes the Ansible task that was executed
        by the switch.
        :param status: An integer for the status of the execution. This value
        will either be 0 or 1. 0 means success and 1 means failure. This is a
        different value than status_int. This can be confusing, but status_int is
        a switch for the send_exit() method, and status is a status for vcfm.
        :param kwargs: Any additional output keyword arguments, these are passed
        as is to the modules's exit_json or fail_json methods.
        """

        self.send_exit(status,
                       message,
                       summary=summary,
                       task=task,
                       status=status,
                       **kwargs)


    def aks(self, kwargs, command, option):
        """
        Add Kwargs Simple
        """
        if option in kwargs:
            command += " %s %s" % (option.replace('_','-'), kwargs[check])


    def aka(self, kwargs, command, option, list):
        """
        Add Kwargs Array
        """
        if option in kwargs:
            for item in list:
                if item == kwargs['option']:
                    command += " %s %s" % (option.replace('_','-', item))


    def akb(self, kwargs, command, option, bool):
        """
        Add Kwargs Bool
        """
        if option in kwargs:
            command += " %s", bool[0] if kwargs[option] else bool[1]


    def cluster(self, action, **kwargs):
        """
        Handles commands related to clusters on the CLI. Does not do idempotency
        logic. Idempotency logic must be implemented in the module itself.
        Issues: Does not support validate | no-validate command line option when
        creating a cluster.
        :param action: The action to preform [ create | delete | exists | show ].
        :param kwargs: Keyword arguments to the method, see the ONVL command
        guide for relevant arguments based on the action. Note that all '-' must
        be converted to a '_' in keyword arguments to follow python syntax rules.
        :return: Depends on action, create and delete return nothing, exists 
        returns a boolean and show returns the output from the cli.
        """

        command = ''
        self.aks(kwargs, command, 'switch')

        #TODO: Add error checking for key word arguments

        # Handles logic to create a cluster
        if action is 'create':
            if not ('cluster_name' in kwargs and \
                    'cluster_node_1' in kwargs and \
                    'cluster_node_2' in kwargs):
                self.send_exit(5, "Must specify a name and two nodes to" \
                               " create a cluster")
            
            self.send_command("cluster-create name %s cluster-node-1 %s" \
                              " cluster-node-2 %s" % (kwargs['cluster_name'],
                                                      kwargs['cluster_node_1'],
                                                      kwargs['cluster_node_2'])
                              )
            return

        # Handles logic to delete a cluster
        elif action is 'delete':
            if not ('cluster_name' in kwargs):
                self.send_exit(5, "Must specify a name to delete a cluster")

            self.send_command("cluster-delete name %s" % kwargs['cluster_name'])
            
            return

        # Handles logic to check that a cluster exists
        elif action is 'exists':
            if 'cluster_name' not in kwargs:
                self.send_exit(5, "Cannot find a cluster without a cluster name")

            return True if kwargs['cluster_name'] in self.cluster('').split() else False

        # Returns the names of all clusters if action isn't recognized
        command = 'cluster-show' + self.format("name")
        return self.send_command(command)

        
    def vlan(self, action, **kwargs):
        """
        Handles CLI commands related to vlans. Does not handle any idempotency
        logic. Idempotency must be implemented in the module itself. Note: This
        method does not preform argument type checking, and assumes that all of
        the keyword arguments have the correct type.
        :param action: The action to preform [ create | delete | exists | show ].
        :param kwargs: Keyword arguments to the method, see the ONVL command
        guide for relevant arguments based on the action. Note that all '-' must
        be converted to a '_' in keyword arguments to follow python syntax rules.
        :return: Depends on the action. Create and delete return nothing, exists
        returns a boolean and show retuns the 'vlan-show' output from the CLI.
        """

        command = ''
        self.aks(kwargs, command, 'switch')

        # TODO: Add error checking for the keyword arguments
        
        # Create a vlan
        if action == 'create':
            if not ('vlan_id' in kwargs and 'vnet_name' in kwargs and \
                    'vxlan' in kwargs and 'vxlan_mode' in kwargs and \
                    'public_vlan' in kwargs and 'scope' in kwargs):
                self.send_exit(5, 'Create vlan is missing parameters')

            command += 'vlan-create'

            for option in ['vlan-id', 'vnet_name', 'vxlan',
                           'vxlan-mode', 'public-vlan', 'scope']:
                command += " %s %s" % (option, kwargs[option.replace('-','_')])
            
            if 'description' in kwargs:
                command += " description %s" % kwargs['description']

            if 'stats' in kwargs:
                if kwargs['stats']:
                    command += " stats"
                else:
                    command += " no-stats"

            if 'ports' in kwargs:
                command += " ports %s" % kwargs['ports']

            if 'untagged_ports' in kwargs:
                command += " untagged-ports %s" % kwargs['untagged_ports']

            self.send_command(command)
            return

        # Delete a vlan
        elif action == 'delete':
            if not ('vlan_id' in kwargs and 'vnet_name' in kwargs):
                self.send_exit(5, 'Deleting a vlan requires id and name')

            self.send_command("vlan-delete vlan-id %s vnet %s" % (
                kwargs['vlan_id'], kwargs['vnet_name']))
            return

        # Modify an existing vlan
        elif action == 'modify':
            if not ('vlan_id' in kwargs):
                self.send_exit(5, 'Must supply an id to vlan-modify')

            command += "vlan-modify vlan-id %s" % kwargs['vlan_id']

            self.aks(kwargs, command, 'description')
            self.aks(kwargs, command, 'vxlan')
            self.aks(kwargs, command, 'vnet')

            self.send_command(command)
            return

        # Check if a vlan exists
        elif action == 'exists':
            if not 'vlan_id' in kwargs:
                self.send_exit(5, "Must provide an id to search for")
                
            if kwargs['vlan_id'] in self.vlan('show').split():
                return True

            return False

        # Fall through and send a show command if the action isn't recognized
        return self.send_command('vlan-show' + self.format('id'))


    def vrouter(self, action, **kwargs):
        """
        Handles the management of vrouters through the CLI. This method does not 
        handle any any idempotency logic. The responsibility of implementing
        idempotency falls to the caller. This method also does not currently do
        ANY error checking on the key word arguments.
        :param action:
        :param kwargs:
        :return:
        """

        command = ''
        self.aks(kwargs, command, 'switch')
        
        if action == 'create':
            if not ('name' in kwargs and 'vnet' in kwargs):
                self.send_exit(5, 'Vrouter create is missing parameters')

            command += "vrouter-create name %s vnet %s" % (kwargs['name'],
                                                           kwargs['vnet'])

            if 'dedicated_vnet_service' in kwargs:
                if kwargs['dedicated_vnet_service']:
                    command += ' dedicated-vnet-service'
                else:
                    if 'shared_vnet_mgr' not in kwargs:
                        self.send_exit(5, 'A shared vrouter needs a manager')
                    
                    command += "shared-vnet-service shared-vnet-mgr %s" % \
                               kwargs['shared_vnet_mgr']

            if 'service' in kwargs:
                if kwargs['service']:
                    command += ' enable'
                else:
                    command += 'disable'

            self.aks(kwargs, command, 'storage_pool')
            self.aka(kwargs, command, 'router_type', ['hardware', 'software'])
            self.aks(kwargs, command, 'hw_vrrp_id')
            self.aks(kwargs, command, 'bgp_as')
            self.aks(kwargs, command, 'router_id')
            self.aka(kwargs, command, 'proto_multi', ['none', 'vmrp', 'pim-ssm'])
            self.aka(kwargs, command, 'bgp_redistribute',
                     ['static', 'connected', 'rip', 'ospf'])

            # TODO: Other command options need to be implemented

            self.send_command(command)
            return
                
        elif action == 'delete':
            if not ('name' in kwargs):
                self.send_exit(5, 'Need to specify a vrouter to delete')

            self.send_command(command)
            return

        elif action == 'modify':
            pass

        elif action == 'exists':
            pass
        
        # If action isn't recognized return the output from a show command
        return self.send_command('vrouter-show' + self.format('name'))


    def vrouter_bgp(self, action, **kwargs):
        """
        """
        
        command = ''
        self.aks(kwargs, command, 'switch')
        pass


    def vrouter_interface_config(self, action, **kwargs):
        """
        Handle vrouter interface configs on the CLI. This method covers the
        vrouter-interface-config-add, vrouter-interface-config-modify and
        vrouter-interface-config-remove commands from the CLI.
        """
        
        command = ''
        self.aks(kwargs, command, 'switch')

        if action == 'add':
            pass
        elif action == 'modify':
            pass
        elif action == 'remove':
            pass
        pass

    
    def vrouter_interface(self, action, **kwargs):
        """
        Handle managing vrouter-interfaces on the CLI. This method covers the
        vrouter-interface-add, vrouter-interface-modify and 
        vrouter-interface-remove commands. This method does not do any type or
        value checking on the parameters that are givin to it.
        :param action: The action to preform with the vrouter interface. Maps
        add, modify and remove to create, modify and delete to match with other
        CLI action methods. [ add | create | modify | exists | remove | delete ]
        :param kwargs: Keyword arguments. See ONVL product documentation for a
        list of options for these commands.
        :return:
        """

        command = ''
        self.aks(kwargs, command, 'switch')

        if action == 'add' or action == 'create':
            if 'vrouter-name' not in kwargs:
                self.send_exit(5, 'Must specify a vrouter for the vrouter interface')

            command += 'vrouter-interface-add'
            
            self.aks(kwargs, command, 'vrouter-name')
            self.aks(kwargs, command, 'ip')
            self.aks(kwargs, command, 'netmask')
            self.aka(kwargs, command, 'assignment',
                     ['none', 'dhcp', 'dhcpv6', 'autov6'])
            self.aka(kwargs, command, 'vlan-type', ['public', 'private'])
            self.aks(kwargs, command, 'vxlan')
            self.aka(kwargs, command, 'if', ['mgmt', 'data', 'span'])
            self.aks(kwargs, command, 'alias-on')
            self.akb(kwargs, command, 'exclusive', ['exclusive', 'no-exclusive'])
            self.akb(kwargs, command, 'nic-enable', ['nic-enable', 'nic-disable'])
            self.aks(kwargs, command, 'vrrp-id')
            self.aks(kwargs, command, 'vrrp-primary')
            self.aks(kwargs, command, 'vrrp-priority')
            self.aks(kwargs, command, 'vrrp-adv-int')
            self.aks(kwargs, command, 'l3-port')
            self.aks(kwargs, command, 'mtu')

            return self.send_command(command)

        elif action == 'modify':
            if 'vrouter-name' not in kwargs:
                self.send_exit(5, 'Must specify a vrouter interface to modify')

            command += 'vrouter-interface-modify'
                
            self.aks(kwargs, command, 'vrouter-name')
            self.aks(kwargs, command, 'nic-string')
            self.aks(kwargs, command, 'ip')
            self.aks(kwargs, command, 'netmask')
            self.aka(kwargs, command, 'assignment',
                     ['none', 'dhcp', 'dhcpv6', 'autov6'])
            self.aka(kwargs, command, 'vlan-type', ['public', 'private'])
            self.aks(kwargs, command, 'vxlan')
            self.aka(kwargs, command, 'if', ['mgmt', 'data', 'span'])
            self.aks(kwargs, command, 'alias-on')
            self.akb(kwargs, command, 'exclusive', ['exclusive', 'no-exclusive'])
            self.akb(kwargs, command, 'nic-enable', ['nic-enable', 'nic-disable'])
            self.aks(kwargs, command, 'vrrp-id')
            self.aks(kwargs, command, 'vrrp-primary')
            self.aks(kwargs, command, 'vrrp-priority')
            self.aks(kwargs, command, 'vrrp-adv-int')
            self.aks(kwargs, command, 'l3-port')
            self.aks(kwargs, command, 'secondary-macs')
            self.aks(kwargs, command, 'mtu')

            return self.send_command(command)
            
        elif action == 'exists':
            if 'vrouter-name' not in kwargs:
                self.send_exit(5, 'Must specify a vrouter interface to check')

        elif action == 'remove' or action == 'delete':
            if 'vrouter-name' not in kwargs:
                self.send_exit(5, 'Must specify a vrouter to delete interface from')

            command += 'vrouter-interface-remove'

            self.aks(kwargs, command, 'vrouter-name')
            self.aks(kwargs, command, 'nic-string')

            return self.send_command(command)

        # Fall through to vrouter-interface-show


    def loopback_interface(self, action, **kwargs):
        """
        """

        command = ''
        self.aks(kwargs, command, 'switch')
        
        pass


    def trunk(self, action, **kwargs):
        """
        Handle trunk actions through the CLI
        :param action:
        :param kwargs:
        :return:
        """

        command = ''
        self.aks(kwargs, command, 'switch')
        
        if action == 'create':
            pass

        elif action == 'exists':
            if 'name' not in kwargs:
                self.send_exit(5, "Need to specify the name of a trunk to find")

            command += 'trunk create'
            
            self.aks(kwargs, command, 'name')

        elif action == 'delete':
            pass

        elif action == 'modify':
            pass

        # Fall through to trunk-show


    def switch_setup(self, action, **kwargs):
        """
        """

        command = ''
        self.aks(kwargs, command, 'switch-name')

        if action == 'modify':

            command += 'switch-setup-modify'

            self.aks(kwargs, command, 'mgmt-ip')
            self.aks(kwargs, command, 'mgmt-netmask')
            self.aks(kwargs, command, 'gateway-ip')
            self.aks(kwargs, command, 'dns-ip')
            self.aks(kwargs, command, 'dns-secondary-ip')
            self.aks(kwargs, command, 'domain-name')
            self.aks(kwargs, command, 'ntp-serer')

        elif action == 'show':
            pass

        self.send_exit(5, "switch_setup accepts modify or show as actions")


    def fabric(self, action, **kwargs):
        """
        Handle fabric actions on the CLI.
        :param action: The action to preform [ create | join | node-show | show ]
        :param kwargs: Keyword arguments to the method, see the ONVL command
        guide for relevant arguments based on the action. Note that all '-' must
        be converted to '_' in the keyword arguments to follow python syntax 
        rules.
        :return:
        """

        command = ''
        self.aks(kwargs, command, 'switch')
        
        if action == 'node-show':
            return self.send_command('fabric-node-show' + self.format('name'))
        
        elif action == 'create':
            if 'name' not in kwargs:
                self.send_exit(5, 'Must specify a fabric name to '
                               'create a fabric')

            command += "fabric-create %s" % kwargs['name']

            self.aks(kwargs, command, 'repeer-to-cluster-node')
            self.aks(kwargs, command, 'vlan')
            self.aks(kwargs, command, 'password')
            self.aka(kwargs, command, 'fabric-network', ['in-band', 'mgmt'])
            self.aka(kwargs, command, 'fabric-advertisement-network',
                     ['inband-mgmt', 'inband-only'])
            self.akb(kwargs, command, 'conflicts',
                     ['delete-conflicts', 'abort-on-conflict'])

            return self.send_command(command)
                
        elif action == 'join':
            if 'name' not in kwargs and 'switch-ip' not in kwargs:
                self.send_exit(5, 'Must specify a name or switch-ip to join a '
                               'fabric')

            command += 'fabric-join'
            
            if 'name' in kwargs:
                command += " name %s" % kwargs['name']

            else:
                command += " switch-ip %s" % kwargs['switch-ip']

            self.aks(kwargs, command, 'vlan')
            self.aks(kwargs, command, 'password')
            self.aks(kwargs, command, 'repeer-to-cluster-node')
            self.akb(kwargs, command, 'conflicts',
                     ['delete-conflicts', 'abort-on-conflict'])

            return self.send_command(command)

        elif action == 'exists':
            if 'name' not in kwargs:
                self.send_exit(5, 'Must specify a fabric name to check that '
                               'a fabric exists')

            if kwargs['name'] in self.fabric('fabric-show'):
                return True

            return False

        elif action == 'join':
            pass

        elif action == 'unjoin':
            pass
        
        # fall through to fabric-show
        command += 'fabric-show'

        self.aks(kwargs, command, 'name')
        self.aks(kwargs, command, 'switch-ip')
        self.aks(kwargs, command, 'vlan')
        self.aks(kwargs, command, 'tid')

        return self.send_command(command)

    def aaa_tacacs_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'aaa-tacacs-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'server' in kwargs:
            command += " server %s" % kwargs['server']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'secret' in kwargs:
            command += " secret %s" % kwargs['secret']
        if 'timeout' in kwargs:
            command += " timeout %s" % kwargs['timeout']
        if 'priority' in kwargs:
            command += " priority %s" % kwargs['priority']
        if 'authen' in kwargs:
            if kwargs['authen']:
                command += " authen"
            else:
                command += " no-authen"
        if 'authen_local' in kwargs:
            if kwargs['authen_local']:
                command += " authen-local"
            else:
                command += " no-authen-local"
        if 'authen_method' in kwargs:
            for item in [u'pap', u'chap', u'ms-chap']:
                if item == kwargs['authen_method']:
                    command += " authen-method %s" % item
                    break
        if 'sess_acct' in kwargs:
            if kwargs['sess_acct']:
                command += " sess-acct"
            else:
                command += " no-sess-acct"
        if 'cmd_acct' in kwargs:
            if kwargs['cmd_acct']:
                command += " cmd-acct"
            else:
                command += " no-cmd-acct"
        if 'acct_local' in kwargs:
            if kwargs['acct_local']:
                command += " acct-local"
            else:
                command += " no-acct-local"
        if 'sess_author' in kwargs:
            if kwargs['sess_author']:
                command += " sess-author"
            else:
                command += " no-sess-author"
        if 'cmd_author' in kwargs:
            if kwargs['cmd_author']:
                command += " cmd-author"
            else:
                command += " no-cmd-author"
        if 'author_local' in kwargs:
            if kwargs['author_local']:
                command += " author-local"
            else:
                command += " no-author-local"
        if 'service' in kwargs:
            command += " service %s" % kwargs['service']
        if 'service_shell' in kwargs:
            command += " service-shell %s" % kwargs['service_shell']
        if 'service_vtysh' in kwargs:
            command += " service-vtysh %s" % kwargs['service_vtysh']

        return self.send_command(command)


    def aaa_tacacs_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'aaa-tacacs-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def aaa_tacacs_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'aaa-tacacs-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'server' in kwargs:
            command += " server %s" % kwargs['server']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'secret' in kwargs:
            command += " secret %s" % kwargs['secret']
        if 'timeout' in kwargs:
            command += " timeout %s" % kwargs['timeout']
        if 'priority' in kwargs:
            command += " priority %s" % kwargs['priority']
        if 'authen' in kwargs:
            if kwargs['authen']:
                command += " authen"
            else:
                command += " no-authen"
        if 'authen_local' in kwargs:
            if kwargs['authen_local']:
                command += " authen-local"
            else:
                command += " no-authen-local"
        if 'authen_method' in kwargs:
            for item in [u'pap', u'chap', u'ms-chap']:
                if item == kwargs['authen_method']:
                    command += " authen-method %s" % item
                    break
        if 'sess_acct' in kwargs:
            if kwargs['sess_acct']:
                command += " sess-acct"
            else:
                command += " no-sess-acct"
        if 'cmd_acct' in kwargs:
            if kwargs['cmd_acct']:
                command += " cmd-acct"
            else:
                command += " no-cmd-acct"
        if 'acct_local' in kwargs:
            if kwargs['acct_local']:
                command += " acct-local"
            else:
                command += " no-acct-local"
        if 'sess_author' in kwargs:
            if kwargs['sess_author']:
                command += " sess-author"
            else:
                command += " no-sess-author"
        if 'cmd_author' in kwargs:
            if kwargs['cmd_author']:
                command += " cmd-author"
            else:
                command += " no-cmd-author"
        if 'author_local' in kwargs:
            if kwargs['author_local']:
                command += " author-local"
            else:
                command += " no-author-local"
        if 'service' in kwargs:
            command += " service %s" % kwargs['service']
        if 'service_shell' in kwargs:
            command += " service-shell %s" % kwargs['service_shell']
        if 'service_vtysh' in kwargs:
            command += " service-vtysh %s" % kwargs['service_vtysh']

        return self.send_command(command)


    def aaa_tacacs_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'aaa-tacacs-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'server' in kwargs:
            command += " server %s" % kwargs['server']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'timeout' in kwargs:
            command += " timeout %s" % kwargs['timeout']
        if 'priority' in kwargs:
            command += " priority %s" % kwargs['priority']
        if 'authen' in kwargs:
            if kwargs['authen']:
                command += " authen"
            else:
                command += " no-authen"
        if 'authen_local' in kwargs:
            if kwargs['authen_local']:
                command += " authen-local"
            else:
                command += " no-authen-local"
        if 'authen_method' in kwargs:
            for item in [u'pap', u'chap', u'ms-chap']:
                if item == kwargs['authen_method']:
                    command += " authen-method %s" % item
                    break
        if 'sess_acct' in kwargs:
            if kwargs['sess_acct']:
                command += " sess-acct"
            else:
                command += " no-sess-acct"
        if 'cmd_acct' in kwargs:
            if kwargs['cmd_acct']:
                command += " cmd-acct"
            else:
                command += " no-cmd-acct"
        if 'acct_local' in kwargs:
            if kwargs['acct_local']:
                command += " acct-local"
            else:
                command += " no-acct-local"
        if 'sess_author' in kwargs:
            if kwargs['sess_author']:
                command += " sess-author"
            else:
                command += " no-sess-author"
        if 'cmd_author' in kwargs:
            if kwargs['cmd_author']:
                command += " cmd-author"
            else:
                command += " no-cmd-author"
        if 'author_local' in kwargs:
            if kwargs['author_local']:
                command += " author-local"
            else:
                command += " no-author-local"
        if 'timed_out' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['timed_out']:
                    command += " timed-out %s" % item
                    break
        if 'num_errors' in kwargs:
            command += " num-errors %s" % kwargs['num_errors']
        if 'errors_logged' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['errors_logged']:
                    command += " errors-logged %s" % item
                    break
        if 'service' in kwargs:
            command += " service %s" % kwargs['service']
        if 'service_shell' in kwargs:
            command += " service-shell %s" % kwargs['service_shell']
        if 'service_vtysh' in kwargs:
            command += " service-vtysh %s" % kwargs['service_vtysh']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def aaa_tacacs_status(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'aaa-tacacs-status'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"
        if 'aaa_tacacs_status' in kwargs:
            command += " aaa-tacacs-status"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def acl_ip_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'acl-ip-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'action' in kwargs:
            for item in [u'permit', u'deny']:
                if item == kwargs['action']:
                    command += " action %s" % item
                    break
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'src_ip_mask' in kwargs:
            command += " src-ip-mask %s" % kwargs['src_ip_mask']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'dst_ip_mask' in kwargs:
            command += " dst-ip-mask %s" % kwargs['dst_ip_mask']
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'src_port' in kwargs:
            command += " src-port %s" % kwargs['src_port']
        if 'dst_port' in kwargs:
            command += " dst-port %s" % kwargs['dst_port']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']

        return self.send_command(command)


    def acl_ip_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'acl-ip-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def acl_ip_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'acl-ip-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'action' in kwargs:
            for item in [u'permit', u'deny']:
                if item == kwargs['action']:
                    command += " action %s" % item
                    break
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'src_ip_mask' in kwargs:
            command += " src-ip-mask %s" % kwargs['src_ip_mask']
        if 'src_port' in kwargs:
            command += " src-port %s" % kwargs['src_port']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'dst_ip_mask' in kwargs:
            command += " dst-ip-mask %s" % kwargs['dst_ip_mask']
        if 'dst_port' in kwargs:
            command += " dst-port %s" % kwargs['dst_port']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']

        return self.send_command(command)


    def acl_ip_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'acl-ip-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'action' in kwargs:
            for item in [u'permit', u'deny']:
                if item == kwargs['action']:
                    command += " action %s" % item
                    break
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'src_ip_mask' in kwargs:
            command += " src-ip-mask %s" % kwargs['src_ip_mask']
        if 'src_port' in kwargs:
            command += " src-port %s" % kwargs['src_port']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'dst_ip_mask' in kwargs:
            command += " dst-ip-mask %s" % kwargs['dst_ip_mask']
        if 'dst_port' in kwargs:
            command += " dst-port %s" % kwargs['dst_port']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def acl_mac_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'acl-mac-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'action' in kwargs:
            for item in [u'permit', u'deny']:
                if item == kwargs['action']:
                    command += " action %s" % item
                    break
        if 'src_mac' in kwargs:
            command += " src-mac %s" % kwargs['src_mac']
        if 'src_mac_mask' in kwargs:
            command += " src-mac-mask %s" % kwargs['src_mac_mask']
        if 'dst_mac' in kwargs:
            command += " dst-mac %s" % kwargs['dst_mac']
        if 'dst_mac_mask' in kwargs:
            command += " dst-mac-mask %s" % kwargs['dst_mac_mask']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']

        return self.send_command(command)


    def acl_mac_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'acl-mac-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def acl_mac_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'acl-mac-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'action' in kwargs:
            for item in [u'permit', u'deny']:
                if item == kwargs['action']:
                    command += " action %s" % item
                    break
        if 'src_mac' in kwargs:
            command += " src-mac %s" % kwargs['src_mac']
        if 'src_mac_mask' in kwargs:
            command += " src-mac-mask %s" % kwargs['src_mac_mask']
        if 'dst_mac' in kwargs:
            command += " dst-mac %s" % kwargs['dst_mac']
        if 'dst_mac_mask' in kwargs:
            command += " dst-mac-mask %s" % kwargs['dst_mac_mask']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']

        return self.send_command(command)


    def acl_mac_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'acl-mac-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'action' in kwargs:
            for item in [u'permit', u'deny']:
                if item == kwargs['action']:
                    command += " action %s" % item
                    break
        if 'src_mac' in kwargs:
            command += " src-mac %s" % kwargs['src_mac']
        if 'src_mac_mask' in kwargs:
            command += " src-mac-mask %s" % kwargs['src_mac_mask']
        if 'dst_mac' in kwargs:
            command += " dst-mac %s" % kwargs['dst_mac']
        if 'dst_mac_mask' in kwargs:
            command += " dst-mac-mask %s" % kwargs['dst_mac_mask']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def admin_ipmi_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'admin-ipmi-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'addr_type' in kwargs:
            for item in [u'static', u'dhcp']:
                if item == kwargs['addr_type']:
                    command += " addr-type %s" % item
                    break
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']
        if 'ipmi_password' in kwargs:
            command += " ipmi-password %s" % kwargs['ipmi_password']

        return self.send_command(command)


    def admin_ipmi_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'admin-ipmi-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def admin_service_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'admin-service-modify'
        if 'if' in kwargs:
            command += " if %s" % kwargs['if']
        if 'ssh' in kwargs:
            if kwargs['ssh']:
                command += " ssh"
            else:
                command += " no-ssh"
        if 'nfs' in kwargs:
            if kwargs['nfs']:
                command += " nfs"
            else:
                command += " no-nfs"
        if 'web' in kwargs:
            if kwargs['web']:
                command += " web"
            else:
                command += " no-web"
        if 'web_ssl' in kwargs:
            if kwargs['web_ssl']:
                command += " web-ssl"
            else:
                command += " no-web-ssl"
        if 'web_ssl_port' in kwargs:
            command += " web-ssl-port %s" % kwargs['web_ssl_port']
        if 'web_port' in kwargs:
            command += " web-port %s" % kwargs['web_port']
        if 'snmp' in kwargs:
            if kwargs['snmp']:
                command += " snmp"
            else:
                command += " no-snmp"
        if 'net_api' in kwargs:
            if kwargs['net_api']:
                command += " net-api"
            else:
                command += " no-net-api"
        if 'icmp' in kwargs:
            if kwargs['icmp']:
                command += " icmp"
            else:
                command += " no-icmp"

        return self.send_command(command)


    def admin_service_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'admin-service-show'
        if 'if' in kwargs:
            command += " if %s" % kwargs['if']
        if 'ssh' in kwargs:
            if kwargs['ssh']:
                command += " ssh"
            else:
                command += " no-ssh"
        if 'nfs' in kwargs:
            if kwargs['nfs']:
                command += " nfs"
            else:
                command += " no-nfs"
        if 'web' in kwargs:
            if kwargs['web']:
                command += " web"
            else:
                command += " no-web"
        if 'web_ssl' in kwargs:
            if kwargs['web_ssl']:
                command += " web-ssl"
            else:
                command += " no-web-ssl"
        if 'web_ssl_port' in kwargs:
            command += " web-ssl-port %s" % kwargs['web_ssl_port']
        if 'web_port' in kwargs:
            command += " web-port %s" % kwargs['web_port']
        if 'snmp' in kwargs:
            if kwargs['snmp']:
                command += " snmp"
            else:
                command += " no-snmp"
        if 'net_api' in kwargs:
            if kwargs['net_api']:
                command += " net-api"
            else:
                command += " no-net-api"
        if 'icmp' in kwargs:
            if kwargs['icmp']:
                command += " icmp"
            else:
                command += " no-icmp"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def admin_sftp_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'admin-sftp-modify'
        if 'disable' in kwargs:
            command += " disable"
        if 'enable' in kwargs:
            command += " enable"

        return self.send_command(command)


    def admin_sftp_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'admin-sftp-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def admin_syslog_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'admin-syslog-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'transport' in kwargs:
            for item in [u'tcp-tls', u'udp']:
                if item == kwargs['transport']:
                    command += " transport %s" % item
                    break
        if 'message_format' in kwargs:
            for item in [u'structured', u'legacy']:
                if item == kwargs['message_format']:
                    command += " message-format %s" % item
                    break

        return self.send_command(command)


    def admin_syslog_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'admin-syslog-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def admin_syslog_match_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'admin-syslog-match-add'
        if 'syslog_name' in kwargs:
            command += " syslog-name %s" % kwargs['syslog_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'msg_category' in kwargs:
            for item in [u'event', u'audit', u'system', u'perror']:
                if item == kwargs['msg_category']:
                    command += " msg-category %s" % item
                    break
        if 'msg_program' in kwargs:
            command += " msg-program %s" % kwargs['msg_program']
        if 'msg_name' in kwargs:
            command += " msg-name %s" % kwargs['msg_name']
        if 'msg_code' in kwargs:
            command += " msg-code %s" % kwargs['msg_code']
        if 'msg_level' in kwargs:
            for item in [u'critical', u'error', u'warn', u'note']:
                if item == kwargs['msg_level']:
                    command += " msg-level %s" % item
                    break
        if 'openflow' in kwargs:
            if kwargs['openflow']:
                command += " openflow"
            else:
                command += " storage"
        if 'msg_client_addr' in kwargs:
            command += " msg-client-addr %s" % kwargs['msg_client_addr']
        if 'msg_port' in kwargs:
            command += " msg-port %s" % kwargs['msg_port']
        if 'msg_args' in kwargs:
            command += " msg-args %s" % kwargs['msg_args']
        if 'msg_starting_point' in kwargs:
            command += " msg-starting-point %s" % kwargs['msg_starting_point']
        if 'msg_length' in kwargs:
            command += " msg-length %s" % kwargs['msg_length']
        if 'msg_show_time' in kwargs:
            command += " msg-show-time %s" % kwargs['msg_show_time']
        if 'msg_since_last_reset' in kwargs:
            if kwargs['msg_since_last_reset']:
                command += " msg-since-last-reset"
            else:
                command += " no-msg-since-last-reset"
        if 'set_severity' in kwargs:
            for item in [u'emerg', u'alert', u'crit', u'err', u'warning', u'notice', u'info', u'debug']:
                if item == kwargs['set_severity']:
                    command += " set-severity %s" % item
                    break

        return self.send_command(command)


    def admin_syslog_match_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'admin-syslog-match-modify'
        if 'syslog_name' in kwargs:
            command += " syslog-name %s" % kwargs['syslog_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'msg_category' in kwargs:
            for item in [u'event', u'audit', u'system', u'perror']:
                if item == kwargs['msg_category']:
                    command += " msg-category %s" % item
                    break
        if 'msg_program' in kwargs:
            command += " msg-program %s" % kwargs['msg_program']
        if 'msg_name' in kwargs:
            command += " msg-name %s" % kwargs['msg_name']
        if 'msg_code' in kwargs:
            command += " msg-code %s" % kwargs['msg_code']
        if 'msg_level' in kwargs:
            for item in [u'critical', u'error', u'warn', u'note']:
                if item == kwargs['msg_level']:
                    command += " msg-level %s" % item
                    break
        if 'openflow' in kwargs:
            if kwargs['openflow']:
                command += " openflow"
            else:
                command += " storage"
        if 'msg_client_addr' in kwargs:
            command += " msg-client-addr %s" % kwargs['msg_client_addr']
        if 'msg_port' in kwargs:
            command += " msg-port %s" % kwargs['msg_port']
        if 'msg_args' in kwargs:
            command += " msg-args %s" % kwargs['msg_args']
        if 'msg_starting_point' in kwargs:
            command += " msg-starting-point %s" % kwargs['msg_starting_point']
        if 'msg_length' in kwargs:
            command += " msg-length %s" % kwargs['msg_length']
        if 'msg_reverse' in kwargs:
            if kwargs['msg_reverse']:
                command += " msg-reverse"
            else:
                command += " no-msg-reverse"
        if 'msg_show_time' in kwargs:
            command += " msg-show-time %s" % kwargs['msg_show_time']
        if 'msg_since_last_reset' in kwargs:
            if kwargs['msg_since_last_reset']:
                command += " msg-since-last-reset"
            else:
                command += " no-msg-since-last-reset"
        if 'set_severity' in kwargs:
            for item in [u'emerg', u'alert', u'crit', u'err', u'warning', u'notice', u'info', u'debug']:
                if item == kwargs['set_severity']:
                    command += " set-severity %s" % item
                    break

        return self.send_command(command)


    def admin_syslog_match_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'admin-syslog-match-remove'
        if 'syslog_name' in kwargs:
            command += " syslog-name %s" % kwargs['syslog_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def admin_syslog_match_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'admin-syslog-match-show'
        if 'syslog_name' in kwargs:
            command += " syslog-name %s" % kwargs['syslog_name']
        if 'msg_category' in kwargs:
            for item in [u'event', u'audit', u'system', u'perror']:
                if item == kwargs['msg_category']:
                    command += " msg-category %s" % item
                    break
        if 'msg_program' in kwargs:
            command += " msg-program %s" % kwargs['msg_program']
        if 'msg_pid' in kwargs:
            command += " msg-pid %s" % kwargs['msg_pid']
        if 'msg_name' in kwargs:
            command += " msg-name %s" % kwargs['msg_name']
        if 'msg_code' in kwargs:
            command += " msg-code %s" % kwargs['msg_code']
        if 'msg_level' in kwargs:
            for item in [u'critical', u'error', u'warn', u'note']:
                if item == kwargs['msg_level']:
                    command += " msg-level %s" % item
                    break
        if 'openflow' in kwargs:
            if kwargs['openflow']:
                command += " openflow"
            else:
                command += " storage"
        if 'msg_client_pid' in kwargs:
            command += " msg-client-pid %s" % kwargs['msg_client_pid']
        if 'msg_client_addr' in kwargs:
            command += " msg-client-addr %s" % kwargs['msg_client_addr']
        if 'msg_port' in kwargs:
            command += " msg-port %s" % kwargs['msg_port']
        if 'msg_starting_point' in kwargs:
            command += " msg-starting-point %s" % kwargs['msg_starting_point']
        if 'msg_length' in kwargs:
            command += " msg-length %s" % kwargs['msg_length']
        if 'msg_reverse' in kwargs:
            if kwargs['msg_reverse']:
                command += " msg-reverse"
            else:
                command += " no-msg-reverse"
        if 'msg_since_last_reset' in kwargs:
            if kwargs['msg_since_last_reset']:
                command += " msg-since-last-reset"
            else:
                command += " no-msg-since-last-reset"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'set_severity' in kwargs:
            for item in [u'emerg', u'alert', u'crit', u'err', u'warning', u'notice', u'info', u'debug']:
                if item == kwargs['set_severity']:
                    command += " set-severity %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def admin_syslog_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'admin-syslog-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'transport' in kwargs:
            for item in [u'tcp-tls', u'udp']:
                if item == kwargs['transport']:
                    command += " transport %s" % item
                    break
        if 'message_format' in kwargs:
            for item in [u'structured', u'legacy']:
                if item == kwargs['message_format']:
                    command += " message-format %s" % item
                    break

        return self.send_command(command)


    def admin_syslog_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'admin-syslog-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'transport' in kwargs:
            for item in [u'tcp-tls', u'udp']:
                if item == kwargs['transport']:
                    command += " transport %s" % item
                    break
        if 'message_format' in kwargs:
            for item in [u'structured', u'legacy']:
                if item == kwargs['message_format']:
                    command += " message-format %s" % item
                    break
        if 'status' in kwargs:
            command += " status %s" % kwargs['status']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def alert_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'alert-show'
        if 'level' in kwargs:
            command += " level %s" % kwargs['level']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def api_install(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'api-install'
        if 'linux_host' in kwargs:
            command += " linux-host %s" % kwargs['linux_host']
        if 'user' in kwargs:
            command += " user %s" % kwargs['user']

        return self.send_command(command)


    def bootenv_activate_and_reboot(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'bootenv-activate-and-reboot'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def bootenv_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'bootenv-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def bootenv_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'bootenv-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'version' in kwargs:
            command += " version %s" % kwargs['version']
        if 'current' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['current']:
                    command += " current %s" % item
                    break
        if 'reboot' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['reboot']:
                    command += " reboot %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def cert_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cert-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'country' in kwargs:
            command += " country %s" % kwargs['country']
        if 'state' in kwargs:
            command += " state %s" % kwargs['state']
        if 'city' in kwargs:
            command += " city %s" % kwargs['city']
        if 'organization' in kwargs:
            command += " organization %s" % kwargs['organization']
        if 'organizational_unit' in kwargs:
            command += " organizational-unit %s" % kwargs['organizational_unit']
        if 'common_name' in kwargs:
            command += " common-name %s" % kwargs['common_name']

        return self.send_command(command)


    def cert_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cert-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def cert_import(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cert-import'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'file_ca' in kwargs:
            command += " file-ca %s" % kwargs['file_ca']
        if 'file_server' in kwargs:
            command += " file-server %s" % kwargs['file_server']
        if 'file_inter' in kwargs:
            command += " file-inter %s" % kwargs['file_inter']
        if 'cert_import' in kwargs:
            command += " cert-import"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'file_server' in kwargs:
            command += " file-server %s" % kwargs['file_server']
        if 'file_ca' in kwargs:
            command += " file-ca %s" % kwargs['file_ca']
        if 'file_inter' in kwargs:
            command += " file-inter %s" % kwargs['file_inter']

        return self.send_command(command)


    def cert_request_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cert-request-create'

        return self.send_command(command)


    def cert_request_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cert-request-show'
        if 'cert_request' in kwargs:
            command += " cert-request %s" % kwargs['cert_request']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def cert_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cert-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'cert_type' in kwargs:
            for item in [u'ca', u'intermediate', u'server']:
                if item == kwargs['cert_type']:
                    command += " cert-type %s" % item
                    break
        if 'subject' in kwargs:
            command += " subject %s" % kwargs['subject']
        if 'issuer' in kwargs:
            command += " issuer %s" % kwargs['issuer']
        if 'serial_number' in kwargs:
            command += " serial-number %s" % kwargs['serial_number']
        if 'valid_from' in kwargs:
            command += " valid-from %s" % kwargs['valid_from']
        if 'valid_to' in kwargs:
            command += " valid-to %s" % kwargs['valid_to']
        if 'country' in kwargs:
            command += " country %s" % kwargs['country']
        if 'state' in kwargs:
            command += " state %s" % kwargs['state']
        if 'city' in kwargs:
            command += " city %s" % kwargs['city']
        if 'organization' in kwargs:
            command += " organization %s" % kwargs['organization']
        if 'organizational_unit' in kwargs:
            command += " organizational-unit %s" % kwargs['organizational_unit']
        if 'common_name' in kwargs:
            command += " common-name %s" % kwargs['common_name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def client_server_stats_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'client-server-stats-clear'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'client_switch_port' in kwargs:
            command += " client-switch-port %s" % kwargs['client_switch_port']
        if 'server_switch_port' in kwargs:
            command += " server-switch-port %s" % kwargs['server_switch_port']
        if 'client_mac' in kwargs:
            command += " client-mac %s" % kwargs['client_mac']
        if 'server_mac' in kwargs:
            command += " server-mac %s" % kwargs['server_mac']
        if 'client_ip' in kwargs:
            command += " client-ip %s" % kwargs['client_ip']
        if 'server_ip' in kwargs:
            command += " server-ip %s" % kwargs['server_ip']
        if 'syn' in kwargs:
            command += " syn %s" % kwargs['syn']
        if 'est' in kwargs:
            command += " est %s" % kwargs['est']
        if 'fin' in kwargs:
            command += " fin %s" % kwargs['fin']
        if 'syn_resends' in kwargs:
            command += " syn-resends %s" % kwargs['syn_resends']
        if 'syn_ack_resends' in kwargs:
            command += " syn-ack-resends %s" % kwargs['syn_ack_resends']
        if 'obytes' in kwargs:
            command += " obytes %s" % kwargs['obytes']
        if 'ibytes' in kwargs:
            command += " ibytes %s" % kwargs['ibytes']
        if 'total_bytes' in kwargs:
            command += " total-bytes %s" % kwargs['total_bytes']
        if 'client_server_stats_clear_history' in kwargs:
            command += " client-server-stats-clear-history"

        return self.send_command(command)


    def client_server_stats_clear_history(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'client-server-stats-clear-history'

        return self.send_command(command)


    def client_server_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'client-server-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'client_switch_port' in kwargs:
            command += " client-switch-port %s" % kwargs['client_switch_port']
        if 'server_switch_port' in kwargs:
            command += " server-switch-port %s" % kwargs['server_switch_port']
        if 'client_mac' in kwargs:
            command += " client-mac %s" % kwargs['client_mac']
        if 'server_mac' in kwargs:
            command += " server-mac %s" % kwargs['server_mac']
        if 'client_ip' in kwargs:
            command += " client-ip %s" % kwargs['client_ip']
        if 'server_ip' in kwargs:
            command += " server-ip %s" % kwargs['server_ip']
        if 'syn' in kwargs:
            command += " syn %s" % kwargs['syn']
        if 'est' in kwargs:
            command += " est %s" % kwargs['est']
        if 'fin' in kwargs:
            command += " fin %s" % kwargs['fin']
        if 'syn_resends' in kwargs:
            command += " syn-resends %s" % kwargs['syn_resends']
        if 'syn_ack_resends' in kwargs:
            command += " syn-ack-resends %s" % kwargs['syn_ack_resends']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def cluster_bringup_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cluster-bringup-modify'
        if 'vlag_port_bringup_mode' in kwargs:
            for item in [u'staggered', u'simultaneous']:
                if item == kwargs['vlag_port_bringup_mode']:
                    command += " vlag-port-bringup-mode %s" % item
                    break

        return self.send_command(command)


    def cluster_bringup_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cluster-bringup-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def cluster_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cluster-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'validate' in kwargs:
            if kwargs['validate']:
                command += " validate"
            else:
                command += " no-validate"

        return self.send_command(command)


    def cluster_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cluster-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def cluster_info(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cluster-info'

        return self.send_command(command)


    def cluster_membership_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cluster-membership-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def cluster_membership_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cluster-membership-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'going_offline' in kwargs:
            command += " going-offline"
        if 'tid' in kwargs:
            command += " tid %s" % kwargs['tid']
        if 'mode' in kwargs:
            for item in [u'none', u'master', u'slave']:
                if item == kwargs['mode']:
                    command += " mode %s" % item
                    break
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'remote_ports' in kwargs:
            command += " remote-ports %s" % kwargs['remote_ports']
        if 'validate' in kwargs:
            if kwargs['validate']:
                command += " validate"
            else:
                command += " no-validate"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def cluster_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cluster-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'going_offline' in kwargs:
            command += " going-offline"
        if 'tid' in kwargs:
            command += " tid %s" % kwargs['tid']
        if 'mode' in kwargs:
            for item in [u'none', u'master', u'slave']:
                if item == kwargs['mode']:
                    command += " mode %s" % item
                    break
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'remote_ports' in kwargs:
            command += " remote-ports %s" % kwargs['remote_ports']
        if 'validate' in kwargs:
            if kwargs['validate']:
                command += " validate"
            else:
                command += " no-validate"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def connection_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'connection-clear'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'src_switch_port' in kwargs:
            command += " src-switch-port %s" % kwargs['src_switch_port']
        if 'dst_switch_port' in kwargs:
            command += " dst-switch-port %s" % kwargs['dst_switch_port']
        if 'src_mac' in kwargs:
            command += " src-mac %s" % kwargs['src_mac']
        if 'dst_mac' in kwargs:
            command += " dst-mac %s" % kwargs['dst_mac']
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'dscp' in kwargs:
            command += " dscp %s" % kwargs['dscp']
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'tunnel_src_mac' in kwargs:
            command += " tunnel-src-mac %s" % kwargs['tunnel_src_mac']
        if 'tunnel_dst_mac' in kwargs:
            command += " tunnel-dst-mac %s" % kwargs['tunnel_dst_mac']
        if 'tunnel_src_ip' in kwargs:
            command += " tunnel-src-ip %s" % kwargs['tunnel_src_ip']
        if 'tunnel_dst_ip' in kwargs:
            command += " tunnel-dst-ip %s" % kwargs['tunnel_dst_ip']
        if 'tunnel_proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['tunnel_proto']:
                    command += " tunnel-proto %s" % item
                    break
        if 'cur_state' in kwargs:
            for item in [u'syn', u'est', u'fin', u'rst', u'none']:
                if item == kwargs['cur_state']:
                    command += " cur-state %s" % item
                    break
        if 'syn_resends' in kwargs:
            command += " syn-resends %s" % kwargs['syn_resends']
        if 'syn_ack_resends' in kwargs:
            command += " syn-ack-resends %s" % kwargs['syn_ack_resends']
        if 'obytes' in kwargs:
            command += " obytes %s" % kwargs['obytes']
        if 'ibytes' in kwargs:
            command += " ibytes %s" % kwargs['ibytes']
        if 'total_bytes' in kwargs:
            command += " total-bytes %s" % kwargs['total_bytes']
        if 'transition_state' in kwargs:
            for item in [u'any', u'started-and-ended', u'started', u'ended', u'on-going', u'updated']:
                if item == kwargs['transition_state']:
                    command += " transition-state %s" % item
                    break
        if 'connection_clear_history' in kwargs:
            command += " connection-clear-history"

        return self.send_command(command)


    def connection_clear_history(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'connection-clear-history'

        return self.send_command(command)


    def connection_latency_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'connection-latency-show'
        if 'num_bins' in kwargs:
            command += " num-bins %s" % kwargs['num_bins']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def connection_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'connection-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'src_switch_port' in kwargs:
            command += " src-switch-port %s" % kwargs['src_switch_port']
        if 'dst_switch_port' in kwargs:
            command += " dst-switch-port %s" % kwargs['dst_switch_port']
        if 'src_mac' in kwargs:
            command += " src-mac %s" % kwargs['src_mac']
        if 'dst_mac' in kwargs:
            command += " dst-mac %s" % kwargs['dst_mac']
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'dscp' in kwargs:
            command += " dscp %s" % kwargs['dscp']
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'tunnel_src_mac' in kwargs:
            command += " tunnel-src-mac %s" % kwargs['tunnel_src_mac']
        if 'tunnel_dst_mac' in kwargs:
            command += " tunnel-dst-mac %s" % kwargs['tunnel_dst_mac']
        if 'tunnel_src_ip' in kwargs:
            command += " tunnel-src-ip %s" % kwargs['tunnel_src_ip']
        if 'tunnel_dst_ip' in kwargs:
            command += " tunnel-dst-ip %s" % kwargs['tunnel_dst_ip']
        if 'tunnel_proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['tunnel_proto']:
                    command += " tunnel-proto %s" % item
                    break
        if 'cur_state' in kwargs:
            for item in [u'syn', u'est', u'fin', u'rst', u'none']:
                if item == kwargs['cur_state']:
                    command += " cur-state %s" % item
                    break
        if 'syn_resends' in kwargs:
            command += " syn-resends %s" % kwargs['syn_resends']
        if 'syn_ack_resends' in kwargs:
            command += " syn-ack-resends %s" % kwargs['syn_ack_resends']
        if 'obytes' in kwargs:
            command += " obytes %s" % kwargs['obytes']
        if 'ibytes' in kwargs:
            command += " ibytes %s" % kwargs['ibytes']
        if 'total_bytes' in kwargs:
            command += " total-bytes %s" % kwargs['total_bytes']
        if 'updated' in kwargs:
            command += " updated"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def connection_stats_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'connection-stats-clear'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'iconns' in kwargs:
            command += " iconns %s" % kwargs['iconns']
        if 'oconns' in kwargs:
            command += " oconns %s" % kwargs['oconns']
        if 'ibytes' in kwargs:
            command += " ibytes %s" % kwargs['ibytes']
        if 'obytes' in kwargs:
            command += " obytes %s" % kwargs['obytes']
        if 'total_bytes' in kwargs:
            command += " total-bytes %s" % kwargs['total_bytes']
        if 'connection_stats_clear_history' in kwargs:
            command += " connection-stats-clear-history"

        return self.send_command(command)


    def connection_stats_clear_history(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'connection-stats-clear-history'

        return self.send_command(command)


    def connection_stats_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'connection-stats-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'connection_max_memory' in kwargs:
            command += " connection-max-memory %s" % kwargs['connection_max_memory']
        if 'connection_backup_enable' in kwargs:
            if kwargs['connection_backup_enable']:
                command += " connection-backup-enable"
            else:
                command += " connection-backup-disable"
        if 'client_server_stats_max_memory' in kwargs:
            command += " client-server-stats-max-memory %s" % kwargs['client_server_stats_max_memory']
        if 'client_server_stats_log_enable' in kwargs:
            if kwargs['client_server_stats_log_enable']:
                command += " client-server-stats-log-enable"
            else:
                command += " client-server-stats-log-disable"
        if 'client_server_stats_log_disk_space' in kwargs:
            command += " client-server-stats-log-disk-space %s" % kwargs['client_server_stats_log_disk_space']
        if 'connection_stats_max_memory' in kwargs:
            command += " connection-stats-max-memory %s" % kwargs['connection_stats_max_memory']
        if 'connection_stats_log_enable' in kwargs:
            if kwargs['connection_stats_log_enable']:
                command += " connection-stats-log-enable"
            else:
                command += " connection-stats-log-disable"
        if 'connection_stats_log_disk_space' in kwargs:
            command += " connection-stats-log-disk-space %s" % kwargs['connection_stats_log_disk_space']
        if 'service_stat_max_memory' in kwargs:
            command += " service-stat-max-memory %s" % kwargs['service_stat_max_memory']
        if 'fabric_connection_max_memory' in kwargs:
            command += " fabric-connection-max-memory %s" % kwargs['fabric_connection_max_memory']
        if 'fabric_connection_backup_enable' in kwargs:
            if kwargs['fabric_connection_backup_enable']:
                command += " fabric-connection-backup-enable"
            else:
                command += " fabric-connection-backup-disable"

        return self.send_command(command)


    def connection_stats_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'connection-stats-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def connection_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'connection-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'iconns' in kwargs:
            command += " iconns %s" % kwargs['iconns']
        if 'oconns' in kwargs:
            command += " oconns %s" % kwargs['oconns']
        if 'ibytes' in kwargs:
            command += " ibytes %s" % kwargs['ibytes']
        if 'obytes' in kwargs:
            command += " obytes %s" % kwargs['obytes']
        if 'total_bytes' in kwargs:
            command += " total-bytes %s" % kwargs['total_bytes']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def control_stats_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'control-stats-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']

        return self.send_command(command)


    def control_stats_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'control-stats-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def control_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'control-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def control_traffic_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'control-traffic-modify'

        return self.send_command(command)


    def control_traffic_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'control-traffic-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def cpu_class_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cpu-class-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'rate_limit' in kwargs:
            command += " rate-limit %s" % kwargs['rate_limit']
        if 'hog_protect' in kwargs:
            for item in [u'disable', u'enable', u'enable-and-drop']:
                if item == kwargs['hog_protect']:
                    command += " hog-protect %s" % item
                    break

        return self.send_command(command)


    def cpu_class_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cpu-class-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def cpu_class_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cpu-class-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'rate_limit' in kwargs:
            command += " rate-limit %s" % kwargs['rate_limit']
        if 'hog_protect' in kwargs:
            for item in [u'disable', u'enable', u'enable-and-drop']:
                if item == kwargs['hog_protect']:
                    command += " hog-protect %s" % item
                    break

        return self.send_command(command)


    def cpu_class_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cpu-class-settings-modify'
        if 'hog_max_hosts_per_class' in kwargs:
            command += " hog-max-hosts-per-class %s" % kwargs['hog_max_hosts_per_class']
        if 'hog_max_violators_per_port' in kwargs:
            command += " hog-max-violators-per-port %s" % kwargs['hog_max_violators_per_port']
        if 'hog_warning_threshold' in kwargs:
            command += " hog-warning-threshold %s" % kwargs['hog_warning_threshold']

        return self.send_command(command)


    def cpu_class_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cpu-class-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def cpu_class_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cpu-class-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'rate_limit' in kwargs:
            command += " rate-limit %s" % kwargs['rate_limit']
        if 'hog_protect' in kwargs:
            for item in [u'disable', u'enable', u'enable-and-drop']:
                if item == kwargs['hog_protect']:
                    command += " hog-protect %s" % item
                    break
        if 'hog_protect_support' in kwargs:
            if kwargs['hog_protect_support']:
                command += " hog-protect-support"
            else:
                command += " no-hog-protect-support"
        if 'queue' in kwargs:
            command += " queue %s" % kwargs['queue']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def cpu_class_stats_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cpu-class-stats-clear'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'cos' in kwargs:
            command += " cos %s" % kwargs['cos']
        if 'hw_out_pkts' in kwargs:
            command += " hw-out-pkts %s" % kwargs['hw_out_pkts']
        if 'hw_drop_pkts' in kwargs:
            command += " hw-drop-pkts %s" % kwargs['hw_drop_pkts']
        if 'sw_pkts' in kwargs:
            command += " sw-pkts %s" % kwargs['sw_pkts']
        if 'sw_drops_pkts' in kwargs:
            command += " sw-drops-pkts %s" % kwargs['sw_drops_pkts']
        if 'hog_violations' in kwargs:
            command += " hog-violations %s" % kwargs['hog_violations']
        if 'hog_warnings' in kwargs:
            command += " hog-warnings %s" % kwargs['hog_warnings']
        if 'hog_hosts_in' in kwargs:
            command += " hog-hosts-in %s" % kwargs['hog_hosts_in']
        if 'hog_hosts_out' in kwargs:
            command += " hog-hosts-out %s" % kwargs['hog_hosts_out']
        if 'hog_max_hosts_drops' in kwargs:
            command += " hog-max-hosts-drops %s" % kwargs['hog_max_hosts_drops']

        return self.send_command(command)


    def cpu_class_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cpu-class-stats-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'cos' in kwargs:
            command += " cos %s" % kwargs['cos']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def dhcp_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'dedicated_vnet_service' in kwargs:
            if kwargs['dedicated_vnet_service']:
                command += " dedicated-vnet-service"
            else:
                command += " shared-vnet-service"
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'max_leasetime' in kwargs:
            command += " max-leasetime %s" % kwargs['max_leasetime']
        if 'default_leasetime' in kwargs:
            command += " default-leasetime %s" % kwargs['default_leasetime']
        if 'pxe_boot' in kwargs:
            for item in [u'disabled', u'by-host-mac', u'all-hosts']:
                if item == kwargs['pxe_boot']:
                    command += " pxe-boot %s" % item
                    break
        if 'pxe_menu_timeout' in kwargs:
            command += " pxe-menu-timeout %s" % kwargs['pxe_menu_timeout']

        return self.send_command(command)


    def dhcp_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def dhcp_filter_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-filter-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'trusted_ports' in kwargs:
            command += " trusted-ports %s" % kwargs['trusted_ports']

        return self.send_command(command)


    def dhcp_filter_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-filter-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def dhcp_filter_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-filter-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'trusted_ports' in kwargs:
            command += " trusted-ports %s" % kwargs['trusted_ports']

        return self.send_command(command)


    def dhcp_filter_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-filter-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'trusted_ports' in kwargs:
            command += " trusted-ports %s" % kwargs['trusted_ports']
        if 'vlan' in kwargs:
            command += " vlan %s" % kwargs['vlan']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def dhcp_host_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-host-add'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'pxe_boot' in kwargs:
            if kwargs['pxe_boot']:
                command += " pxe-boot"
            else:
                command += " no-pxe-boot"
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']
        if 'fixed_ip' in kwargs:
            command += " fixed-ip %s" % kwargs['fixed_ip']

        return self.send_command(command)


    def dhcp_host_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-host-remove'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']

        return self.send_command(command)


    def dhcp_host_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-host-show'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'pxe_boot' in kwargs:
            if kwargs['pxe_boot']:
                command += " pxe-boot"
            else:
                command += " no-pxe-boot"
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']
        if 'fixed_ip' in kwargs:
            command += " fixed-ip %s" % kwargs['fixed_ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def dhcp_interface_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-interface-add'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def dhcp_interface_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-interface-modify'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def dhcp_interface_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-interface-remove'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']

        return self.send_command(command)


    def dhcp_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-interface-show'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def dhcp_lease_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-lease-show'
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'db_state' in kwargs:
            for item in [u'unknown', u'free', u'active', u'backup', u'abandoned', u'expired']:
                if item == kwargs['db_state']:
                    command += " db-state %s" % item
                    break
        if 'server_ip' in kwargs:
            command += " server-ip %s" % kwargs['server_ip']
        if 'server_port' in kwargs:
            command += " server-port %s" % kwargs['server_port']
        if 'trusted_server' in kwargs:
            if kwargs['trusted_server']:
                command += " trusted-server"
            else:
                command += " no-trusted-server"
        if 'last_msg' in kwargs:
            for item in [u'-', u'discover', u'offer', u'request', u'decline', u'ack', u'nack', u'release', u'inform']:
                if item == kwargs['last_msg']:
                    command += " last-msg %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def dhcp_migrate(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-migrate'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def dhcp_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'gateway' in kwargs:
            command += " gateway %s" % kwargs['gateway']
        if 'max_leasetime' in kwargs:
            command += " max-leasetime %s" % kwargs['max_leasetime']
        if 'default_leasetime' in kwargs:
            command += " default-leasetime %s" % kwargs['default_leasetime']
        if 'pxe_boot' in kwargs:
            for item in [u'disabled', u'by-host-mac', u'all-hosts']:
                if item == kwargs['pxe_boot']:
                    command += " pxe-boot %s" % item
                    break
        if 'pxe_menu_timeout' in kwargs:
            command += " pxe-menu-timeout %s" % kwargs['pxe_menu_timeout']

        return self.send_command(command)


    def dhcp_pool_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-pool-add'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']
        if 'ddns_domain' in kwargs:
            command += " ddns-domain %s" % kwargs['ddns_domain']
        if 'dns_ip' in kwargs:
            command += " dns-ip %s" % kwargs['dns_ip']
        if 'ddns_domain_rev' in kwargs:
            command += " ddns-domain-rev %s" % kwargs['ddns_domain_rev']
        if 'ntp_server_ip' in kwargs:
            command += " ntp-server-ip %s" % kwargs['ntp_server_ip']

        return self.send_command(command)


    def dhcp_pool_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-pool-modify'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'dhcp_pool_name' in kwargs:
            command += " dhcp-pool-name %s" % kwargs['dhcp_pool_name']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']
        if 'ddns_domain' in kwargs:
            command += " ddns-domain %s" % kwargs['ddns_domain']
        if 'dns_ip' in kwargs:
            command += " dns-ip %s" % kwargs['dns_ip']
        if 'ddns_domain_rev' in kwargs:
            command += " ddns-domain-rev %s" % kwargs['ddns_domain_rev']
        if 'ntp_server_ip' in kwargs:
            command += " ntp-server-ip %s" % kwargs['ntp_server_ip']

        return self.send_command(command)


    def dhcp_pool_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-pool-remove'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'dhcp_pool_name' in kwargs:
            command += " dhcp-pool-name %s" % kwargs['dhcp_pool_name']

        return self.send_command(command)


    def dhcp_pool_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-pool-show'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'dhcp_pool_name' in kwargs:
            command += " dhcp-pool-name %s" % kwargs['dhcp_pool_name']
        if 'start_ip' in kwargs:
            command += " start-ip %s" % kwargs['start_ip']
        if 'end_ip' in kwargs:
            command += " end-ip %s" % kwargs['end_ip']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']
        if 'ddns_domain' in kwargs:
            command += " ddns-domain %s" % kwargs['ddns_domain']
        if 'dns_ip' in kwargs:
            command += " dns-ip %s" % kwargs['dns_ip']
        if 'ddns_domain_rev' in kwargs:
            command += " ddns-domain-rev %s" % kwargs['ddns_domain_rev']
        if 'kickstarts_url' in kwargs:
            command += " kickstarts-url %s" % kwargs['kickstarts_url']
        if 'ntp_server_ip' in kwargs:
            command += " ntp-server-ip %s" % kwargs['ntp_server_ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def dhcp_pxe_menu_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-pxe-menu-add'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'kernel_iso_path' in kwargs:
            command += " kernel-iso-path %s" % kwargs['kernel_iso_path']
        if 'initrd_iso_path' in kwargs:
            command += " initrd-iso-path %s" % kwargs['initrd_iso_path']
        if 'append' in kwargs:
            command += " append %s" % kwargs['append']
        if 'menu_label' in kwargs:
            command += " menu-label %s" % kwargs['menu_label']

        return self.send_command(command)


    def dhcp_pxe_menu_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-pxe-menu-modify'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'menu_label' in kwargs:
            command += " menu-label %s" % kwargs['menu_label']
        if 'kernel_iso_path' in kwargs:
            command += " kernel-iso-path %s" % kwargs['kernel_iso_path']
        if 'initrd_iso_path' in kwargs:
            command += " initrd-iso-path %s" % kwargs['initrd_iso_path']
        if 'append' in kwargs:
            command += " append %s" % kwargs['append']

        return self.send_command(command)


    def dhcp_pxe_menu_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-pxe-menu-remove'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def dhcp_pxe_menu_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-pxe-menu-show'
        if 'dhcp_name' in kwargs:
            command += " dhcp-name %s" % kwargs['dhcp_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'menu_label' in kwargs:
            command += " menu-label %s" % kwargs['menu_label']
        if 'kernel_iso_path' in kwargs:
            command += " kernel-iso-path %s" % kwargs['kernel_iso_path']
        if 'initrd_iso_path' in kwargs:
            command += " initrd-iso-path %s" % kwargs['initrd_iso_path']
        if 'append' in kwargs:
            command += " append %s" % kwargs['append']
        if 'iso_url' in kwargs:
            command += " iso-url %s" % kwargs['iso_url']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def dhcp_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dhcp-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'max_leasetime' in kwargs:
            command += " max-leasetime %s" % kwargs['max_leasetime']
        if 'default_leasetime' in kwargs:
            command += " default-leasetime %s" % kwargs['default_leasetime']
        if 'resolution_intr' in kwargs:
            if kwargs['resolution_intr']:
                command += " resolution-intr"
            else:
                command += " conflict-done"
        if 'pxe_boot' in kwargs:
            for item in [u'disabled', u'by-host-mac', u'all-hosts']:
                if item == kwargs['pxe_boot']:
                    command += " pxe-boot %s" % item
                    break
        if 'pxe_menu_timeout' in kwargs:
            command += " pxe-menu-timeout %s" % kwargs['pxe_menu_timeout']
        if 'kickstarts_share' in kwargs:
            command += " kickstarts-share %s" % kwargs['kickstarts_share']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def disk_library_image_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'disk-library-image-add'
        if 'disk_library_name' in kwargs:
            command += " disk-library-name %s" % kwargs['disk_library_name']
        if 'image_label' in kwargs:
            command += " image-label %s" % kwargs['image_label']
        if 'image_size' in kwargs:
            command += " image-size %s" % kwargs['image_size']

        return self.send_command(command)


    def disk_library_image_clone(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'disk-library-image-clone'
        if 'disk_library_name' in kwargs:
            command += " disk-library-name %s" % kwargs['disk_library_name']
        if 'image_label' in kwargs:
            command += " image-label %s" % kwargs['image_label']

        return self.send_command(command)


    def disk_library_image_export(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'disk-library-image-export'
        if 'disk_library_name' in kwargs:
            command += " disk-library-name %s" % kwargs['disk_library_name']
        if 'image_label' in kwargs:
            command += " image-label %s" % kwargs['image_label']
        if 'image_file' in kwargs:
            command += " image-file %s" % kwargs['image_file']
        if 'image_size' in kwargs:
            command += " image-size %s" % kwargs['image_size']

        return self.send_command(command)


    def disk_library_image_import(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'disk-library-image-import'
        if 'disk_library_name' in kwargs:
            command += " disk-library-name %s" % kwargs['disk_library_name']
        if 'image_label' in kwargs:
            command += " image-label %s" % kwargs['image_label']
        if 'image_file' in kwargs:
            command += " image-file %s" % kwargs['image_file']
        if 'image_size' in kwargs:
            command += " image-size %s" % kwargs['image_size']

        return self.send_command(command)


    def disk_library_image_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'disk-library-image-remove'
        if 'disk_library_name' in kwargs:
            command += " disk-library-name %s" % kwargs['disk_library_name']
        if 'image_label' in kwargs:
            command += " image-label %s" % kwargs['image_label']

        return self.send_command(command)


    def disk_library_image_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'disk-library-image-show'
        if 'disk_library_name' in kwargs:
            command += " disk-library-name %s" % kwargs['disk_library_name']
        if 'image_label' in kwargs:
            command += " image-label %s" % kwargs['image_label']
        if 'image_file' in kwargs:
            command += " image-file %s" % kwargs['image_file']
        if 'image_size' in kwargs:
            command += " image-size %s" % kwargs['image_size']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def disk_library_imports_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'disk-library-imports-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'importsname' in kwargs:
            command += " importsname %s" % kwargs['importsname']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def disk_library_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'disk-library-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'sharing' in kwargs:
            for item in [u'none', u'sftp', u'nfs']:
                if item == kwargs['sharing']:
                    command += " sharing %s" % item
                    break

        return self.send_command(command)


    def disk_library_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'disk-library-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'data_set' in kwargs:
            command += " data-set %s" % kwargs['data_set']
        if 'sharing' in kwargs:
            for item in [u'none', u'sftp', u'nfs']:
                if item == kwargs['sharing']:
                    command += " sharing %s" % item
                    break
        if 'import_share' in kwargs:
            command += " import-share %s" % kwargs['import_share']
        if 'import_share_path' in kwargs:
            command += " import-share-path %s" % kwargs['import_share_path']
        if 'export_share' in kwargs:
            command += " export-share %s" % kwargs['export_share']
        if 'export_share_path' in kwargs:
            command += " export-share-path %s" % kwargs['export_share_path']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def dns_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'dedicated_vnet_service' in kwargs:
            if kwargs['dedicated_vnet_service']:
                command += " dedicated-vnet-service"
            else:
                command += " shared-vnet-service"
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"

        return self.send_command(command)


    def dns_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def dns_domain_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-domain-add'
        if 'dns_name' in kwargs:
            command += " dns-name %s" % kwargs['dns_name']
        if 'domain' in kwargs:
            command += " domain %s" % kwargs['domain']
        if 'type' in kwargs:
            for item in [u'master', u'slave']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'dns_ip' in kwargs:
            command += " dns-ip %s" % kwargs['dns_ip']
        if 'reverse_lookup_network' in kwargs:
            command += " reverse-lookup-network %s" % kwargs['reverse_lookup_network']
        if 'reverse_lookup_netmask' in kwargs:
            command += " reverse-lookup-netmask %s" % kwargs['reverse_lookup_netmask']
        if 'forwarding' in kwargs:
            for item in [u'none', u'first', u'only']:
                if item == kwargs['forwarding']:
                    command += " forwarding %s" % item
                    break
        if 'forwarder' in kwargs:
            command += " forwarder %s" % kwargs['forwarder']

        return self.send_command(command)


    def dns_domain_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-domain-modify'
        if 'dns_name' in kwargs:
            command += " dns-name %s" % kwargs['dns_name']
        if 'domain' in kwargs:
            command += " domain %s" % kwargs['domain']
        if 'type' in kwargs:
            for item in [u'master', u'slave']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'dns_ip' in kwargs:
            command += " dns-ip %s" % kwargs['dns_ip']
        if 'reverse_lookup_network' in kwargs:
            command += " reverse-lookup-network %s" % kwargs['reverse_lookup_network']
        if 'reverse_lookup_netmask' in kwargs:
            command += " reverse-lookup-netmask %s" % kwargs['reverse_lookup_netmask']
        if 'forwarding' in kwargs:
            for item in [u'none', u'first', u'only']:
                if item == kwargs['forwarding']:
                    command += " forwarding %s" % item
                    break
        if 'forwarder' in kwargs:
            command += " forwarder %s" % kwargs['forwarder']

        return self.send_command(command)


    def dns_domain_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-domain-remove'
        if 'dns_name' in kwargs:
            command += " dns-name %s" % kwargs['dns_name']
        if 'domain' in kwargs:
            command += " domain %s" % kwargs['domain']

        return self.send_command(command)


    def dns_domain_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-domain-show'
        if 'dns_name' in kwargs:
            command += " dns-name %s" % kwargs['dns_name']
        if 'domain' in kwargs:
            command += " domain %s" % kwargs['domain']
        if 'type' in kwargs:
            for item in [u'master', u'slave']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'dns_ip' in kwargs:
            command += " dns-ip %s" % kwargs['dns_ip']
        if 'reverse_lookup_network' in kwargs:
            command += " reverse-lookup-network %s" % kwargs['reverse_lookup_network']
        if 'reverse_lookup_netmask' in kwargs:
            command += " reverse-lookup-netmask %s" % kwargs['reverse_lookup_netmask']
        if 'forwarding' in kwargs:
            for item in [u'none', u'first', u'only']:
                if item == kwargs['forwarding']:
                    command += " forwarding %s" % item
                    break
        if 'forwarder' in kwargs:
            command += " forwarder %s" % kwargs['forwarder']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def dns_interface_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-interface-add'
        if 'dns_name' in kwargs:
            command += " dns-name %s" % kwargs['dns_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def dns_interface_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-interface-modify'
        if 'dns_name' in kwargs:
            command += " dns-name %s" % kwargs['dns_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def dns_interface_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-interface-remove'
        if 'dns_name' in kwargs:
            command += " dns-name %s" % kwargs['dns_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']

        return self.send_command(command)


    def dns_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-interface-show'
        if 'dns_name' in kwargs:
            command += " dns-name %s" % kwargs['dns_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def dns_migrate(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-migrate'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def dns_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'gateway' in kwargs:
            command += " gateway %s" % kwargs['gateway']

        return self.send_command(command)


    def dns_record_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-record-add'
        if 'dns_name' in kwargs:
            command += " dns-name %s" % kwargs['dns_name']
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']

        return self.send_command(command)


    def dns_record_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-record-remove'
        if 'dns_name' in kwargs:
            command += " dns-name %s" % kwargs['dns_name']
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']

        return self.send_command(command)


    def dns_record_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-record-show'
        if 'dns_name' in kwargs:
            command += " dns-name %s" % kwargs['dns_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def dns_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dns-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def dscp_map_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dscp-map-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def dscp_map_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dscp-map-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def dscp_map_pri_map_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dscp-map-pri-map-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'dsmap' in kwargs:
            command += " dsmap %s" % kwargs['dsmap']

        return self.send_command(command)


    def dscp_map_pri_map_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dscp-map-pri-map-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'dsmap' in kwargs:
            command += " dsmap %s" % kwargs['dsmap']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def dscp_map_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'dscp-map-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def exit(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'exit'

        return self.send_command(command)


    def fabric_comm_vrouter_bgp_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-comm-vrouter-bgp-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'bgp_redistribute' in kwargs:
            for item in [u'static', u'connected', u'rip', u'ospf']:
                if item == kwargs['bgp_redistribute']:
                    command += " bgp-redistribute %s" % item
                    break
        if 'router_id' in kwargs:
            command += " router-id %s" % kwargs['router_id']
        if 'hw_vrrp_id' in kwargs:
            command += " hw-vrrp-id %s" % kwargs['hw_vrrp_id']
        if 'bgp_nic_ip' in kwargs:
            command += " bgp-nic-ip %s" % kwargs['bgp_nic_ip']
        if 'bgp_nic_netmask' in kwargs:
            command += " bgp-nic-netmask %s" % kwargs['bgp_nic_netmask']
        if 'bgp_nic_vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['bgp_nic_vlan_type']:
                    command += " bgp-nic-vlan-type %s" % item
                    break
        if 'bgp_nic_if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['bgp_nic_if_nat_realm']:
                    command += " bgp-nic-if-nat-realm %s" % item
                    break
        if 'in_band_nic_ip' in kwargs:
            command += " in-band-nic-ip %s" % kwargs['in_band_nic_ip']
        if 'in_band_nic_netmask' in kwargs:
            command += " in-band-nic-netmask %s" % kwargs['in_band_nic_netmask']
        if 'in_band_nic_if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['in_band_nic_if_nat_realm']:
                    command += " in-band-nic-if-nat-realm %s" % item
                    break
        if 'neighbor' in kwargs:
            command += " neighbor %s" % kwargs['neighbor']
        if 'next_hop_self' in kwargs:
            if kwargs['next_hop_self']:
                command += " next-hop-self"
            else:
                command += " no-next-hop-self"
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']
        if 'override_capability' in kwargs:
            if kwargs['override_capability']:
                command += " override-capability"
            else:
                command += " no-override-capability"
        if 'soft_reconfig_inbound' in kwargs:
            if kwargs['soft_reconfig_inbound']:
                command += " soft-reconfig-inbound"
            else:
                command += " no-soft-reconfig-inbound"
        if 'max_prefix' in kwargs:
            command += " max-prefix %s" % kwargs['max_prefix']
        if 'max_prefix_warn_only' in kwargs:
            if kwargs['max_prefix_warn_only']:
                command += " max-prefix-warn-only"
            else:
                command += " no-max-prefix-warn-only"
        if 'bfd' in kwargs:
            if kwargs['bfd']:
                command += " bfd"
            else:
                command += " no-bfd"
        if 'bfd_multihop' in kwargs:
            if kwargs['bfd_multihop']:
                command += " bfd-multihop"
            else:
                command += " no-bfd-multihop"
        if 'weight' in kwargs:
            command += " weight %s" % kwargs['weight']
        if 'default_originate' in kwargs:
            if kwargs['default_originate']:
                command += " default-originate"
            else:
                command += " no-default-originate"
        if 'allowas_in' in kwargs:
            if kwargs['allowas_in']:
                command += " allowas-in"
            else:
                command += " no-allowas-in"
        if 'fabric_network' in kwargs:
            command += " fabric-network %s" % kwargs['fabric_network']
        if 'fabric_netmask' in kwargs:
            command += " fabric-netmask %s" % kwargs['fabric_netmask']

        return self.send_command(command)


    def fabric_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']
        if 'fabric_network' in kwargs:
            for item in [u'in-band', u'mgmt']:
                if item == kwargs['fabric_network']:
                    command += " fabric-network %s" % item
                    break
        if 'control_network' in kwargs:
            for item in [u'in-band', u'mgmt']:
                if item == kwargs['control_network']:
                    command += " control-network %s" % item
                    break
        if 'delete_conflicts' in kwargs:
            if kwargs['delete_conflicts']:
                command += " delete-conflicts"
            else:
                command += " abort-on-conflict"
        if 'fabric_advertisement_network' in kwargs:
            for item in [u'inband-mgmt', u'inband-only']:
                if item == kwargs['fabric_advertisement_network']:
                    command += " fabric-advertisement-network %s" % item
                    break

        return self.send_command(command)


    def fabric_in_band_network_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-in-band-network-create'
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']

        return self.send_command(command)


    def fabric_in_band_network_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-in-band-network-delete'
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']

        return self.send_command(command)


    def fabric_in_band_network_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-in-band-network-show'
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def fabric_info(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-info'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def fabric_join(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-join'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']
        if 'delete_conflicts' in kwargs:
            if kwargs['delete_conflicts']:
                command += " delete-conflicts"
            else:
                command += " abort-on-conflict"
        if 'fabric_join' in kwargs:
            command += " fabric-join"
        if 'switch_ip' in kwargs:
            command += " switch-ip %s" % kwargs['switch_ip']
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']
        if 'delete_conflicts' in kwargs:
            if kwargs['delete_conflicts']:
                command += " delete-conflicts"
            else:
                command += " abort-on-conflict"
        if 'fabric_join' in kwargs:
            command += " fabric-join"
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']
        if 'delete_conflicts' in kwargs:
            if kwargs['delete_conflicts']:
                command += " delete-conflicts"
            else:
                command += " abort-on-conflict"

        return self.send_command(command)


    def fabric_local_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-local-modify'
        if 'fabric_network' in kwargs:
            for item in [u'in-band', u'mgmt']:
                if item == kwargs['fabric_network']:
                    command += " fabric-network %s" % item
                    break
        if 'control_network' in kwargs:
            for item in [u'in-band', u'mgmt']:
                if item == kwargs['control_network']:
                    command += " control-network %s" % item
                    break
        if 'fabric_advertisement_network' in kwargs:
            for item in [u'inband-mgmt', u'inband-only']:
                if item == kwargs['fabric_advertisement_network']:
                    command += " fabric-advertisement-network %s" % item
                    break

        return self.send_command(command)


    def fabric_node_evict(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-node-evict'
        if 'fabric_node_evict' in kwargs:
            command += " fabric-node-evict"
        if 'id' in kwargs:
            command += " id %s" % kwargs['id']

        return self.send_command(command)


    def fabric_node_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-node-show'
        if 'id' in kwargs:
            command += " id %s" % kwargs['id']
        if 'serial' in kwargs:
            command += " serial %s" % kwargs['serial']
        if 'fab_name' in kwargs:
            command += " fab-name %s" % kwargs['fab_name']
        if 'local_mac' in kwargs:
            command += " local-mac %s" % kwargs['local_mac']
        if 'fabric_network' in kwargs:
            for item in [u'in-band', u'mgmt']:
                if item == kwargs['fabric_network']:
                    command += " fabric-network %s" % item
                    break
        if 'control_network' in kwargs:
            for item in [u'in-band', u'mgmt']:
                if item == kwargs['control_network']:
                    command += " control-network %s" % item
                    break
        if 'mgmt_ip' in kwargs:
            command += " mgmt-ip %s" % kwargs['mgmt_ip']
        if 'mgmt_netmask' in kwargs:
            command += " mgmt-netmask %s" % kwargs['mgmt_netmask']
        if 'mgmt_mac' in kwargs:
            command += " mgmt-mac %s" % kwargs['mgmt_mac']
        if 'mgmt_secondary_macs' in kwargs:
            command += " mgmt-secondary-macs %s" % kwargs['mgmt_secondary_macs']
        if 'mgmt_if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['mgmt_if_nat_realm']:
                    command += " mgmt-if-nat-realm %s" % item
                    break
        if 'in_band_ip' in kwargs:
            command += " in-band-ip %s" % kwargs['in_band_ip']
        if 'in_band_netmask' in kwargs:
            command += " in-band-netmask %s" % kwargs['in_band_netmask']
        if 'in_band_mac' in kwargs:
            command += " in-band-mac %s" % kwargs['in_band_mac']
        if 'in_band_vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['in_band_vlan_type']:
                    command += " in-band-vlan-type %s" % item
                    break
        if 'in_band_secondary_macs' in kwargs:
            command += " in-band-secondary-macs %s" % kwargs['in_band_secondary_macs']
        if 'in_band_if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['in_band_if_nat_realm']:
                    command += " in-band-if-nat-realm %s" % item
                    break
        if 'fab_tid' in kwargs:
            command += " fab-tid %s" % kwargs['fab_tid']
        if 'cluster_tid' in kwargs:
            command += " cluster-tid %s" % kwargs['cluster_tid']
        if 'out_port' in kwargs:
            command += " out-port %s" % kwargs['out_port']
        if 'version' in kwargs:
            command += " version %s" % kwargs['version']
        if 'fresh_install' in kwargs:
            command += " fresh-install"
        if 'firmware_upgrade' in kwargs:
            for item in [u'not-required', u'required', u'reboot-required']:
                if item == kwargs['firmware_upgrade']:
                    command += " firmware-upgrade %s" % item
                    break
        if 'device_state' in kwargs:
            for item in [u'ok', u'error', u'simulator']:
                if item == kwargs['device_state']:
                    command += " device-state %s" % item
                    break
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def fabric_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'switch_ip' in kwargs:
            command += " switch-ip %s" % kwargs['switch_ip']
        if 'fabric_network' in kwargs:
            for item in [u'in-band', u'mgmt']:
                if item == kwargs['fabric_network']:
                    command += " fabric-network %s" % item
                    break
        if 'control_network' in kwargs:
            for item in [u'in-band', u'mgmt']:
                if item == kwargs['control_network']:
                    command += " control-network %s" % item
                    break
        if 'tid' in kwargs:
            command += " tid %s" % kwargs['tid']
        if 'fabric_advertisement_network' in kwargs:
            for item in [u'inband-mgmt', u'inband-only']:
                if item == kwargs['fabric_advertisement_network']:
                    command += " fabric-advertisement-network %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def fabric_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-stats-show'
        if 'id' in kwargs:
            command += " id %s" % kwargs['id']
        if 'servers' in kwargs:
            command += " servers %s" % kwargs['servers']
        if 'storage' in kwargs:
            command += " storage %s" % kwargs['storage']
        if 'vlan' in kwargs:
            command += " vlan %s" % kwargs['vlan']
        if 'vxlan' in kwargs:
            command += " vxlan %s" % kwargs['vxlan']
        if 'tcp_syn' in kwargs:
            command += " tcp-syn %s" % kwargs['tcp_syn']
        if 'tcp_est' in kwargs:
            command += " tcp-est %s" % kwargs['tcp_est']
        if 'tcp_completed' in kwargs:
            command += " tcp-completed %s" % kwargs['tcp_completed']
        if 'tcp_bytes' in kwargs:
            command += " tcp-bytes %s" % kwargs['tcp_bytes']
        if 'udp_bytes' in kwargs:
            command += " udp-bytes %s" % kwargs['udp_bytes']
        if 'arp' in kwargs:
            command += " arp %s" % kwargs['arp']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def fabric_unjoin(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-unjoin'
        if 'delete_conflicts' in kwargs:
            if kwargs['delete_conflicts']:
                command += " delete-conflicts"
            else:
                command += " abort-on-conflict"

        return self.send_command(command)


    def fabric_upgrade_abort(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-upgrade-abort'
        if 'force' in kwargs:
            if kwargs['force']:
                command += " force"
            else:
                command += " no-force"

        return self.send_command(command)


    def fabric_upgrade_continue(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-upgrade-continue'

        return self.send_command(command)


    def fabric_upgrade_finish(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-upgrade-finish'

        return self.send_command(command)


    def fabric_upgrade_prepare_cancel(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-upgrade-prepare-cancel'

        return self.send_command(command)


    def fabric_upgrade_prepare_resume(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-upgrade-prepare-resume'

        return self.send_command(command)


    def fabric_upgrade_prepare_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-upgrade-prepare-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def fabric_upgrade_start(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-upgrade-start'
        if 'auto_finish' in kwargs:
            if kwargs['auto_finish']:
                command += " auto-finish"
            else:
                command += " no-auto-finish"
        if 'rolling' in kwargs:
            if kwargs['rolling']:
                command += " rolling"
            else:
                command += " no-rolling"
        if 'abort_on_failure' in kwargs:
            if kwargs['abort_on_failure']:
                command += " abort-on-failure"
            else:
                command += " no-abort-on-failure"
        if 'manual_reboot' in kwargs:
            if kwargs['manual_reboot']:
                command += " manual-reboot"
            else:
                command += " no-manual-reboot"
        if 'prepare' in kwargs:
            if kwargs['prepare']:
                command += " prepare"
            else:
                command += " no-prepare"
        if 'reboot_parallel' in kwargs:
            if kwargs['reboot_parallel']:
                command += " reboot-parallel"
            else:
                command += " reboot-single"

        return self.send_command(command)


    def fabric_upgrade_status_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-upgrade-status-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def flow_table_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'flow-table-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'id' in kwargs:
            command += " id %s" % kwargs['id']
        if 'hw_id' in kwargs:
            command += " hw-id %s" % kwargs['hw_id']
        if 'flow_name' in kwargs:
            command += " flow-name %s" % kwargs['flow_name']
        if 'flow_hw_id' in kwargs:
            command += " flow-hw-id %s" % kwargs['flow_hw_id']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def help(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'help'

        return self.send_command(command)


    def hog_violator_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hog-violator-show'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'cpu_class' in kwargs:
            command += " cpu-class %s" % kwargs['cpu_class']
        if 'hog_cpu_class' in kwargs:
            command += " hog-cpu-class %s" % kwargs['hog_cpu_class']
        if 'vflow' in kwargs:
            command += " vflow %s" % kwargs['vflow']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def hog_violator_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hog-violator-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def id_led_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'id-led-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"

        return self.send_command(command)


    def id_led_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'id-led-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def igmp_querier_ip_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'igmp-querier-ip-modify'
        if 'querier_ip' in kwargs:
            command += " querier-ip %s" % kwargs['querier_ip']
        if 'vlans_on_querier_ip' in kwargs:
            command += " vlans-on-querier-ip %s" % kwargs['vlans_on_querier_ip']

        return self.send_command(command)


    def igmp_querier_ip_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'igmp-querier-ip-show'
        if 'querier_ip' in kwargs:
            command += " querier-ip %s" % kwargs['querier_ip']
        if 'vlans_on_querier_ip' in kwargs:
            command += " vlans-on-querier-ip %s" % kwargs['vlans_on_querier_ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def igmp_router_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'igmp-router-show'
        if 'node_ip' in kwargs:
            command += " node-ip %s" % kwargs['node_ip']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def igmp_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'igmp-show'
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'node_ip' in kwargs:
            command += " node-ip %s" % kwargs['node_ip']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'source' in kwargs:
            command += " source %s" % kwargs['source']
        if 'node_type' in kwargs:
            for item in [u'host', u'router', u'switch']:
                if item == kwargs['node_type']:
                    command += " node-type %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def igmp_snooping_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'igmp-snooping-modify'
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'enable_vlans' in kwargs:
            command += " enable-vlans %s" % kwargs['enable_vlans']
        if 'snoop_linklocal_vlans' in kwargs:
            command += " snoop-linklocal-vlans %s" % kwargs['snoop_linklocal_vlans']
        if 'no_snoop_linklocal_vlans' in kwargs:
            command += " no-snoop-linklocal-vlans %s" % kwargs['no_snoop_linklocal_vlans']

        return self.send_command(command)


    def igmp_snooping_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'igmp-snooping-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def igmp_static_group_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'igmp-static-group-create'
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']

        return self.send_command(command)


    def igmp_static_group_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'igmp-static-group-delete'
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']

        return self.send_command(command)


    def igmp_static_group_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'igmp-static-group-show'
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def igmp_static_source_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'igmp-static-source-create'
        if 'source_ip' in kwargs:
            command += " source-ip %s" % kwargs['source_ip']
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']

        return self.send_command(command)


    def igmp_static_source_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'igmp-static-source-delete'
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'source_ip' in kwargs:
            command += " source-ip %s" % kwargs['source_ip']

        return self.send_command(command)


    def igmp_static_source_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'igmp-static-source-show'
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'source_ip' in kwargs:
            command += " source-ip %s" % kwargs['source_ip']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def igmp_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'igmp-stats-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def igmp_switches_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'igmp-switches-show'
        if 'node_ip' in kwargs:
            command += " node-ip %s" % kwargs['node_ip']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def interface_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'interface-stats-show'
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def ip_pool_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ip-pool-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'start_ip' in kwargs:
            command += " start-ip %s" % kwargs['start_ip']
        if 'end_ip' in kwargs:
            command += " end-ip %s" % kwargs['end_ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'ip_pool_create' in kwargs:
            command += " ip-pool-create"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']

        return self.send_command(command)


    def ip_pool_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ip-pool-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def ip_pool_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ip-pool-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'start_ip' in kwargs:
            command += " start-ip %s" % kwargs['start_ip']
        if 'end_ip' in kwargs:
            command += " end-ip %s" % kwargs['end_ip']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']

        return self.send_command(command)


    def ip_pool_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ip-pool-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'start_ip' in kwargs:
            command += " start-ip %s" % kwargs['start_ip']
        if 'end_ip' in kwargs:
            command += " end-ip %s" % kwargs['end_ip']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def ipfix_collector_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ipfix-collector-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'transport_protocol' in kwargs:
            for item in [u'tcp', u'udp']:
                if item == kwargs['transport_protocol']:
                    command += " transport-protocol %s" % item
                    break

        return self.send_command(command)


    def ipfix_collector_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ipfix-collector-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def ipfix_collector_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ipfix-collector-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'transport_protocol' in kwargs:
            for item in [u'tcp', u'udp']:
                if item == kwargs['transport_protocol']:
                    command += " transport-protocol %s" % item
                    break

        return self.send_command(command)


    def ipfix_collector_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ipfix-collector-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'transport_protocol' in kwargs:
            for item in [u'tcp', u'udp']:
                if item == kwargs['transport_protocol']:
                    command += " transport-protocol %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def ipfix_service_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ipfix-service-modify'
        if 'enable_service' in kwargs:
            if kwargs['enable_service']:
                command += " enable-service"
            else:
                command += " disable-service"
        if 'obs_domain' in kwargs:
            command += " obs-domain %s" % kwargs['obs_domain']

        return self.send_command(command)


    def ipfix_service_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ipfix-service-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def iso_library_image_export(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'iso-library-image-export'
        if 'iso_library_name' in kwargs:
            command += " iso-library-name %s" % kwargs['iso_library_name']
        if 'image_label' in kwargs:
            command += " image-label %s" % kwargs['image_label']
        if 'image_library' in kwargs:
            command += " image-library %s" % kwargs['image_library']
        if 'image_file' in kwargs:
            command += " image-file %s" % kwargs['image_file']

        return self.send_command(command)


    def iso_library_image_import(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'iso-library-image-import'
        if 'iso_library_name' in kwargs:
            command += " iso-library-name %s" % kwargs['iso_library_name']
        if 'image_label' in kwargs:
            command += " image-label %s" % kwargs['image_label']
        if 'image_file' in kwargs:
            command += " image-file %s" % kwargs['image_file']
        if 'image_library' in kwargs:
            command += " image-library %s" % kwargs['image_library']

        return self.send_command(command)


    def iso_library_image_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'iso-library-image-remove'
        if 'iso_library_name' in kwargs:
            command += " iso-library-name %s" % kwargs['iso_library_name']
        if 'image_label' in kwargs:
            command += " image-label %s" % kwargs['image_label']

        return self.send_command(command)


    def iso_library_image_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'iso-library-image-show'
        if 'iso_library_name' in kwargs:
            command += " iso-library-name %s" % kwargs['iso_library_name']
        if 'image_label' in kwargs:
            command += " image-label %s" % kwargs['image_label']
        if 'image_library' in kwargs:
            command += " image-library %s" % kwargs['image_library']
        if 'image_file' in kwargs:
            command += " image-file %s" % kwargs['image_file']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def iso_library_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'iso-library-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'sharing' in kwargs:
            for item in [u'none', u'sftp', u'nfs']:
                if item == kwargs['sharing']:
                    command += " sharing %s" % item
                    break

        return self.send_command(command)


    def iso_library_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'iso-library-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'data_set' in kwargs:
            command += " data-set %s" % kwargs['data_set']
        if 'sharing' in kwargs:
            for item in [u'none', u'sftp', u'nfs']:
                if item == kwargs['sharing']:
                    command += " sharing %s" % item
                    break
        if 'import_share' in kwargs:
            command += " import-share %s" % kwargs['import_share']
        if 'import_share_path' in kwargs:
            command += " import-share-path %s" % kwargs['import_share_path']
        if 'export_share' in kwargs:
            command += " export-share %s" % kwargs['export_share']
        if 'export_share_path' in kwargs:
            command += " export-share-path %s" % kwargs['export_share_path']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def l2_check_fix(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l2-check-fix'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'sw_port' in kwargs:
            command += " sw-port %s" % kwargs['sw_port']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'hw_port' in kwargs:
            command += " hw-port %s" % kwargs['hw_port']
        if 'tunnel_name' in kwargs:
            command += " tunnel-name %s" % kwargs['tunnel_name']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'delete_port_mac' in kwargs:
            if kwargs['delete_port_mac']:
                command += " delete-port-mac"
            else:
                command += " mark-port-mac"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def l2_check_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l2-check-show'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'sw_port' in kwargs:
            command += " sw-port %s" % kwargs['sw_port']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'hw_port' in kwargs:
            command += " hw-port %s" % kwargs['hw_port']
        if 'tunnel_name' in kwargs:
            command += " tunnel-name %s" % kwargs['tunnel_name']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'delete_port_mac' in kwargs:
            if kwargs['delete_port_mac']:
                command += " delete-port-mac"
            else:
                command += " mark-port-mac"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def l2_history_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l2-history-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'mac_move' in kwargs:
            if kwargs['mac_move']:
                command += " mac-move"
            else:
                command += " cluster-status"
        if 'vxlan_routing' in kwargs:
            command += " vxlan-routing"
        if 'user_delete' in kwargs:
            if kwargs['user_delete']:
                command += " user-delete"
            else:
                command += " done"
        if 'user_delete' in kwargs:
            if kwargs['user_delete']:
                command += " user-delete"
            else:
                command += " done"
        if 'rt_if' in kwargs:
            if kwargs['rt_if']:
                command += " rt-if"
            else:
                command += " hw-flags"
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'num_ips' in kwargs:
            command += " num-ips %s" % kwargs['num_ips']
        if 'config_intf' in kwargs:
            command += " config-intf %s" % kwargs['config_intf']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'svc_name' in kwargs:
            command += " svc-name %s" % kwargs['svc_name']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'entity' in kwargs:
            command += " entity %s" % kwargs['entity']
        if 'power' in kwargs:
            for item in [u'none', u'powered-off', u'powered-on', u'standby', u'suspended', u'unknown']:
                if item == kwargs['power']:
                    command += " power %s" % item
                    break
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'os' in kwargs:
            command += " os %s" % kwargs['os']
        if 'portgroup' in kwargs:
            command += " portgroup %s" % kwargs['portgroup']
        if 'pg_vlans' in kwargs:
            command += " pg-vlans %s" % kwargs['pg_vlans']
        if 'vswitch' in kwargs:
            command += " vswitch %s" % kwargs['vswitch']
        if 'vs_type' in kwargs:
            for item in [u'none', u'host-vs', u'distributed-vs', u'unknown']:
                if item == kwargs['vs_type']:
                    command += " vs-type %s" % item
                    break
        if 'config' in kwargs:
            for item in [u'none', u'owner', u'ip', u'port', u'hostname', u'entity', u'cpus', u'os']:
                if item == kwargs['config']:
                    command += " config %s" % item
                    break
        if 'rem_intf' in kwargs:
            command += " rem-intf %s" % kwargs['rem_intf']
        if 'rem_ports' in kwargs:
            command += " rem-ports %s" % kwargs['rem_ports']
        if 'peer_intf' in kwargs:
            command += " peer-intf %s" % kwargs['peer_intf']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_cluster_link' in kwargs:
            if kwargs['peer_port_not_cluster_link']:
                command += " peer-port-not-cluster-link"
            else:
                command += " sw-active"
        if 'vle_wait' in kwargs:
            if kwargs['vle_wait']:
                command += " vle-wait"
            else:
                command += " phy-down"
        if 'tunnel' in kwargs:
            command += " tunnel %s" % kwargs['tunnel']
        if 'hit' in kwargs:
            command += " hit %s" % kwargs['hit']
        if 'migrate' in kwargs:
            command += " migrate %s" % kwargs['migrate']
        if 'drops' in kwargs:
            command += " drops %s" % kwargs['drops']
        if 'hw_index' in kwargs:
            command += " hw-index %s" % kwargs['hw_index']
        if 'rt_if' in kwargs:
            command += " rt-if %s" % kwargs['rt_if']
        if 'hw_flags' in kwargs:
            for item in [u'invalid-vlan', u'invalid-port']:
                if item == kwargs['hw_flags']:
                    command += " hw-flags %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def l2_setting_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l2-setting-modify'
        if 'software_aging' in kwargs:
            if kwargs['software_aging']:
                command += " software-aging"
            else:
                command += " no-software-aging"

        return self.send_command(command)


    def l2_setting_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l2-setting-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def l2_static_multicast_group_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l2-static-multicast-group-create'
        if 'group_mac' in kwargs:
            command += " group-mac %s" % kwargs['group_mac']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']

        return self.send_command(command)


    def l2_static_multicast_group_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l2-static-multicast-group-delete'
        if 'group_mac' in kwargs:
            command += " group-mac %s" % kwargs['group_mac']

        return self.send_command(command)


    def l2_static_multicast_group_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l2-static-multicast-group-show'
        if 'group_mac' in kwargs:
            command += " group-mac %s" % kwargs['group_mac']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def l2_table_flush(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l2-table-flush'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']

        return self.send_command(command)


    def l2_table_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l2-table-show'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'num_ips' in kwargs:
            command += " num-ips %s" % kwargs['num_ips']
        if 'config_intf' in kwargs:
            command += " config-intf %s" % kwargs['config_intf']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'svc_name' in kwargs:
            command += " svc-name %s" % kwargs['svc_name']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'entity' in kwargs:
            command += " entity %s" % kwargs['entity']
        if 'power' in kwargs:
            for item in [u'none', u'powered-off', u'powered-on', u'standby', u'suspended', u'unknown']:
                if item == kwargs['power']:
                    command += " power %s" % item
                    break
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'os' in kwargs:
            command += " os %s" % kwargs['os']
        if 'portgroup' in kwargs:
            command += " portgroup %s" % kwargs['portgroup']
        if 'pg_vlans' in kwargs:
            command += " pg-vlans %s" % kwargs['pg_vlans']
        if 'vswitch' in kwargs:
            command += " vswitch %s" % kwargs['vswitch']
        if 'vs_type' in kwargs:
            for item in [u'none', u'host-vs', u'distributed-vs', u'unknown']:
                if item == kwargs['vs_type']:
                    command += " vs-type %s" % item
                    break
        if 'config' in kwargs:
            for item in [u'none', u'owner', u'ip', u'port', u'hostname', u'entity', u'cpus', u'os']:
                if item == kwargs['config']:
                    command += " config %s" % item
                    break
        if 'rem_intf' in kwargs:
            command += " rem-intf %s" % kwargs['rem_intf']
        if 'rem_ports' in kwargs:
            command += " rem-ports %s" % kwargs['rem_ports']
        if 'peer_intf' in kwargs:
            command += " peer-intf %s" % kwargs['peer_intf']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_cluster_link' in kwargs:
            if kwargs['peer_port_not_cluster_link']:
                command += " peer-port-not-cluster-link"
            else:
                command += " sw-active"
        if 'vle_wait' in kwargs:
            if kwargs['vle_wait']:
                command += " vle-wait"
            else:
                command += " phy-down"
        if 'tunnel' in kwargs:
            command += " tunnel %s" % kwargs['tunnel']
        if 'hit' in kwargs:
            command += " hit %s" % kwargs['hit']
        if 'migrate' in kwargs:
            command += " migrate %s" % kwargs['migrate']
        if 'drops' in kwargs:
            command += " drops %s" % kwargs['drops']
        if 'hw_index' in kwargs:
            command += " hw-index %s" % kwargs['hw_index']
        if 'rt_if' in kwargs:
            command += " rt-if %s" % kwargs['rt_if']
        if 'hw_flags' in kwargs:
            for item in [u'invalid-vlan', u'invalid-port']:
                if item == kwargs['hw_flags']:
                    command += " hw-flags %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def l3_check_fix(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l3-check-fix'
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def l3_check_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l3-check-show'
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def l3_history_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l3-history-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'mac_move' in kwargs:
            if kwargs['mac_move']:
                command += " mac-move"
            else:
                command += " cluster-status"
        if 'vxlan_routing' in kwargs:
            command += " vxlan-routing"
        if 'user_delete' in kwargs:
            if kwargs['user_delete']:
                command += " user-delete"
            else:
                command += " done"
        if 'user_delete' in kwargs:
            if kwargs['user_delete']:
                command += " user-delete"
            else:
                command += " done"
        if 'rt_if' in kwargs:
            if kwargs['rt_if']:
                command += " rt-if"
            else:
                command += " hw-flags"
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'num_ips' in kwargs:
            command += " num-ips %s" % kwargs['num_ips']
        if 'config_intf' in kwargs:
            command += " config-intf %s" % kwargs['config_intf']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'svc_name' in kwargs:
            command += " svc-name %s" % kwargs['svc_name']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'entity' in kwargs:
            command += " entity %s" % kwargs['entity']
        if 'power' in kwargs:
            for item in [u'none', u'powered-off', u'powered-on', u'standby', u'suspended', u'unknown']:
                if item == kwargs['power']:
                    command += " power %s" % item
                    break
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'os' in kwargs:
            command += " os %s" % kwargs['os']
        if 'portgroup' in kwargs:
            command += " portgroup %s" % kwargs['portgroup']
        if 'pg_vlans' in kwargs:
            command += " pg-vlans %s" % kwargs['pg_vlans']
        if 'vswitch' in kwargs:
            command += " vswitch %s" % kwargs['vswitch']
        if 'vs_type' in kwargs:
            for item in [u'none', u'host-vs', u'distributed-vs', u'unknown']:
                if item == kwargs['vs_type']:
                    command += " vs-type %s" % item
                    break
        if 'config' in kwargs:
            for item in [u'none', u'owner', u'ip', u'port', u'hostname', u'entity', u'cpus', u'os']:
                if item == kwargs['config']:
                    command += " config %s" % item
                    break
        if 'rem_intf' in kwargs:
            command += " rem-intf %s" % kwargs['rem_intf']
        if 'rem_ports' in kwargs:
            command += " rem-ports %s" % kwargs['rem_ports']
        if 'peer_intf' in kwargs:
            command += " peer-intf %s" % kwargs['peer_intf']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_cluster_link' in kwargs:
            if kwargs['peer_port_not_cluster_link']:
                command += " peer-port-not-cluster-link"
            else:
                command += " sw-active"
        if 'vle_wait' in kwargs:
            if kwargs['vle_wait']:
                command += " vle-wait"
            else:
                command += " phy-down"
        if 'tunnel' in kwargs:
            command += " tunnel %s" % kwargs['tunnel']
        if 'hit' in kwargs:
            command += " hit %s" % kwargs['hit']
        if 'migrate' in kwargs:
            command += " migrate %s" % kwargs['migrate']
        if 'drops' in kwargs:
            command += " drops %s" % kwargs['drops']
        if 'hw_index' in kwargs:
            command += " hw-index %s" % kwargs['hw_index']
        if 'rt_if' in kwargs:
            command += " rt-if %s" % kwargs['rt_if']
        if 'hw_flags' in kwargs:
            for item in [u'invalid-vlan', u'invalid-port']:
                if item == kwargs['hw_flags']:
                    command += " hw-flags %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def l3_setting_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l3-setting-modify'

        return self.send_command(command)


    def l3_setting_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l3-setting-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def l3_table_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l3-table-show'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'hw_intf' in kwargs:
            command += " hw-intf %s" % kwargs['hw_intf']
        if 'rt_if' in kwargs:
            command += " rt-if %s" % kwargs['rt_if']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'egress_id' in kwargs:
            command += " egress-id %s" % kwargs['egress_id']
        if 'hit' in kwargs:
            command += " hit %s" % kwargs['hit']
        if 'tunnel' in kwargs:
            command += " tunnel %s" % kwargs['tunnel']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def lacp_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'lacp-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"

        return self.send_command(command)


    def lacp_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'lacp-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def lldp_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'lldp-show'
        if 'local_port' in kwargs:
            command += " local-port %s" % kwargs['local_port']
        if 'chassis_id' in kwargs:
            command += " chassis-id %s" % kwargs['chassis_id']
        if 'port_id' in kwargs:
            command += " port-id %s" % kwargs['port_id']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def log_admin_audit_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'log-admin-audit-modify'
        if 'disable' in kwargs:
            command += " disable"
        if 'enable' in kwargs:
            command += " enable"

        return self.send_command(command)


    def log_admin_audit_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'log-admin-audit-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def log_alert_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'log-alert-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'code' in kwargs:
            command += " code %s" % kwargs['code']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def log_audit_exception_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'log-audit-exception-create'
        if 'cli' in kwargs:
            if kwargs['cli']:
                command += " cli"
            else:
                command += " shell"
        if 'pattern' in kwargs:
            command += " pattern %s" % kwargs['pattern']
        if 'any' in kwargs:
            if kwargs['any']:
                command += " any"
            else:
                command += " read-only"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break

        return self.send_command(command)


    def log_audit_exception_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'log-audit-exception-delete'
        if 'cli' in kwargs:
            if kwargs['cli']:
                command += " cli"
            else:
                command += " shell"
        if 'pattern' in kwargs:
            command += " pattern %s" % kwargs['pattern']
        if 'any' in kwargs:
            if kwargs['any']:
                command += " any"
            else:
                command += " read-only"

        return self.send_command(command)


    def log_audit_exception_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'log-audit-exception-show'
        if 'cli' in kwargs:
            if kwargs['cli']:
                command += " cli"
            else:
                command += " shell"
        if 'pattern' in kwargs:
            command += " pattern %s" % kwargs['pattern']
        if 'any' in kwargs:
            if kwargs['any']:
                command += " any"
            else:
                command += " read-only"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def log_audit_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'log-audit-show'
        if 'program' in kwargs:
            command += " program %s" % kwargs['program']
        if 'pid' in kwargs:
            command += " pid %s" % kwargs['pid']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'code' in kwargs:
            command += " code %s" % kwargs['code']
        if 'client_pid' in kwargs:
            command += " client-pid %s" % kwargs['client_pid']
        if 'client_addr' in kwargs:
            command += " client-addr %s" % kwargs['client_addr']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'starting_point' in kwargs:
            command += " starting-point %s" % kwargs['starting_point']
        if 'length' in kwargs:
            command += " length %s" % kwargs['length']
        if 'reverse' in kwargs:
            if kwargs['reverse']:
                command += " reverse"
            else:
                command += " no-reverse"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def log_event_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'log-event-settings-modify'
        if 'system' in kwargs:
            if kwargs['system']:
                command += " system"
            else:
                command += " no-system"
        if 'port' in kwargs:
            if kwargs['port']:
                command += " port"
            else:
                command += " no-port"
        if 'tcp' in kwargs:
            if kwargs['tcp']:
                command += " tcp"
            else:
                command += " no-tcp"
        if 'stp' in kwargs:
            if kwargs['stp']:
                command += " stp"
            else:
                command += " no-stp"
        if 'igmp' in kwargs:
            if kwargs['igmp']:
                command += " igmp"
            else:
                command += " no-igmp"
        if 'lldp' in kwargs:
            if kwargs['lldp']:
                command += " lldp"
            else:
                command += " no-lldp"
        if 'lacp' in kwargs:
            if kwargs['lacp']:
                command += " lacp"
            else:
                command += " no-lacp"
        if 'vdp' in kwargs:
            if kwargs['vdp']:
                command += " vdp"
            else:
                command += " no-vdp"
        if 'ecp' in kwargs:
            if kwargs['ecp']:
                command += " ecp"
            else:
                command += " no-ecp"
        if 'evb' in kwargs:
            if kwargs['evb']:
                command += " evb"
            else:
                command += " no-evb"
        if 'ptp' in kwargs:
            if kwargs['ptp']:
                command += " ptp"
            else:
                command += " no-ptp"
        if 'openflow' in kwargs:
            if kwargs['openflow']:
                command += " openflow"
            else:
                command += " no-openflow"
        if 'storage' in kwargs:
            if kwargs['storage']:
                command += " storage"
            else:
                command += " no-storage"
        if 'tacacs' in kwargs:
            if kwargs['tacacs']:
                command += " tacacs"
            else:
                command += " no-tacacs"
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " no-openstack"
        if 'mld' in kwargs:
            if kwargs['mld']:
                command += " mld"
            else:
                command += " no-mld"
        if 'mroute' in kwargs:
            if kwargs['mroute']:
                command += " mroute"
            else:
                command += " no-mroute"
        if 'vport' in kwargs:
            if kwargs['vport']:
                command += " vport"
            else:
                command += " no-vport"

        return self.send_command(command)


    def log_event_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'log-event-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def log_event_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'log-event-show'
        if 'program' in kwargs:
            command += " program %s" % kwargs['program']
        if 'pid' in kwargs:
            command += " pid %s" % kwargs['pid']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'code' in kwargs:
            command += " code %s" % kwargs['code']
        if 'storage' in kwargs:
            if kwargs['storage']:
                command += " storage"
            else:
                command += " tacacs"
        if 'client_pid' in kwargs:
            command += " client-pid %s" % kwargs['client_pid']
        if 'client_addr' in kwargs:
            command += " client-addr %s" % kwargs['client_addr']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'starting_point' in kwargs:
            command += " starting-point %s" % kwargs['starting_point']
        if 'length' in kwargs:
            command += " length %s" % kwargs['length']
        if 'reverse' in kwargs:
            if kwargs['reverse']:
                command += " reverse"
            else:
                command += " no-reverse"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def log_system_counters_reset(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'log-system-counters-reset'
        if 'reset_time' in kwargs:
            command += " reset-time %s" % kwargs['reset_time']

        return self.send_command(command)


    def log_system_counters_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'log-system-counters-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def log_system_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'log-system-show'
        if 'program' in kwargs:
            command += " program %s" % kwargs['program']
        if 'pid' in kwargs:
            command += " pid %s" % kwargs['pid']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'code' in kwargs:
            command += " code %s" % kwargs['code']
        if 'level' in kwargs:
            for item in [u'critical', u'error', u'warn', u'note']:
                if item == kwargs['level']:
                    command += " level %s" % item
                    break
        if 'client_pid' in kwargs:
            command += " client-pid %s" % kwargs['client_pid']
        if 'client_addr' in kwargs:
            command += " client-addr %s" % kwargs['client_addr']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'starting_point' in kwargs:
            command += " starting-point %s" % kwargs['starting_point']
        if 'length' in kwargs:
            command += " length %s" % kwargs['length']
        if 'reverse' in kwargs:
            if kwargs['reverse']:
                command += " reverse"
            else:
                command += " no-reverse"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"
        if 'log_system_show' in kwargs:
            command += " log-system-show"
        if 'since_last_reset' in kwargs:
            if kwargs['since_last_reset']:
                command += " since-last-reset"
            else:
                command += " no-since-last-reset"
        if 'program' in kwargs:
            command += " program %s" % kwargs['program']
        if 'pid' in kwargs:
            command += " pid %s" % kwargs['pid']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'code' in kwargs:
            command += " code %s" % kwargs['code']
        if 'level' in kwargs:
            for item in [u'critical', u'error', u'warn', u'note']:
                if item == kwargs['level']:
                    command += " level %s" % item
                    break
        if 'client_pid' in kwargs:
            command += " client-pid %s" % kwargs['client_pid']
        if 'client_addr' in kwargs:
            command += " client-addr %s" % kwargs['client_addr']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'starting_point' in kwargs:
            command += " starting-point %s" % kwargs['starting_point']
        if 'length' in kwargs:
            command += " length %s" % kwargs['length']
        if 'reverse' in kwargs:
            if kwargs['reverse']:
                command += " reverse"
            else:
                command += " no-reverse"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def mcast_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mcast-show'
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def mirror_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mirror-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'direction' in kwargs:
            for item in [u'ingress', u'egress', u'bidirection']:
                if item == kwargs['direction']:
                    command += " direction %s" % item
                    break
        if 'out_port' in kwargs:
            command += " out-port %s" % kwargs['out_port']
        if 'in_port' in kwargs:
            command += " in-port %s" % kwargs['in_port']
        if 'filtering' in kwargs:
            for item in [u'port', u'vflow-and-port', u'vflow-or-port']:
                if item == kwargs['filtering']:
                    command += " filtering %s" % item
                    break
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'other_egress_out' in kwargs:
            for item in [u'allow', u'prevent']:
                if item == kwargs['other_egress_out']:
                    command += " other-egress-out %s" % item
                    break
        if 'span_encap' in kwargs:
            for item in [u'none', u'over-ip', u'over-vlan']:
                if item == kwargs['span_encap']:
                    command += " span-encap %s" % item
                    break
        if 'span_local_ip' in kwargs:
            command += " span-local-ip %s" % kwargs['span_local_ip']
        if 'span_remote_ip' in kwargs:
            command += " span-remote-ip %s" % kwargs['span_remote_ip']
        if 'span_src_mac' in kwargs:
            command += " span-src-mac %s" % kwargs['span_src_mac']
        if 'span_dst_mac' in kwargs:
            command += " span-dst-mac %s" % kwargs['span_dst_mac']

        return self.send_command(command)


    def mirror_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mirror-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def mirror_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mirror-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'direction' in kwargs:
            for item in [u'ingress', u'egress', u'bidirection']:
                if item == kwargs['direction']:
                    command += " direction %s" % item
                    break
        if 'out_port' in kwargs:
            command += " out-port %s" % kwargs['out_port']
        if 'in_port' in kwargs:
            command += " in-port %s" % kwargs['in_port']
        if 'filtering' in kwargs:
            for item in [u'port', u'vflow-and-port', u'vflow-or-port']:
                if item == kwargs['filtering']:
                    command += " filtering %s" % item
                    break
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'other_egress_out' in kwargs:
            for item in [u'allow', u'prevent']:
                if item == kwargs['other_egress_out']:
                    command += " other-egress-out %s" % item
                    break
        if 'span_encap' in kwargs:
            for item in [u'none', u'over-ip', u'over-vlan']:
                if item == kwargs['span_encap']:
                    command += " span-encap %s" % item
                    break
        if 'span_local_ip' in kwargs:
            command += " span-local-ip %s" % kwargs['span_local_ip']
        if 'span_remote_ip' in kwargs:
            command += " span-remote-ip %s" % kwargs['span_remote_ip']
        if 'span_src_mac' in kwargs:
            command += " span-src-mac %s" % kwargs['span_src_mac']
        if 'span_dst_mac' in kwargs:
            command += " span-dst-mac %s" % kwargs['span_dst_mac']

        return self.send_command(command)


    def mirror_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mirror-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'direction' in kwargs:
            for item in [u'ingress', u'egress', u'bidirection']:
                if item == kwargs['direction']:
                    command += " direction %s" % item
                    break
        if 'out_port' in kwargs:
            command += " out-port %s" % kwargs['out_port']
        if 'loopback_port' in kwargs:
            command += " loopback-port %s" % kwargs['loopback_port']
        if 'in_port' in kwargs:
            command += " in-port %s" % kwargs['in_port']
        if 'filtering' in kwargs:
            for item in [u'port', u'vflow-and-port', u'vflow-or-port']:
                if item == kwargs['filtering']:
                    command += " filtering %s" % item
                    break
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'other_egress_out' in kwargs:
            for item in [u'allow', u'prevent']:
                if item == kwargs['other_egress_out']:
                    command += " other-egress-out %s" % item
                    break
        if 'span_encap' in kwargs:
            for item in [u'none', u'over-ip', u'over-vlan']:
                if item == kwargs['span_encap']:
                    command += " span-encap %s" % item
                    break
        if 'span_local_ip' in kwargs:
            command += " span-local-ip %s" % kwargs['span_local_ip']
        if 'span_remote_ip' in kwargs:
            command += " span-remote-ip %s" % kwargs['span_remote_ip']
        if 'span_src_mac' in kwargs:
            command += " span-src-mac %s" % kwargs['span_src_mac']
        if 'span_dst_mac' in kwargs:
            command += " span-dst-mac %s" % kwargs['span_dst_mac']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def mld_router_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mld-router-show'
        if 'node_ip' in kwargs:
            command += " node-ip %s" % kwargs['node_ip']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def mld_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mld-show'
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'node_ip' in kwargs:
            command += " node-ip %s" % kwargs['node_ip']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'source' in kwargs:
            command += " source %s" % kwargs['source']
        if 'node_type' in kwargs:
            for item in [u'host', u'router', u'switch']:
                if item == kwargs['node_type']:
                    command += " node-type %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def mld_snooping_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mld-snooping-modify'
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'snoop_linklocal_vlans' in kwargs:
            command += " snoop-linklocal-vlans %s" % kwargs['snoop_linklocal_vlans']
        if 'snoop_nd_vlans' in kwargs:
            command += " snoop-nd-vlans %s" % kwargs['snoop_nd_vlans']

        return self.send_command(command)


    def mld_snooping_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mld-snooping-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def mld_static_group_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mld-static-group-create'
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']

        return self.send_command(command)


    def mld_static_group_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mld-static-group-delete'
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']

        return self.send_command(command)


    def mld_static_group_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mld-static-group-show'
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def mld_static_source_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mld-static-source-create'
        if 'source_ip' in kwargs:
            command += " source-ip %s" % kwargs['source_ip']
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']

        return self.send_command(command)


    def mld_static_source_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mld-static-source-delete'
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'source_ip' in kwargs:
            command += " source-ip %s" % kwargs['source_ip']

        return self.send_command(command)


    def mld_static_source_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mld-static-source-show'
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'source_ip' in kwargs:
            command += " source-ip %s" % kwargs['source_ip']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def mld_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mld-stats-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def mld_switches_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mld-switches-show'
        if 'node_ip' in kwargs:
            command += " node-ip %s" % kwargs['node_ip']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def mst_config_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mst-config-create'
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'bridge_priority' in kwargs:
            command += " bridge-priority %s" % kwargs['bridge_priority']

        return self.send_command(command)


    def mst_config_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mst-config-delete'

        return self.send_command(command)


    def mst_config_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mst-config-modify'
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'bridge_priority' in kwargs:
            command += " bridge-priority %s" % kwargs['bridge_priority']

        return self.send_command(command)


    def mst_config_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'mst-config-show'
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'bridge_priority' in kwargs:
            command += " bridge-priority %s" % kwargs['bridge_priority']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nat_src_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-src-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'public_src_nat_ip' in kwargs:
            command += " public-src-nat-ip %s" % kwargs['public_src_nat_ip']
        if 'private_src_nat_ip' in kwargs:
            command += " private-src-nat-ip %s" % kwargs['private_src_nat_ip']
        if 'priv_port' in kwargs:
            command += " priv-port %s" % kwargs['priv_port']
        if 'pub_port' in kwargs:
            command += " pub-port %s" % kwargs['pub_port']
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break

        return self.send_command(command)


    def nat_src_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-src-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def nat_src_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-src-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'id' in kwargs:
            command += " id %s" % kwargs['id']
        if 'public_src_nat_ip' in kwargs:
            command += " public-src-nat-ip %s" % kwargs['public_src_nat_ip']
        if 'private_src_nat_ip' in kwargs:
            command += " private-src-nat-ip %s" % kwargs['private_src_nat_ip']
        if 'priv_port' in kwargs:
            command += " priv-port %s" % kwargs['priv_port']
        if 'pub_port' in kwargs:
            command += " pub-port %s" % kwargs['pub_port']
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nat_src_stats_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-src-stats-clear'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'egress_pkt' in kwargs:
            command += " egress-pkt %s" % kwargs['egress_pkt']
        if 'egress_bytes' in kwargs:
            command += " egress-bytes %s" % kwargs['egress_bytes']

        return self.send_command(command)


    def nat_src_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-src-stats-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nat_twice_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-twice-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'pub_src_nat_ip' in kwargs:
            command += " pub-src-nat-ip %s" % kwargs['pub_src_nat_ip']
        if 'pub_dst_nat_ip' in kwargs:
            command += " pub-dst-nat-ip %s" % kwargs['pub_dst_nat_ip']
        if 'in_port_nat' in kwargs:
            command += " in-port-nat %s" % kwargs['in_port_nat']
        if 'redirect_to_ports_value' in kwargs:
            command += " redirect-to-ports-value %s" % kwargs['redirect_to_ports_value']

        return self.send_command(command)


    def nat_twice_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-twice-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def nat_twice_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-twice-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'pub_src_nat_ip' in kwargs:
            command += " pub-src-nat-ip %s" % kwargs['pub_src_nat_ip']
        if 'pub_dst_nat_ip' in kwargs:
            command += " pub-dst-nat-ip %s" % kwargs['pub_dst_nat_ip']
        if 'in_port_nat' in kwargs:
            command += " in-port-nat %s" % kwargs['in_port_nat']
        if 'redirect_to_ports_value' in kwargs:
            command += " redirect-to-ports-value %s" % kwargs['redirect_to_ports_value']

        return self.send_command(command)


    def nat_twice_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-twice-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'pub_src_nat_ip' in kwargs:
            command += " pub-src-nat-ip %s" % kwargs['pub_src_nat_ip']
        if 'pub_dst_nat_ip' in kwargs:
            command += " pub-dst-nat-ip %s" % kwargs['pub_dst_nat_ip']
        if 'in_port_nat' in kwargs:
            command += " in-port-nat %s" % kwargs['in_port_nat']
        if 'redirect_to_ports_value' in kwargs:
            command += " redirect-to-ports-value %s" % kwargs['redirect_to_ports_value']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def netvisor_kvm_clone(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-kvm-clone'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'new_vm_name' in kwargs:
            command += " new-vm-name %s" % kwargs['new_vm_name']

        return self.send_command(command)


    def netvisor_kvm_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-kvm-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'memory' in kwargs:
            command += " memory %s" % kwargs['memory']
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'hda_size' in kwargs:
            command += " hda-size %s" % kwargs['hda_size']
        if 'hda_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hda_if']:
                    command += " hda-if %s" % item
                    break
        if 'hdb_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hdb_if']:
                    command += " hdb-if %s" % item
                    break
        if 'hdc_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hdc_if']:
                    command += " hdc-if %s" % item
                    break
        if 'hdd_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hdd_if']:
                    command += " hdd-if %s" % item
                    break

        return self.send_command(command)


    def netvisor_kvm_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-kvm-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'delete_hda' in kwargs:
            if kwargs['delete_hda']:
                command += " delete-hda"
            else:
                command += " no-delete-hda"

        return self.send_command(command)


    def netvisor_kvm_failover(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-kvm-failover'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'force' in kwargs:
            if kwargs['force']:
                command += " force"
            else:
                command += " no-force"

        return self.send_command(command)


    def netvisor_kvm_interface_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-kvm-interface-add'
        if 'netvisor_kvm_name' in kwargs:
            command += " netvisor-kvm-name %s" % kwargs['netvisor_kvm_name']
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def netvisor_kvm_interface_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-kvm-interface-modify'
        if 'netvisor_kvm_name' in kwargs:
            command += " netvisor-kvm-name %s" % kwargs['netvisor_kvm_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def netvisor_kvm_interface_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-kvm-interface-remove'
        if 'netvisor_kvm_name' in kwargs:
            command += " netvisor-kvm-name %s" % kwargs['netvisor_kvm_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']

        return self.send_command(command)


    def netvisor_kvm_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-kvm-interface-show'
        if 'netvisor_kvm_name' in kwargs:
            command += " netvisor-kvm-name %s" % kwargs['netvisor_kvm_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def netvisor_kvm_kill(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-kvm-kill'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def netvisor_kvm_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-kvm-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'memory' in kwargs:
            command += " memory %s" % kwargs['memory']
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'hda_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hda_if']:
                    command += " hda-if %s" % item
                    break
        if 'hdb_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hdb_if']:
                    command += " hdb-if %s" % item
                    break
        if 'hdc_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hdc_if']:
                    command += " hdc-if %s" % item
                    break
        if 'hdd_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hdd_if']:
                    command += " hdd-if %s" % item
                    break
        if 'vnc_password' in kwargs:
            command += " vnc-password %s" % kwargs['vnc_password']

        return self.send_command(command)


    def netvisor_kvm_reset(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-kvm-reset'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def netvisor_kvm_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-kvm-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'memory' in kwargs:
            command += " memory %s" % kwargs['memory']
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'hda_size' in kwargs:
            command += " hda-size %s" % kwargs['hda_size']
        if 'null' in kwargs:
            command += " null"
        if 'hda_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hda_if']:
                    command += " hda-if %s" % item
                    break
        if 'vmm_hda_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hda_if']:
                    command += " vmm-hda-if %s" % item
                    break
        if 'hdb_size' in kwargs:
            command += " hdb-size %s" % kwargs['hdb_size']
        if 'hdb_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hdb_if']:
                    command += " hdb-if %s" % item
                    break
        if 'vmm_hdb_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hdb_if']:
                    command += " vmm-hdb-if %s" % item
                    break
        if 'hdc_size' in kwargs:
            command += " hdc-size %s" % kwargs['hdc_size']
        if 'hdc_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hdc_if']:
                    command += " hdc-if %s" % item
                    break
        if 'vmm_hdc_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hdc_if']:
                    command += " vmm-hdc-if %s" % item
                    break
        if 'hdd_size' in kwargs:
            command += " hdd-size %s" % kwargs['hdd_size']
        if 'hdd_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hdd_if']:
                    command += " hdd-if %s" % item
                    break
        if 'vmm_hdd_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hdd_if']:
                    command += " vmm-hdd-if %s" % item
                    break
        if 'vnc_port' in kwargs:
            command += " vnc-port %s" % kwargs['vnc_port']
        if 'boot_at_console_connect' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['boot_at_console_connect']:
                    command += " boot-at-console-connect %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def netvisor_kvm_shutdown(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-kvm-shutdown'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def netvisor_kvm_start(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-kvm-start'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def netvisor_vm_clone(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-vm-clone'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'new_vm_name' in kwargs:
            command += " new-vm-name %s" % kwargs['new_vm_name']

        return self.send_command(command)


    def netvisor_vm_console_login(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-vm-console-login'

        return self.send_command(command)


    def netvisor_vm_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-vm-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'memory' in kwargs:
            command += " memory %s" % kwargs['memory']
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'hda_size' in kwargs:
            command += " hda-size %s" % kwargs['hda_size']
        if 'generate_uuid' in kwargs:
            command += " generate-uuid"
        if 'vmm_hda_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hda_if']:
                    command += " vmm-hda-if %s" % item
                    break
        if 'vmm_hdb_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hdb_if']:
                    command += " vmm-hdb-if %s" % item
                    break
        if 'vmm_hdc_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hdc_if']:
                    command += " vmm-hdc-if %s" % item
                    break
        if 'vmm_hdd_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hdd_if']:
                    command += " vmm-hdd-if %s" % item
                    break
        if 'vnc_password' in kwargs:
            command += " vnc-password %s" % kwargs['vnc_password']
        if 'boot_at_console_connect' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['boot_at_console_connect']:
                    command += " boot-at-console-connect %s" % item
                    break

        return self.send_command(command)


    def netvisor_vm_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-vm-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'delete_hda' in kwargs:
            if kwargs['delete_hda']:
                command += " delete-hda"
            else:
                command += " no-delete-hda"

        return self.send_command(command)


    def netvisor_vm_failover(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-vm-failover'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'force' in kwargs:
            if kwargs['force']:
                command += " force"
            else:
                command += " no-force"

        return self.send_command(command)


    def netvisor_vm_interface_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-vm-interface-add'
        if 'netvisor_vm_name' in kwargs:
            command += " netvisor-vm-name %s" % kwargs['netvisor_vm_name']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def netvisor_vm_interface_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-vm-interface-modify'
        if 'netvisor_vm_name' in kwargs:
            command += " netvisor-vm-name %s" % kwargs['netvisor_vm_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def netvisor_vm_interface_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-vm-interface-remove'
        if 'netvisor_vm_name' in kwargs:
            command += " netvisor-vm-name %s" % kwargs['netvisor_vm_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']

        return self.send_command(command)


    def netvisor_vm_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-vm-interface-show'
        if 'netvisor_vm_name' in kwargs:
            command += " netvisor-vm-name %s" % kwargs['netvisor_vm_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def netvisor_vm_kill(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-vm-kill'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def netvisor_vm_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-vm-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'memory' in kwargs:
            command += " memory %s" % kwargs['memory']
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'vmm_hda_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hda_if']:
                    command += " vmm-hda-if %s" % item
                    break
        if 'vmm_hdb_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hdb_if']:
                    command += " vmm-hdb-if %s" % item
                    break
        if 'vmm_hdc_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hdc_if']:
                    command += " vmm-hdc-if %s" % item
                    break
        if 'vmm_hdd_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hdd_if']:
                    command += " vmm-hdd-if %s" % item
                    break
        if 'vnc_password' in kwargs:
            command += " vnc-password %s" % kwargs['vnc_password']
        if 'boot_at_console_connect' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['boot_at_console_connect']:
                    command += " boot-at-console-connect %s" % item
                    break

        return self.send_command(command)


    def netvisor_vm_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-vm-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'memory' in kwargs:
            command += " memory %s" % kwargs['memory']
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'hda_size' in kwargs:
            command += " hda-size %s" % kwargs['hda_size']
        if 'null' in kwargs:
            command += " null"
        if 'hda_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hda_if']:
                    command += " hda-if %s" % item
                    break
        if 'vmm_hda_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hda_if']:
                    command += " vmm-hda-if %s" % item
                    break
        if 'hdb_size' in kwargs:
            command += " hdb-size %s" % kwargs['hdb_size']
        if 'hdb_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hdb_if']:
                    command += " hdb-if %s" % item
                    break
        if 'vmm_hdb_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hdb_if']:
                    command += " vmm-hdb-if %s" % item
                    break
        if 'hdc_size' in kwargs:
            command += " hdc-size %s" % kwargs['hdc_size']
        if 'hdc_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hdc_if']:
                    command += " hdc-if %s" % item
                    break
        if 'vmm_hdc_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hdc_if']:
                    command += " vmm-hdc-if %s" % item
                    break
        if 'hdd_size' in kwargs:
            command += " hdd-size %s" % kwargs['hdd_size']
        if 'hdd_if' in kwargs:
            for item in [u'scsi', u'ide', u'virtio']:
                if item == kwargs['hdd_if']:
                    command += " hdd-if %s" % item
                    break
        if 'vmm_hdd_if' in kwargs:
            for item in [u'virtio-blk', u'ahci-hd']:
                if item == kwargs['vmm_hdd_if']:
                    command += " vmm-hdd-if %s" % item
                    break
        if 'vnc_port' in kwargs:
            command += " vnc-port %s" % kwargs['vnc_port']
        if 'boot_at_console_connect' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['boot_at_console_connect']:
                    command += " boot-at-console-connect %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def netvisor_vm_start(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-vm-start'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def netvisor_zone_console_login(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-zone-console-login'

        return self.send_command(command)


    def netvisor_zone_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-zone-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'user' in kwargs:
            command += " user %s" % kwargs['user']
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"

        return self.send_command(command)


    def netvisor_zone_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-zone-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def netvisor_zone_interface_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-zone-interface-add'
        if 'netvisor_zone_name' in kwargs:
            command += " netvisor-zone-name %s" % kwargs['netvisor_zone_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def netvisor_zone_interface_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-zone-interface-modify'
        if 'netvisor_zone_name' in kwargs:
            command += " netvisor-zone-name %s" % kwargs['netvisor_zone_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def netvisor_zone_interface_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-zone-interface-remove'
        if 'netvisor_zone_name' in kwargs:
            command += " netvisor-zone-name %s" % kwargs['netvisor_zone_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']

        return self.send_command(command)


    def netvisor_zone_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-zone-interface-show'
        if 'netvisor_zone_name' in kwargs:
            command += " netvisor-zone-name %s" % kwargs['netvisor_zone_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def netvisor_zone_login(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-zone-login'

        return self.send_command(command)


    def netvisor_zone_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-zone-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'gateway' in kwargs:
            command += " gateway %s" % kwargs['gateway']
        if 'user' in kwargs:
            command += " user %s" % kwargs['user']
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']

        return self.send_command(command)


    def netvisor_zone_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'netvisor-zone-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'user' in kwargs:
            command += " user %s" % kwargs['user']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def node_info(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'node-info'

        return self.send_command(command)


    def node_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'node-show'
        if 'id' in kwargs:
            command += " id %s" % kwargs['id']
        if 'serial' in kwargs:
            command += " serial %s" % kwargs['serial']
        if 'fab_name' in kwargs:
            command += " fab-name %s" % kwargs['fab_name']
        if 'local_mac' in kwargs:
            command += " local-mac %s" % kwargs['local_mac']
        if 'fabric_network' in kwargs:
            for item in [u'in-band', u'mgmt']:
                if item == kwargs['fabric_network']:
                    command += " fabric-network %s" % item
                    break
        if 'control_network' in kwargs:
            for item in [u'in-band', u'mgmt']:
                if item == kwargs['control_network']:
                    command += " control-network %s" % item
                    break
        if 'mgmt_ip' in kwargs:
            command += " mgmt-ip %s" % kwargs['mgmt_ip']
        if 'mgmt_netmask' in kwargs:
            command += " mgmt-netmask %s" % kwargs['mgmt_netmask']
        if 'mgmt_mac' in kwargs:
            command += " mgmt-mac %s" % kwargs['mgmt_mac']
        if 'mgmt_secondary_macs' in kwargs:
            command += " mgmt-secondary-macs %s" % kwargs['mgmt_secondary_macs']
        if 'mgmt_if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['mgmt_if_nat_realm']:
                    command += " mgmt-if-nat-realm %s" % item
                    break
        if 'in_band_ip' in kwargs:
            command += " in-band-ip %s" % kwargs['in_band_ip']
        if 'in_band_netmask' in kwargs:
            command += " in-band-netmask %s" % kwargs['in_band_netmask']
        if 'in_band_mac' in kwargs:
            command += " in-band-mac %s" % kwargs['in_band_mac']
        if 'in_band_vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['in_band_vlan_type']:
                    command += " in-band-vlan-type %s" % item
                    break
        if 'in_band_secondary_macs' in kwargs:
            command += " in-band-secondary-macs %s" % kwargs['in_band_secondary_macs']
        if 'in_band_if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['in_band_if_nat_realm']:
                    command += " in-band-if-nat-realm %s" % item
                    break
        if 'fab_tid' in kwargs:
            command += " fab-tid %s" % kwargs['fab_tid']
        if 'cluster_tid' in kwargs:
            command += " cluster-tid %s" % kwargs['cluster_tid']
        if 'out_port' in kwargs:
            command += " out-port %s" % kwargs['out_port']
        if 'version' in kwargs:
            command += " version %s" % kwargs['version']
        if 'fresh_install' in kwargs:
            command += " fresh-install"
        if 'firmware_upgrade' in kwargs:
            for item in [u'not-required', u'required', u'reboot-required']:
                if item == kwargs['firmware_upgrade']:
                    command += " firmware-upgrade %s" % item
                    break
        if 'device_state' in kwargs:
            for item in [u'ok', u'error', u'simulator']:
                if item == kwargs['device_state']:
                    command += " device-state %s" % item
                    break
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nv_queue_stats_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nv-queue-stats-clear'

        return self.send_command(command)


    def nv_queue_stats_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nv-queue-stats-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']

        return self.send_command(command)


    def nv_queue_stats_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nv-queue-stats-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nv_queue_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nv-queue-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'q_high' in kwargs:
            command += " q-high %s" % kwargs['q_high']
        if 'q_low' in kwargs:
            command += " q-low %s" % kwargs['q_low']
        if 'q_max' in kwargs:
            command += " q-max %s" % kwargs['q_max']
        if 'q_in' in kwargs:
            command += " q-in %s" % kwargs['q_in']
        if 'q_out' in kwargs:
            command += " q-out %s" % kwargs['q_out']
        if 'q_delay_samples' in kwargs:
            command += " q-delay-samples %s" % kwargs['q_delay_samples']
        if 'q_overflow' in kwargs:
            command += " q-overflow %s" % kwargs['q_overflow']
        if 'q_underflow' in kwargs:
            command += " q-underflow %s" % kwargs['q_underflow']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nvm_vcenter_connection_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nvm-vcenter-connection-create'
        if 'conn_name' in kwargs:
            command += " conn-name %s" % kwargs['conn_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'user' in kwargs:
            command += " user %s" % kwargs['user']
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']

        return self.send_command(command)


    def nvm_vcenter_connection_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nvm-vcenter-connection-delete'
        if 'conn_name' in kwargs:
            command += " conn-name %s" % kwargs['conn_name']

        return self.send_command(command)


    def nvm_vcenter_connection_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nvm-vcenter-connection-show'
        if 'conn_name' in kwargs:
            command += " conn-name %s" % kwargs['conn_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'user' in kwargs:
            command += " user %s" % kwargs['user']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nvm_vcenter_host_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nvm-vcenter-host-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nvm_vcenter_network_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nvm-vcenter-network-show'
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def object_location_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'object-location-modify'

        return self.send_command(command)


    def object_location_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'object-location-show'
        if 'type' in kwargs:
            command += " type %s" % kwargs['type']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def openstack_config_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-config-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'release' in kwargs:
            for item in [u'icehouse', u'juno']:
                if item == kwargs['release']:
                    command += " release %s" % item
                    break
        if 'extensions' in kwargs:
            if kwargs['extensions']:
                command += " extensions"
            else:
                command += " no-extensions"
        if 'ha' in kwargs:
            if kwargs['ha']:
                command += " ha"
            else:
                command += " no-ha"
        if 'ha_vip' in kwargs:
            command += " ha-vip %s" % kwargs['ha_vip']
        if 'ha_vip_netmask' in kwargs:
            command += " ha-vip-netmask %s" % kwargs['ha_vip_netmask']
        if 'enable_nat' in kwargs:
            if kwargs['enable_nat']:
                command += " enable-nat"
            else:
                command += " no-enable-nat"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'dedicated_vnet_service' in kwargs:
            if kwargs['dedicated_vnet_service']:
                command += " dedicated-vnet-service"
            else:
                command += " shared-vnet-service"

        return self.send_command(command)


    def openstack_config_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-config-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def openstack_config_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-config-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'release' in kwargs:
            for item in [u'icehouse', u'juno']:
                if item == kwargs['release']:
                    command += " release %s" % item
                    break
        if 'extensions' in kwargs:
            if kwargs['extensions']:
                command += " extensions"
            else:
                command += " no-extensions"

        return self.send_command(command)


    def openstack_config_node_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-config-node-remove'
        if 'openstack_name' in kwargs:
            command += " openstack-name %s" % kwargs['openstack_name']
        if 'openstack_bridge_vnic_nic' in kwargs:
            command += " openstack-bridge-vnic-nic %s" % kwargs['openstack_bridge_vnic_nic']
        if 'macid' in kwargs:
            command += " macid %s" % kwargs['macid']

        return self.send_command(command)


    def openstack_config_node_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-config-node-show'
        if 'openstack_name' in kwargs:
            command += " openstack-name %s" % kwargs['openstack_name']
        if 'openstack_bridge_vnic_nic' in kwargs:
            command += " openstack-bridge-vnic-nic %s" % kwargs['openstack_bridge_vnic_nic']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'addr' in kwargs:
            command += " addr %s" % kwargs['addr']
        if 'macid' in kwargs:
            command += " macid %s" % kwargs['macid']
        if 'type' in kwargs:
            for item in [u'controller', u'compute', u'unknown']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'platform' in kwargs:
            command += " platform %s" % kwargs['platform']
        if 'release' in kwargs:
            command += " release %s" % kwargs['release']
        if 'status' in kwargs:
            command += " status %s" % kwargs['status']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def openstack_config_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-config-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'release' in kwargs:
            for item in [u'icehouse', u'juno']:
                if item == kwargs['release']:
                    command += " release %s" % item
                    break
        if 'controller_pool' in kwargs:
            command += " controller-pool %s" % kwargs['controller_pool']
        if 'extensions' in kwargs:
            if kwargs['extensions']:
                command += " extensions"
            else:
                command += " no-extensions"
        if 'ha' in kwargs:
            if kwargs['ha']:
                command += " ha"
            else:
                command += " no-ha"
        if 'ha_vip' in kwargs:
            command += " ha-vip %s" % kwargs['ha_vip']
        if 'ha_vip_netmask' in kwargs:
            command += " ha-vip-netmask %s" % kwargs['ha_vip_netmask']
        if 'enable_nat' in kwargs:
            if kwargs['enable_nat']:
                command += " enable-nat"
            else:
                command += " no-enable-nat"
        if 'bridge_vnic_nic' in kwargs:
            command += " bridge-vnic-nic %s" % kwargs['bridge_vnic_nic']
        if 'bridge_vnic_ip' in kwargs:
            command += " bridge-vnic-ip %s" % kwargs['bridge_vnic_ip']
        if 'bridge_vnic_netmask' in kwargs:
            command += " bridge-vnic-netmask %s" % kwargs['bridge_vnic_netmask']
        if 'bridge_vnic_mac' in kwargs:
            command += " bridge-vnic-mac %s" % kwargs['bridge_vnic_mac']
        if 'bridge_vnic_vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['bridge_vnic_vlan_type']:
                    command += " bridge-vnic-vlan-type %s" % item
                    break
        if 'bridge_vnic_if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['bridge_vnic_if']:
                    command += " bridge-vnic-if %s" % item
                    break
        if 'bridge_vnic_alias_on' in kwargs:
            command += " bridge-vnic-alias-on %s" % kwargs['bridge_vnic_alias_on']
        if 'bridge_vnic_exclusive' in kwargs:
            if kwargs['bridge_vnic_exclusive']:
                command += " bridge-vnic-exclusive"
            else:
                command += " no-bridge-vnic-exclusive"
        if 'bridge_vnic_nic_enable' in kwargs:
            if kwargs['bridge_vnic_nic_enable']:
                command += " bridge-vnic-nic-enable"
            else:
                command += " bridge-vnic-nic-disable"
        if 'bridge_vnic_nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['bridge_vnic_nic_state']:
                    command += " bridge-vnic-nic-state %s" % item
                    break
        if 'bridge_vnic_vrrp_primary' in kwargs:
            command += " bridge-vnic-vrrp-primary %s" % kwargs['bridge_vnic_vrrp_primary']
        if 'bridge_vnic_vrrp_state' in kwargs:
            for item in [u'slave', u'master']:
                if item == kwargs['bridge_vnic_vrrp_state']:
                    command += " bridge-vnic-vrrp-state %s" % item
                    break
        if 'bridge_vnic_secondary_macs' in kwargs:
            command += " bridge-vnic-secondary-macs %s" % kwargs['bridge_vnic_secondary_macs']
        if 'bridge_vnic_sriov_vf' in kwargs:
            if kwargs['bridge_vnic_sriov_vf']:
                command += " bridge-vnic-sriov-vf"
            else:
                command += " no-bridge-vnic-sriov-vf"
        if 'bridge_vnic_mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['bridge_vnic_mirror_traffic']:
                    command += " bridge-vnic-mirror-traffic %s" % item
                    break
        if 'bridge_vnic_if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['bridge_vnic_if_nat_realm']:
                    command += " bridge-vnic-if-nat-realm %s" % item
                    break
        if 'http_port' in kwargs:
            command += " http-port %s" % kwargs['http_port']
        if 'ssh_port' in kwargs:
            command += " ssh-port %s" % kwargs['ssh_port']
        if 'vnc_port' in kwargs:
            command += " vnc-port %s" % kwargs['vnc_port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def openstack_controller_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-controller-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def openstack_controller_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-controller-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def openstack_controller_shutdown(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-controller-shutdown'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def openstack_controller_start(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-controller-start'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def openstack_controller_storage_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-controller-storage-add'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'hda_size' in kwargs:
            command += " hda-size %s" % kwargs['hda_size']

        return self.send_command(command)


    def openstack_interface_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-interface-add'
        if 'openstack_name' in kwargs:
            command += " openstack-name %s" % kwargs['openstack_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def openstack_interface_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-interface-modify'
        if 'openstack_name' in kwargs:
            command += " openstack-name %s" % kwargs['openstack_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def openstack_interface_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-interface-remove'
        if 'openstack_name' in kwargs:
            command += " openstack-name %s" % kwargs['openstack_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']

        return self.send_command(command)


    def openstack_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-interface-show'
        if 'openstack_name' in kwargs:
            command += " openstack-name %s" % kwargs['openstack_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'vrrp_state' in kwargs:
            for item in [u'slave', u'master']:
                if item == kwargs['vrrp_state']:
                    command += " vrrp-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def openstack_plugin_install(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-plugin-install'
        if 'controller' in kwargs:
            command += " controller %s" % kwargs['controller']
        if 'user' in kwargs:
            command += " user %s" % kwargs['user']

        return self.send_command(command)


    def openstack_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def openvswitch_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openvswitch-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'dedicated_vnet_service' in kwargs:
            if kwargs['dedicated_vnet_service']:
                command += " dedicated-vnet-service"
            else:
                command += " shared-vnet-service"
        if 'cert_name' in kwargs:
            command += " cert-name %s" % kwargs['cert_name']
        if 'ca_cert_name' in kwargs:
            command += " ca-cert-name %s" % kwargs['ca_cert_name']
        if 'cert_location' in kwargs:
            for item in [u'none', u'global', u'container']:
                if item == kwargs['cert_location']:
                    command += " cert-location %s" % item
                    break
        if 'global_vtep' in kwargs:
            if kwargs['global_vtep']:
                command += " global-vtep"
            else:
                command += " local-vtep"
        if 'tunnel_ip' in kwargs:
            command += " tunnel-ip %s" % kwargs['tunnel_ip']

        return self.send_command(command)


    def openvswitch_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openvswitch-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def openvswitch_hwvtep_manager_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openvswitch-hwvtep-manager-add'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'default' in kwargs:
            command += " default"
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']

        return self.send_command(command)


    def openvswitch_hwvtep_manager_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openvswitch-hwvtep-manager-remove'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']

        return self.send_command(command)


    def openvswitch_hwvtep_manager_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openvswitch-hwvtep-manager-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'default' in kwargs:
            command += " default"
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'status' in kwargs:
            command += " status %s" % kwargs['status']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def openvswitch_interface_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openvswitch-interface-add'
        if 'ovs_name' in kwargs:
            command += " ovs-name %s" % kwargs['ovs_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def openvswitch_interface_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openvswitch-interface-modify'
        if 'ovs_name' in kwargs:
            command += " ovs-name %s" % kwargs['ovs_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def openvswitch_interface_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openvswitch-interface-remove'
        if 'ovs_name' in kwargs:
            command += " ovs-name %s" % kwargs['ovs_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']

        return self.send_command(command)


    def openvswitch_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openvswitch-interface-show'
        if 'ovs_name' in kwargs:
            command += " ovs-name %s" % kwargs['ovs_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'vrrp_state' in kwargs:
            for item in [u'slave', u'master']:
                if item == kwargs['vrrp_state']:
                    command += " vrrp-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def openvswitch_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openvswitch-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'gateway' in kwargs:
            command += " gateway %s" % kwargs['gateway']
        if 'tunnel_ip' in kwargs:
            command += " tunnel-ip %s" % kwargs['tunnel_ip']
        if 'global_vtep' in kwargs:
            if kwargs['global_vtep']:
                command += " global-vtep"
            else:
                command += " local-vtep"
        if 'cert_name' in kwargs:
            command += " cert-name %s" % kwargs['cert_name']
        if 'cert_location' in kwargs:
            for item in [u'none', u'global', u'container']:
                if item == kwargs['cert_location']:
                    command += " cert-location %s" % item
                    break
        if 'ca_cert_name' in kwargs:
            command += " ca-cert-name %s" % kwargs['ca_cert_name']

        return self.send_command(command)


    def openvswitch_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openvswitch-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'cert_name' in kwargs:
            command += " cert-name %s" % kwargs['cert_name']
        if 'ca_cert_name' in kwargs:
            command += " ca-cert-name %s" % kwargs['ca_cert_name']
        if 'cert_location' in kwargs:
            for item in [u'none', u'global', u'container']:
                if item == kwargs['cert_location']:
                    command += " cert-location %s" % item
                    break
        if 'default' in kwargs:
            command += " default"
        if 'db_ip' in kwargs:
            command += " db-ip %s" % kwargs['db_ip']
        if 'db_port' in kwargs:
            command += " db-port %s" % kwargs['db_port']
        if 'db_socket' in kwargs:
            command += " db-socket %s" % kwargs['db_socket']
        if 'mode' in kwargs:
            for item in [u'standalone', u'master', u'slave']:
                if item == kwargs['mode']:
                    command += " mode %s" % item
                    break
        if 'global_vtep' in kwargs:
            if kwargs['global_vtep']:
                command += " global-vtep"
            else:
                command += " local-vtep"
        if 'tunnel_ip' in kwargs:
            command += " tunnel-ip %s" % kwargs['tunnel_ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def pager(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'pager'

        return self.send_command(command)


    def ping(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ping'

        return self.send_command(command)


    def port_association_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-association-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'master_ports' in kwargs:
            command += " master-ports %s" % kwargs['master_ports']
        if 'slave_ports' in kwargs:
            command += " slave-ports %s" % kwargs['slave_ports']
        if 'policy' in kwargs:
            for item in [u'all-masters', u'any-master']:
                if item == kwargs['policy']:
                    command += " policy %s" % item
                    break
        if 'virtual_wire' in kwargs:
            if kwargs['virtual_wire']:
                command += " virtual-wire"
            else:
                command += " no-virtual-wire"
        if 'bidir' in kwargs:
            if kwargs['bidir']:
                command += " bidir"
            else:
                command += " no-bidir"
        if 'monitor_ports' in kwargs:
            command += " monitor-ports %s" % kwargs['monitor_ports']

        return self.send_command(command)


    def port_association_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-association-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def port_association_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-association-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'master_ports' in kwargs:
            command += " master-ports %s" % kwargs['master_ports']
        if 'slave_ports' in kwargs:
            command += " slave-ports %s" % kwargs['slave_ports']
        if 'policy' in kwargs:
            for item in [u'all-masters', u'any-master']:
                if item == kwargs['policy']:
                    command += " policy %s" % item
                    break
        if 'virtual_wire' in kwargs:
            if kwargs['virtual_wire']:
                command += " virtual-wire"
            else:
                command += " no-virtual-wire"
        if 'bidir' in kwargs:
            if kwargs['bidir']:
                command += " bidir"
            else:
                command += " no-bidir"
        if 'monitor_ports' in kwargs:
            command += " monitor-ports %s" % kwargs['monitor_ports']

        return self.send_command(command)


    def port_association_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-association-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'master_ports' in kwargs:
            command += " master-ports %s" % kwargs['master_ports']
        if 'slave_ports' in kwargs:
            command += " slave-ports %s" % kwargs['slave_ports']
        if 'policy' in kwargs:
            for item in [u'all-masters', u'any-master']:
                if item == kwargs['policy']:
                    command += " policy %s" % item
                    break
        if 'virtual_wire' in kwargs:
            if kwargs['virtual_wire']:
                command += " virtual-wire"
            else:
                command += " no-virtual-wire"
        if 'bidir' in kwargs:
            if kwargs['bidir']:
                command += " bidir"
            else:
                command += " no-bidir"
        if 'monitor_ports' in kwargs:
            command += " monitor-ports %s" % kwargs['monitor_ports']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_buffer_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-buffer-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']

        return self.send_command(command)


    def port_buffer_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-buffer-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_buffer_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-buffer-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_config_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-config-modify'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'egress_rate_limit' in kwargs:
            command += " egress-rate-limit %s" % kwargs['egress_rate_limit']
        if 'autoneg' in kwargs:
            if kwargs['autoneg']:
                command += " autoneg"
            else:
                command += " no-autoneg"
        if 'jumbo' in kwargs:
            if kwargs['jumbo']:
                command += " jumbo"
            else:
                command += " no-jumbo"
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'reflect' in kwargs:
            if kwargs['reflect']:
                command += " reflect"
            else:
                command += " no-reflect"
        if 'edge_switch' in kwargs:
            if kwargs['edge_switch']:
                command += " edge-switch"
            else:
                command += " no-edge-switch"
        if 'pause' in kwargs:
            if kwargs['pause']:
                command += " pause"
            else:
                command += " no-pause"
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'loopback' in kwargs:
            if kwargs['loopback']:
                command += " loopback"
            else:
                command += " no-loopback"
        if 'vxlan_termination' in kwargs:
            if kwargs['vxlan_termination']:
                command += " vxlan-termination"
            else:
                command += " no-vxlan-termination"
        if 'mirror_only' in kwargs:
            if kwargs['mirror_only']:
                command += " mirror-only"
            else:
                command += " no-mirror-receive-only"
        if 'port_mac_address' in kwargs:
            command += " port-mac-address %s" % kwargs['port_mac_address']
        if 'send_port' in kwargs:
            command += " send-port %s" % kwargs['send_port']
        if 'loop_vlans' in kwargs:
            command += " loop-vlans %s" % kwargs['loop_vlans']
        if 'routing' in kwargs:
            if kwargs['routing']:
                command += " routing"
            else:
                command += " no-routing"
        if 'host_enable' in kwargs:
            if kwargs['host_enable']:
                command += " host-enable"
            else:
                command += " host-disable"
        if 'crc_check_enable' in kwargs:
            if kwargs['crc_check_enable']:
                command += " crc-check-enable"
            else:
                command += " crc-check-disable"
        if 'local_switching' in kwargs:
            if kwargs['local_switching']:
                command += " local-switching"
            else:
                command += " no-local-switching"
        if 'fabric_guard' in kwargs:
            if kwargs['fabric_guard']:
                command += " fabric-guard"
            else:
                command += " no-fabric-guard"

        return self.send_command(command)


    def port_config_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-config-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'egress_rate_limit' in kwargs:
            command += " egress-rate-limit %s" % kwargs['egress_rate_limit']
        if 'autoneg' in kwargs:
            if kwargs['autoneg']:
                command += " autoneg"
            else:
                command += " no-autoneg"
        if 'jumbo' in kwargs:
            if kwargs['jumbo']:
                command += " jumbo"
            else:
                command += " no-jumbo"
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'reflect' in kwargs:
            if kwargs['reflect']:
                command += " reflect"
            else:
                command += " no-reflect"
        if 'edge_switch' in kwargs:
            if kwargs['edge_switch']:
                command += " edge-switch"
            else:
                command += " no-edge-switch"
        if 'pause' in kwargs:
            if kwargs['pause']:
                command += " pause"
            else:
                command += " no-pause"
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'loopback' in kwargs:
            if kwargs['loopback']:
                command += " loopback"
            else:
                command += " no-loopback"
        if 'vxlan_termination' in kwargs:
            if kwargs['vxlan_termination']:
                command += " vxlan-termination"
            else:
                command += " no-vxlan-termination"
        if 'mirror_only' in kwargs:
            if kwargs['mirror_only']:
                command += " mirror-only"
            else:
                command += " no-mirror-receive-only"
        if 'send_port' in kwargs:
            command += " send-port %s" % kwargs['send_port']
        if 'loop_vlans' in kwargs:
            command += " loop-vlans %s" % kwargs['loop_vlans']
        if 'routing' in kwargs:
            if kwargs['routing']:
                command += " routing"
            else:
                command += " no-routing"
        if 'host_enable' in kwargs:
            if kwargs['host_enable']:
                command += " host-enable"
            else:
                command += " host-disable"
        if 'crc_check_enable' in kwargs:
            if kwargs['crc_check_enable']:
                command += " crc-check-enable"
            else:
                command += " crc-check-disable"
        if 'local_switching' in kwargs:
            if kwargs['local_switching']:
                command += " local-switching"
            else:
                command += " no-local-switching"
        if 'rhost' in kwargs:
            command += " rhost %s" % kwargs['rhost']
        if 'fabric_guard' in kwargs:
            if kwargs['fabric_guard']:
                command += " fabric-guard"
            else:
                command += " no-fabric-guard"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_cos_bw_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-cos-bw-modify'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'min_bw_guarantee' in kwargs:
            command += " min-bw-guarantee %s" % kwargs['min_bw_guarantee']
        if 'max_bw_limit' in kwargs:
            command += " max-bw-limit %s" % kwargs['max_bw_limit']

        return self.send_command(command)


    def port_cos_bw_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-cos-bw-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_cos_rate_setting_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-cos-rate-setting-modify'
        if 'port' in kwargs:
            for item in [u'control-port', u'data-port', u'span-ports']:
                if item == kwargs['port']:
                    command += " port %s" % item
                    break

        return self.send_command(command)


    def port_cos_rate_setting_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-cos-rate-setting-show'
        if 'port' in kwargs:
            for item in [u'control-port', u'data-port', u'span-ports']:
                if item == kwargs['port']:
                    command += " port %s" % item
                    break
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_cos_stats_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-cos-stats-clear'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']

        return self.send_command(command)


    def port_cos_stats_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-cos-stats-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']

        return self.send_command(command)


    def port_cos_stats_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-cos-stats-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_cos_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-cos-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_cos_weight_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-cos-weight-modify'

        return self.send_command(command)


    def port_cos_weight_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-cos-weight-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_egress_check(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-egress-check'

        return self.send_command(command)


    def port_egress_fix(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-egress-fix'

        return self.send_command(command)


    def port_egress_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-egress-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'egress' in kwargs:
            command += " egress %s" % kwargs['egress']
        if 'rx_only' in kwargs:
            command += " rx-only %s" % kwargs['rx_only']
        if 'active_active_vlags' in kwargs:
            command += " active-active-vlags %s" % kwargs['active_active_vlags']
        if 'loopback' in kwargs:
            command += " loopback %s" % kwargs['loopback']
        if 'no_local_switching' in kwargs:
            command += " no-local-switching %s" % kwargs['no_local_switching']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_lacp_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-lacp-modify'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'test_mode' in kwargs:
            for item in [u'none', u'no-tx', u'no-rx', u'no-rx-or-tx']:
                if item == kwargs['test_mode']:
                    command += " test-mode %s" % item
                    break

        return self.send_command(command)


    def port_lacp_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-lacp-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'neighbor' in kwargs:
            if kwargs['neighbor']:
                command += " neighbor"
            else:
                command += " no-neighbor"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'port_type' in kwargs:
            for item in [u'none', u'vlag', u'trunk']:
                if item == kwargs['port_type']:
                    command += " port-type %s" % item
                    break
        if 'mode' in kwargs:
            for item in [u'off', u'passive', u'active']:
                if item == kwargs['mode']:
                    command += " mode %s" % item
                    break
        if 'timeout' in kwargs:
            for item in [u'slow', u'fast']:
                if item == kwargs['timeout']:
                    command += " timeout %s" % item
                    break
        if 'system_id' in kwargs:
            command += " system-id %s" % kwargs['system_id']
        if 'lacp_key' in kwargs:
            command += " lacp-key %s" % kwargs['lacp_key']
        if 'system_priority' in kwargs:
            command += " system-priority %s" % kwargs['system_priority']
        if 'port_priority' in kwargs:
            command += " port-priority %s" % kwargs['port_priority']
        if 'aggregatable' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['aggregatable']:
                    command += " aggregatable %s" % item
                    break
        if 'sync' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['sync']:
                    command += " sync %s" % item
                    break
        if 'coll' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['coll']:
                    command += " coll %s" % item
                    break
        if 'dist' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['dist']:
                    command += " dist %s" % item
                    break
        if 'defaulted' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['defaulted']:
                    command += " defaulted %s" % item
                    break
        if 'expired' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['expired']:
                    command += " expired %s" % item
                    break
        if 'port_state' in kwargs:
            command += " port-state %s" % kwargs['port_state']
        if 'test_mode' in kwargs:
            for item in [u'none', u'no-tx', u'no-rx', u'no-rx-or-tx']:
                if item == kwargs['test_mode']:
                    command += " test-mode %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_lldp_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-lldp-modify'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'lldp' in kwargs:
            if kwargs['lldp']:
                command += " lldp"
            else:
                command += " no-lldp"

        return self.send_command(command)


    def port_lldp_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-lldp-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'lldp' in kwargs:
            if kwargs['lldp']:
                command += " lldp"
            else:
                command += " no-lldp"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_pfc_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-pfc-create'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']

        return self.send_command(command)


    def port_pfc_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-pfc-delete'

        return self.send_command(command)


    def port_pfc_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-pfc-modify'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']

        return self.send_command(command)


    def port_pfc_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-pfc-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'error' in kwargs:
            command += " error %s" % kwargs['error']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_phy_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-phy-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'partially_up' in kwargs:
            if kwargs['partially_up']:
                command += " partially-up"
            else:
                command += " remote-fault"
        if 'partially_up' in kwargs:
            if kwargs['partially_up']:
                command += " partially-up"
            else:
                command += " remote-fault"
        if 'autoneg' in kwargs:
            command += " autoneg %s" % kwargs['autoneg']
        if 'speed' in kwargs:
            command += " speed %s" % kwargs['speed']
        if 'max_frame' in kwargs:
            command += " max-frame %s" % kwargs['max_frame']
        if 'link_quality' in kwargs:
            command += " link-quality %s" % kwargs['link_quality']
        if 'learning' in kwargs:
            for item in [u'on', u'off']:
                if item == kwargs['learning']:
                    command += " learning %s" % item
                    break
        if 'def_vlan' in kwargs:
            command += " def-vlan %s" % kwargs['def_vlan']
        if 'dfe_mode' in kwargs:
            for item in [u'static', u'one-shot', u'continuous', u'kr']:
                if item == kwargs['dfe_mode']:
                    command += " dfe-mode %s" % item
                    break
        if 'dfe_coarse' in kwargs:
            for item in [u'not-started', u'in-progress', u'complete', u'error']:
                if item == kwargs['dfe_coarse']:
                    command += " dfe-coarse %s" % item
                    break
        if 'dfe_fine' in kwargs:
            for item in [u'not-started', u'in-progress', u'complete', u'error']:
                if item == kwargs['dfe_fine']:
                    command += " dfe-fine %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'bezel_port' in kwargs:
            command += " bezel-port %s" % kwargs['bezel_port']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'vle_wait' in kwargs:
            if kwargs['vle_wait']:
                command += " vle-wait"
            else:
                command += " phy-down"
        if 'loop_vlans' in kwargs:
            command += " loop-vlans %s" % kwargs['loop_vlans']
        if 'rem_ip' in kwargs:
            command += " rem-ip %s" % kwargs['rem_ip']
        if 'lport' in kwargs:
            command += " lport %s" % kwargs['lport']
        if 'rport' in kwargs:
            command += " rport %s" % kwargs['rport']
        if 'asymetric_pause' in kwargs:
            if kwargs['asymetric_pause']:
                command += " asymetric-pause"
            else:
                command += " vxlan-termination"
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'trunk' in kwargs:
            command += " trunk %s" % kwargs['trunk']
        if 'hide_connections' in kwargs:
            command += " hide-connections"
        if 'link_detail' in kwargs:
            command += " link-detail"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_stats_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-stats-clear'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']

        return self.send_command(command)


    def port_stats_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-stats-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']
        if 'congestion_threshold' in kwargs:
            command += " congestion-threshold %s" % kwargs['congestion_threshold']

        return self.send_command(command)


    def port_stats_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-stats-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'counter' in kwargs:
            command += " counter %s" % kwargs['counter']
        if 'ibytes' in kwargs:
            command += " ibytes %s" % kwargs['ibytes']
        if 'idiscards' in kwargs:
            command += " idiscards %s" % kwargs['idiscards']
        if 'ierrs' in kwargs:
            command += " ierrs %s" % kwargs['ierrs']
        if 'obytes' in kwargs:
            command += " obytes %s" % kwargs['obytes']
        if 'odiscards' in kwargs:
            command += " odiscards %s" % kwargs['odiscards']
        if 'oerrs' in kwargs:
            command += " oerrs %s" % kwargs['oerrs']
        if 'mtu_errs' in kwargs:
            command += " mtu-errs %s" % kwargs['mtu_errs']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_storm_control_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-storm-control-modify'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'unknown_ucast_level' in kwargs:
            command += " unknown-ucast-level %s" % kwargs['unknown_ucast_level']
        if 'unknown_mcast_level' in kwargs:
            command += " unknown-mcast-level %s" % kwargs['unknown_mcast_level']
        if 'broadcast_level' in kwargs:
            command += " broadcast-level %s" % kwargs['broadcast_level']

        return self.send_command(command)


    def port_storm_control_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-storm-control-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_vlan_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-vlan-add'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']

        return self.send_command(command)


    def port_vlan_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-vlan-remove'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']

        return self.send_command(command)


    def port_vlan_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-vlan-show'
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'active_vlans' in kwargs:
            command += " active-vlans %s" % kwargs['active_vlans']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_xcvr_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-xcvr-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'vendor_name' in kwargs:
            command += " vendor-name %s" % kwargs['vendor_name']
        if 'part_number' in kwargs:
            command += " part-number %s" % kwargs['part_number']
        if 'serial_number' in kwargs:
            command += " serial-number %s" % kwargs['serial_number']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def ptp_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ptp-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'slave_port' in kwargs:
            command += " slave-port %s" % kwargs['slave_port']
        if 'master_ports' in kwargs:
            command += " master-ports %s" % kwargs['master_ports']

        return self.send_command(command)


    def ptp_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ptp-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def quit(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'quit'

        return self.send_command(command)


    def role_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'role-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'access' in kwargs:
            for item in [u'read-only', u'read-write']:
                if item == kwargs['access']:
                    command += " access %s" % item
                    break
        if 'running_config' in kwargs:
            if kwargs['running_config']:
                command += " running-config"
            else:
                command += " no-running-config"
        if 'shell' in kwargs:
            if kwargs['shell']:
                command += " shell"
            else:
                command += " no-shell"
        if 'sudo' in kwargs:
            if kwargs['sudo']:
                command += " sudo"
            else:
                command += " no-sudo"

        return self.send_command(command)


    def role_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'role-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def role_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'role-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'access' in kwargs:
            for item in [u'read-only', u'read-write']:
                if item == kwargs['access']:
                    command += " access %s" % item
                    break
        if 'running_config' in kwargs:
            if kwargs['running_config']:
                command += " running-config"
            else:
                command += " no-running-config"
        if 'shell' in kwargs:
            if kwargs['shell']:
                command += " shell"
            else:
                command += " no-shell"
        if 'sudo' in kwargs:
            if kwargs['sudo']:
                command += " sudo"
            else:
                command += " no-sudo"
        if 'delete_from_users' in kwargs:
            command += " delete-from-users"

        return self.send_command(command)


    def role_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'role-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'access' in kwargs:
            for item in [u'read-only', u'read-write']:
                if item == kwargs['access']:
                    command += " access %s" % item
                    break
        if 'running_config' in kwargs:
            if kwargs['running_config']:
                command += " running-config"
            else:
                command += " no-running-config"
        if 'shell' in kwargs:
            if kwargs['shell']:
                command += " shell"
            else:
                command += " no-shell"
        if 'sudo' in kwargs:
            if kwargs['sudo']:
                command += " sudo"
            else:
                command += " no-sudo"
        if 'delete_from_users' in kwargs:
            command += " delete-from-users"
        if 'group_id' in kwargs:
            command += " group-id %s" % kwargs['group_id']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def running_config_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'running-config-show'

        return self.send_command(command)


    def service_stats_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'service-stats-clear'

        return self.send_command(command)


    def service_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'service-stats-show'
        if 'bytes' in kwargs:
            command += " bytes %s" % kwargs['bytes']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def sflow_collector_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sflow-collector-create'
        if 'collector_ip' in kwargs:
            command += " collector-ip %s" % kwargs['collector_ip']
        if 'collector_port' in kwargs:
            command += " collector-port %s" % kwargs['collector_port']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break

        return self.send_command(command)


    def sflow_collector_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sflow-collector-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def sflow_collector_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sflow-collector-show'
        if 'collector_ip' in kwargs:
            command += " collector-ip %s" % kwargs['collector_ip']
        if 'collector_port' in kwargs:
            command += " collector-port %s" % kwargs['collector_port']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def sflow_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sflow-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'type' in kwargs:
            for item in [u'ingress', u'egress']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'sample_type' in kwargs:
            for item in [u'raw', u'cooked']:
                if item == kwargs['sample_type']:
                    command += " sample-type %s" % item
                    break
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'sample_rate' in kwargs:
            command += " sample-rate %s" % kwargs['sample_rate']
        if 'sample_interval' in kwargs:
            command += " sample-interval %s" % kwargs['sample_interval']
        if 'trunc_length' in kwargs:
            command += " trunc-length %s" % kwargs['trunc_length']
        if 'agent_id' in kwargs:
            command += " agent-id %s" % kwargs['agent_id']

        return self.send_command(command)


    def sflow_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sflow-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def sflow_port_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sflow-port-add'
        if 'sflow_name' in kwargs:
            command += " sflow-name %s" % kwargs['sflow_name']
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']

        return self.send_command(command)


    def sflow_port_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sflow-port-remove'
        if 'sflow_name' in kwargs:
            command += " sflow-name %s" % kwargs['sflow_name']
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']

        return self.send_command(command)


    def sflow_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sflow-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'type' in kwargs:
            for item in [u'ingress', u'egress']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'sample_type' in kwargs:
            for item in [u'raw', u'cooked']:
                if item == kwargs['sample_type']:
                    command += " sample-type %s" % item
                    break
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'sample_rate' in kwargs:
            command += " sample-rate %s" % kwargs['sample_rate']
        if 'sample_interval' in kwargs:
            command += " sample-interval %s" % kwargs['sample_interval']
        if 'trunc_length' in kwargs:
            command += " trunc-length %s" % kwargs['trunc_length']
        if 'agent_id' in kwargs:
            command += " agent-id %s" % kwargs['agent_id']
        if 'sample_pkt_cnt' in kwargs:
            command += " sample-pkt-cnt %s" % kwargs['sample_pkt_cnt']
        if 'sample_drops' in kwargs:
            command += " sample-drops %s" % kwargs['sample_drops']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def shell(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'shell'

        return self.send_command(command)


    def snmp_community_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-community-create'
        if 'community_string' in kwargs:
            command += " community-string %s" % kwargs['community_string']
        if 'community_type' in kwargs:
            for item in [u'read-only', u'read-write']:
                if item == kwargs['community_type']:
                    command += " community-type %s" % item
                    break

        return self.send_command(command)


    def snmp_community_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-community-delete'
        if 'community_string' in kwargs:
            command += " community-string %s" % kwargs['community_string']

        return self.send_command(command)


    def snmp_community_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-community-modify'
        if 'community_string' in kwargs:
            command += " community-string %s" % kwargs['community_string']
        if 'community_type' in kwargs:
            for item in [u'read-only', u'read-write']:
                if item == kwargs['community_type']:
                    command += " community-type %s" % item
                    break

        return self.send_command(command)


    def snmp_community_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-community-show'
        if 'community_string' in kwargs:
            command += " community-string %s" % kwargs['community_string']
        if 'community_type' in kwargs:
            for item in [u'read-only', u'read-write']:
                if item == kwargs['community_type']:
                    command += " community-type %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def snmp_engineid_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-engineid-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def snmp_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-show'
        if 'show_type' in kwargs:
            for item in [u'walk', u'get', u'get-next']:
                if item == kwargs['show_type']:
                    command += " show-type %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"
        if 'snmp_show' in kwargs:
            command += " snmp-show"
        if 'show_type' in kwargs:
            for item in [u'walk', u'get', u'get-next']:
                if item == kwargs['show_type']:
                    command += " show-type %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def snmp_trap_enable_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-trap-enable-modify'
        if 'link_up_down' in kwargs:
            if kwargs['link_up_down']:
                command += " link-up-down"
            else:
                command += " no-link-up-down"
        if 'default_monitors' in kwargs:
            if kwargs['default_monitors']:
                command += " default-monitors"
            else:
                command += " no-default-monitors"
        if 'physical_sensors' in kwargs:
            if kwargs['physical_sensors']:
                command += " physical-sensors"
            else:
                command += " no-physical-sensors"
        if 'low_disk_space' in kwargs:
            if kwargs['low_disk_space']:
                command += " low-disk-space"
            else:
                command += " no-low-disk-space"
        if 'low_disk_space_threshold' in kwargs:
            command += " low-disk-space-threshold %s" % kwargs['low_disk_space_threshold']
        if 'system_usage' in kwargs:
            if kwargs['system_usage']:
                command += " system-usage"
            else:
                command += " no-system-usage"
        if 'high_system_usage_threshold' in kwargs:
            command += " high-system-usage-threshold %s" % kwargs['high_system_usage_threshold']
        if 'login_failure' in kwargs:
            if kwargs['login_failure']:
                command += " login-failure"
            else:
                command += " no-login-failure"
        if 'lacp_status' in kwargs:
            if kwargs['lacp_status']:
                command += " lacp-status"
            else:
                command += " no-lacp-status"
        if 'vport_modified' in kwargs:
            if kwargs['vport_modified']:
                command += " vport-modified"
            else:
                command += " no-vport-modified"
        if 'stp_port_modified' in kwargs:
            if kwargs['stp_port_modified']:
                command += " stp-port-modified"
            else:
                command += " no-stp-port-modified"
        if 'mirror_to_cpu' in kwargs:
            if kwargs['mirror_to_cpu']:
                command += " mirror-to-cpu"
            else:
                command += " no-mirror-to-cpu"
        if 'stp_port_state_failed' in kwargs:
            if kwargs['stp_port_state_failed']:
                command += " stp-port-state-failed"
            else:
                command += " no-stp-port-state-failed"
        if 'link_congestion_detected' in kwargs:
            if kwargs['link_congestion_detected']:
                command += " link-congestion-detected"
            else:
                command += " no-link-congestion-detected"
        if 'fabric_node_state_changed' in kwargs:
            if kwargs['fabric_node_state_changed']:
                command += " fabric-node-state-changed"
            else:
                command += " no-fabric-node-state-changed"

        return self.send_command(command)


    def snmp_trap_enable_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-trap-enable-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def snmp_trap_sink_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-trap-sink-create'
        if 'community' in kwargs:
            command += " community %s" % kwargs['community']
        if 'dest_host' in kwargs:
            command += " dest-host %s" % kwargs['dest_host']
        if 'dest_port' in kwargs:
            command += " dest-port %s" % kwargs['dest_port']

        return self.send_command(command)


    def snmp_trap_sink_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-trap-sink-delete'
        if 'community' in kwargs:
            command += " community %s" % kwargs['community']
        if 'dest_host' in kwargs:
            command += " dest-host %s" % kwargs['dest_host']
        if 'dest_port' in kwargs:
            command += " dest-port %s" % kwargs['dest_port']

        return self.send_command(command)


    def snmp_trap_sink_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-trap-sink-show'
        if 'community' in kwargs:
            command += " community %s" % kwargs['community']
        if 'dest_host' in kwargs:
            command += " dest-host %s" % kwargs['dest_host']
        if 'dest_port' in kwargs:
            command += " dest-port %s" % kwargs['dest_port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def snmp_user_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-user-create'
        if 'user_name' in kwargs:
            command += " user-name %s" % kwargs['user_name']
        if 'auth_password' in kwargs:
            command += " auth-password %s" % kwargs['auth_password']
        if 'auth' in kwargs:
            if kwargs['auth']:
                command += " auth"
            else:
                command += " no-auth"
        if 'priv_password' in kwargs:
            command += " priv-password %s" % kwargs['priv_password']
        if 'priv' in kwargs:
            if kwargs['priv']:
                command += " priv"
            else:
                command += " no-priv"

        return self.send_command(command)


    def snmp_user_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-user-delete'
        if 'user_name' in kwargs:
            command += " user-name %s" % kwargs['user_name']

        return self.send_command(command)


    def snmp_user_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-user-modify'
        if 'user_name' in kwargs:
            command += " user-name %s" % kwargs['user_name']
        if 'auth_password' in kwargs:
            command += " auth-password %s" % kwargs['auth_password']
        if 'auth' in kwargs:
            if kwargs['auth']:
                command += " auth"
            else:
                command += " no-auth"
        if 'priv_password' in kwargs:
            command += " priv-password %s" % kwargs['priv_password']
        if 'priv' in kwargs:
            if kwargs['priv']:
                command += " priv"
            else:
                command += " no-priv"

        return self.send_command(command)


    def snmp_user_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-user-show'
        if 'user_name' in kwargs:
            command += " user-name %s" % kwargs['user_name']
        if 'auth' in kwargs:
            if kwargs['auth']:
                command += " auth"
            else:
                command += " no-auth"
        if 'priv' in kwargs:
            if kwargs['priv']:
                command += " priv"
            else:
                command += " no-priv"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def snmp_v3_trap_sink_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-v3-trap-sink-create'
        if 'user_name' in kwargs:
            command += " user-name %s" % kwargs['user_name']
        if 'dest_host' in kwargs:
            command += " dest-host %s" % kwargs['dest_host']
        if 'dest_port' in kwargs:
            command += " dest-port %s" % kwargs['dest_port']

        return self.send_command(command)


    def snmp_v3_trap_sink_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-v3-trap-sink-delete'
        if 'user_name' in kwargs:
            command += " user-name %s" % kwargs['user_name']
        if 'dest_host' in kwargs:
            command += " dest-host %s" % kwargs['dest_host']
        if 'dest_port' in kwargs:
            command += " dest-port %s" % kwargs['dest_port']

        return self.send_command(command)


    def snmp_v3_trap_sink_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-v3-trap-sink-show'
        if 'user_name' in kwargs:
            command += " user-name %s" % kwargs['user_name']
        if 'engine_id' in kwargs:
            command += " engine-id %s" % kwargs['engine_id']
        if 'dest_host' in kwargs:
            command += " dest-host %s" % kwargs['dest_host']
        if 'dest_port' in kwargs:
            command += " dest-port %s" % kwargs['dest_port']
        if 'auth' in kwargs:
            if kwargs['auth']:
                command += " auth"
            else:
                command += " no-auth"
        if 'priv' in kwargs:
            if kwargs['priv']:
                command += " priv"
            else:
                command += " no-priv"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def snmp_vacm_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-vacm-create'
        if 'user_type' in kwargs:
            for item in [u'rouser', u'rwuser']:
                if item == kwargs['user_type']:
                    command += " user-type %s" % item
                    break
        if 'oid_restrict' in kwargs:
            command += " oid-restrict %s" % kwargs['oid_restrict']
        if 'auth' in kwargs:
            if kwargs['auth']:
                command += " auth"
            else:
                command += " no-auth"
        if 'priv' in kwargs:
            if kwargs['priv']:
                command += " priv"
            else:
                command += " no-priv"

        return self.send_command(command)


    def snmp_vacm_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-vacm-delete'

        return self.send_command(command)


    def snmp_vacm_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-vacm-modify'
        if 'user_type' in kwargs:
            for item in [u'rouser', u'rwuser']:
                if item == kwargs['user_type']:
                    command += " user-type %s" % item
                    break
        if 'oid_restrict' in kwargs:
            command += " oid-restrict %s" % kwargs['oid_restrict']
        if 'auth' in kwargs:
            if kwargs['auth']:
                command += " auth"
            else:
                command += " no-auth"
        if 'priv' in kwargs:
            if kwargs['priv']:
                command += " priv"
            else:
                command += " no-priv"

        return self.send_command(command)


    def snmp_vacm_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snmp-vacm-show'
        if 'user_type' in kwargs:
            for item in [u'rouser', u'rwuser']:
                if item == kwargs['user_type']:
                    command += " user-type %s" % item
                    break
        if 'oid_restrict' in kwargs:
            command += " oid-restrict %s" % kwargs['oid_restrict']
        if 'view' in kwargs:
            command += " view %s" % kwargs['view']
        if 'auth' in kwargs:
            if kwargs['auth']:
                command += " auth"
            else:
                command += " no-auth"
        if 'priv' in kwargs:
            if kwargs['priv']:
                command += " priv"
            else:
                command += " no-priv"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def software_license_import_product_ids(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-license-import-product-ids'

        return self.send_command(command)


    def software_license_install(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-license-install'
        if 'key' in kwargs:
            command += " key %s" % kwargs['key']

        return self.send_command(command)


    def software_license_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-license-show'
        if 'license_id' in kwargs:
            command += " license-id %s" % kwargs['license_id']
        if 'id' in kwargs:
            command += " id %s" % kwargs['id']
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'prompt' in kwargs:
            command += " prompt %s" % kwargs['prompt']
        if 'key' in kwargs:
            command += " key %s" % kwargs['key']
        if 'feature' in kwargs:
            command += " feature %s" % kwargs['feature']
        if 'upgrade' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['upgrade']:
                    command += " upgrade %s" % item
                    break
        if 'upgrade_from' in kwargs:
            command += " upgrade-from %s" % kwargs['upgrade_from']
        if 'sysconfig' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['sysconfig']:
                    command += " sysconfig %s" % item
                    break
        if 'pending' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['pending']:
                    command += " pending %s" % item
                    break
        if 'expires_on' in kwargs:
            command += " expires-on %s" % kwargs['expires_on']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def software_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-modify'
        if 'use_proxy' in kwargs:
            if kwargs['use_proxy']:
                command += " use-proxy"
            else:
                command += " no-use-proxy"
        if 'proxy_host' in kwargs:
            command += " proxy-host %s" % kwargs['proxy_host']
        if 'proxy_port' in kwargs:
            command += " proxy-port %s" % kwargs['proxy_port']

        return self.send_command(command)


    def software_reboot_group_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-reboot-group-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def software_reboot_group_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-reboot-group-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'force' in kwargs:
            if kwargs['force']:
                command += " force"
            else:
                command += " no-force"

        return self.send_command(command)


    def software_reboot_group_member_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-reboot-group-member-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def software_reboot_group_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-reboot-group-show'
        if 'sequence' in kwargs:
            command += " sequence %s" % kwargs['sequence']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'force' in kwargs:
            if kwargs['force']:
                command += " force"
            else:
                command += " no-force"
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def software_reboot_sequence_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-reboot-sequence-modify'
        if 'sequence' in kwargs:
            command += " sequence %s" % kwargs['sequence']

        return self.send_command(command)


    def software_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def software_track_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-track-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'publisher' in kwargs:
            command += " publisher %s" % kwargs['publisher']
        if 'url' in kwargs:
            command += " url %s" % kwargs['url']
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def software_upgrade(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-upgrade'
        if 'software_upgrade' in kwargs:
            command += " software-upgrade"
        if 'software_upgrade_status_show' in kwargs:
            command += " software-upgrade-status-show"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def software_upgrade_status_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-upgrade-status-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def span_trunk_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'span-trunk-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"

        return self.send_command(command)


    def span_trunk_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'span-trunk-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def ssh(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ssh'

        return self.send_command(command)


    def ssh_known_hosts_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ssh-known-hosts-delete'

        return self.send_command(command)


    def stg_state_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'stg-state-show'
        if 'vlan' in kwargs:
            command += " vlan %s" % kwargs['vlan']
        if 'root_port' in kwargs:
            command += " root-port %s" % kwargs['root_port']
        if 'designated_root' in kwargs:
            command += " designated-root %s" % kwargs['designated_root']
        if 'root_priority' in kwargs:
            command += " root-priority %s" % kwargs['root_priority']
        if 'bridge_priority' in kwargs:
            command += " bridge-priority %s" % kwargs['bridge_priority']
        if 'root_times' in kwargs:
            command += " root-times %s" % kwargs['root_times']
        if 'bridge_times' in kwargs:
            command += " bridge-times %s" % kwargs['bridge_times']
        if 'sm_table' in kwargs:
            command += " sm-table %s" % kwargs['sm_table']
        if 'peer_exists' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['peer_exists']:
                    command += " peer-exists %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def storage_device_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-device-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'label' in kwargs:
            command += " label %s" % kwargs['label']
        if 'disk' in kwargs:
            command += " disk %s" % kwargs['disk']
        if 'type' in kwargs:
            for item in [u'disk', u'flash']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'capacity' in kwargs:
            command += " capacity %s" % kwargs['capacity']
        if 'in_use' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['in_use']:
                    command += " in-use %s" % item
                    break
        if 'data_set' in kwargs:
            command += " data-set %s" % kwargs['data_set']
        if 'path' in kwargs:
            command += " path %s" % kwargs['path']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def storage_folder_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-folder-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'quota' in kwargs:
            command += " quota %s" % kwargs['quota']
        if 'sharing' in kwargs:
            for item in [u'none', u'sftp', u'nfs']:
                if item == kwargs['sharing']:
                    command += " sharing %s" % item
                    break
        if 'nfs_opts' in kwargs:
            command += " nfs-opts %s" % kwargs['nfs_opts']
        if 'optimization' in kwargs:
            for item in [u'latency', u'throughput']:
                if item == kwargs['optimization']:
                    command += " optimization %s" % item
                    break

        return self.send_command(command)


    def storage_folder_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-folder-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def storage_folder_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-folder-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'quota' in kwargs:
            command += " quota %s" % kwargs['quota']
        if 'sharing' in kwargs:
            for item in [u'none', u'sftp', u'nfs']:
                if item == kwargs['sharing']:
                    command += " sharing %s" % item
                    break
        if 'nfs_opts' in kwargs:
            command += " nfs-opts %s" % kwargs['nfs_opts']
        if 'optimization' in kwargs:
            for item in [u'latency', u'throughput']:
                if item == kwargs['optimization']:
                    command += " optimization %s" % item
                    break

        return self.send_command(command)


    def storage_folder_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-folder-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'quota' in kwargs:
            command += " quota %s" % kwargs['quota']
        if 'vfolder' in kwargs:
            command += " vfolder %s" % kwargs['vfolder']
        if 'state' in kwargs:
            for item in [u'passive', u'active']:
                if item == kwargs['state']:
                    command += " state %s" % item
                    break
        if 'share' in kwargs:
            command += " share %s" % kwargs['share']
        if 'sharing' in kwargs:
            for item in [u'none', u'sftp', u'nfs']:
                if item == kwargs['sharing']:
                    command += " sharing %s" % item
                    break
        if 'nfs_opts' in kwargs:
            command += " nfs-opts %s" % kwargs['nfs_opts']
        if 'optimization' in kwargs:
            for item in [u'latency', u'throughput']:
                if item == kwargs['optimization']:
                    command += " optimization %s" % item
                    break
        if 'data_set' in kwargs:
            command += " data-set %s" % kwargs['data_set']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def storage_hapool_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-hapool-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'hapool_peer_pool' in kwargs:
            command += " hapool-peer-pool %s" % kwargs['hapool_peer_pool']

        return self.send_command(command)


    def storage_hapool_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-hapool-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def storage_hapool_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-hapool-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'hapool_peer_pool' in kwargs:
            command += " hapool-peer-pool %s" % kwargs['hapool_peer_pool']

        return self.send_command(command)


    def storage_hapool_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-hapool-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'used' in kwargs:
            command += " used %s" % kwargs['used']
        if 'avail' in kwargs:
            command += " avail %s" % kwargs['avail']
        if 'data_set' in kwargs:
            command += " data-set %s" % kwargs['data_set']
        if 'degraded_dev_dtl' in kwargs:
            if kwargs['degraded_dev_dtl']:
                command += " degraded-dev-dtl"
            else:
                command += " low-disk-space"
        if 'state' in kwargs:
            command += " state %s" % kwargs['state']
        if 'ha_pool' in kwargs:
            command += " ha-pool %s" % kwargs['ha_pool']
        if 'peer_pool' in kwargs:
            command += " peer-pool %s" % kwargs['peer_pool']
        if 'hapool_peer_pool' in kwargs:
            command += " hapool-peer-pool %s" % kwargs['hapool_peer_pool']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def storage_image_download(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-image-download'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def storage_image_refresh(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-image-refresh'

        return self.send_command(command)


    def storage_image_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-image-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'size' in kwargs:
            command += " size %s" % kwargs['size']
        if 'status' in kwargs:
            for item in [u'server-only', u'downloading', u'downloaded', u'download-failed']:
                if item == kwargs['status']:
                    command += " status %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def storage_pool_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-pool-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def storage_pool_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-pool-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def storage_pool_device_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-pool-device-add'
        if 'storage_pool_name' in kwargs:
            command += " storage-pool-name %s" % kwargs['storage_pool_name']
        if 'device_name' in kwargs:
            command += " device-name %s" % kwargs['device_name']

        return self.send_command(command)


    def storage_pool_device_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-pool-device-remove'
        if 'storage_pool_name' in kwargs:
            command += " storage-pool-name %s" % kwargs['storage_pool_name']
        if 'device_name' in kwargs:
            command += " device-name %s" % kwargs['device_name']

        return self.send_command(command)


    def storage_pool_device_replace(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-pool-device-replace'
        if 'storage_pool_name' in kwargs:
            command += " storage-pool-name %s" % kwargs['storage_pool_name']
        if 'device_name' in kwargs:
            command += " device-name %s" % kwargs['device_name']

        return self.send_command(command)


    def storage_pool_device_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-pool-device-show'
        if 'storage_pool_name' in kwargs:
            command += " storage-pool-name %s" % kwargs['storage_pool_name']
        if 'device_name' in kwargs:
            command += " device-name %s" % kwargs['device_name']
        if 'device_label' in kwargs:
            command += " device-label %s" % kwargs['device_label']
        if 'device_disk' in kwargs:
            command += " device-disk %s" % kwargs['device_disk']
        if 'device_type' in kwargs:
            for item in [u'disk', u'flash']:
                if item == kwargs['device_type']:
                    command += " device-type %s" % item
                    break
        if 'device_capacity' in kwargs:
            command += " device-capacity %s" % kwargs['device_capacity']
        if 'device_in_use' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['device_in_use']:
                    command += " device-in-use %s" % item
                    break
        if 'device_data_set' in kwargs:
            command += " device-data-set %s" % kwargs['device_data_set']
        if 'device_path' in kwargs:
            command += " device-path %s" % kwargs['device_path']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def storage_pool_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-pool-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def storage_pool_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-pool-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'used' in kwargs:
            command += " used %s" % kwargs['used']
        if 'avail' in kwargs:
            command += " avail %s" % kwargs['avail']
        if 'data_set' in kwargs:
            command += " data-set %s" % kwargs['data_set']
        if 'degraded_dev_dtl' in kwargs:
            if kwargs['degraded_dev_dtl']:
                command += " degraded-dev-dtl"
            else:
                command += " low-disk-space"
        if 'state' in kwargs:
            command += " state %s" % kwargs['state']
        if 'ha_pool' in kwargs:
            command += " ha-pool %s" % kwargs['ha_pool']
        if 'peer_pool' in kwargs:
            command += " peer-pool %s" % kwargs['peer_pool']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def storage_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-stats-show'
        if 'server_ip' in kwargs:
            command += " server-ip %s" % kwargs['server_ip']
        if 'read_bytes' in kwargs:
            command += " read-bytes %s" % kwargs['read_bytes']
        if 'write_bytes' in kwargs:
            command += " write-bytes %s" % kwargs['write_bytes']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def storage_vfolder_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-vfolder-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'peer_pool' in kwargs:
            command += " peer-pool %s" % kwargs['peer_pool']
        if 'ha_ip' in kwargs:
            command += " ha-ip %s" % kwargs['ha_ip']
        if 'ha_netmask' in kwargs:
            command += " ha-netmask %s" % kwargs['ha_netmask']
        if 'ha_vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['ha_vlan_type']:
                    command += " ha-vlan-type %s" % item
                    break
        if 'ha_if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['ha_if']:
                    command += " ha-if %s" % item
                    break
        if 'ha_alias_on' in kwargs:
            command += " ha-alias-on %s" % kwargs['ha_alias_on']
        if 'ha_secondary_macs' in kwargs:
            command += " ha-secondary-macs %s" % kwargs['ha_secondary_macs']
        if 'ha_sriov_vf' in kwargs:
            if kwargs['ha_sriov_vf']:
                command += " ha-sriov-vf"
            else:
                command += " no-ha-sriov-vf"
        if 'ha_mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['ha_mirror_traffic']:
                    command += " ha-mirror-traffic %s" % item
                    break
        if 'ha_if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['ha_if_nat_realm']:
                    command += " ha-if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def storage_vfolder_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-vfolder-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def storage_vfolder_failover(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-vfolder-failover'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'force' in kwargs:
            if kwargs['force']:
                command += " force"
            else:
                command += " no-force"

        return self.send_command(command)


    def storage_vfolder_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-vfolder-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'ha_ip' in kwargs:
            command += " ha-ip %s" % kwargs['ha_ip']
        if 'ha_netmask' in kwargs:
            command += " ha-netmask %s" % kwargs['ha_netmask']
        if 'ha_if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['ha_if']:
                    command += " ha-if %s" % item
                    break
        if 'ha_vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['ha_vlan_type']:
                    command += " ha-vlan-type %s" % item
                    break
        if 'ha_secondary_macs' in kwargs:
            command += " ha-secondary-macs %s" % kwargs['ha_secondary_macs']
        if 'ha_sriov_vf' in kwargs:
            if kwargs['ha_sriov_vf']:
                command += " ha-sriov-vf"
            else:
                command += " no-ha-sriov-vf"
        if 'ha_mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['ha_mirror_traffic']:
                    command += " ha-mirror-traffic %s" % item
                    break
        if 'ha_if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['ha_if_nat_realm']:
                    command += " ha-if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def storage_vfolder_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-vfolder-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'peer_pool' in kwargs:
            command += " peer-pool %s" % kwargs['peer_pool']
        if 'ha_nic' in kwargs:
            command += " ha-nic %s" % kwargs['ha_nic']
        if 'ha_ip' in kwargs:
            command += " ha-ip %s" % kwargs['ha_ip']
        if 'ha_netmask' in kwargs:
            command += " ha-netmask %s" % kwargs['ha_netmask']
        if 'ha_mac' in kwargs:
            command += " ha-mac %s" % kwargs['ha_mac']
        if 'ha_vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['ha_vlan_type']:
                    command += " ha-vlan-type %s" % item
                    break
        if 'ha_if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['ha_if']:
                    command += " ha-if %s" % item
                    break
        if 'ha_alias_on' in kwargs:
            command += " ha-alias-on %s" % kwargs['ha_alias_on']
        if 'ha_exclusive' in kwargs:
            if kwargs['ha_exclusive']:
                command += " ha-exclusive"
            else:
                command += " no-ha-exclusive"
        if 'ha_nic_enable' in kwargs:
            if kwargs['ha_nic_enable']:
                command += " ha-nic-enable"
            else:
                command += " ha-nic-disable"
        if 'ha_nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['ha_nic_state']:
                    command += " ha-nic-state %s" % item
                    break
        if 'ha_vrrp_primary' in kwargs:
            command += " ha-vrrp-primary %s" % kwargs['ha_vrrp_primary']
        if 'ha_vrrp_state' in kwargs:
            for item in [u'slave', u'master']:
                if item == kwargs['ha_vrrp_state']:
                    command += " ha-vrrp-state %s" % item
                    break
        if 'ha_secondary_macs' in kwargs:
            command += " ha-secondary-macs %s" % kwargs['ha_secondary_macs']
        if 'ha_sriov_vf' in kwargs:
            if kwargs['ha_sriov_vf']:
                command += " ha-sriov-vf"
            else:
                command += " no-ha-sriov-vf"
        if 'ha_mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['ha_mirror_traffic']:
                    command += " ha-mirror-traffic %s" % item
                    break
        if 'ha_if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['ha_if_nat_realm']:
                    command += " ha-if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def stp_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'stp-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'stp_mode' in kwargs:
            for item in [u'rstp', u'mstp']:
                if item == kwargs['stp_mode']:
                    command += " stp-mode %s" % item
                    break
        if 'bpdus_bridge_ports' in kwargs:
            if kwargs['bpdus_bridge_ports']:
                command += " bpdus-bridge-ports"
            else:
                command += " bpdus-all-ports"
        if 'bridge_id' in kwargs:
            command += " bridge-id %s" % kwargs['bridge_id']
        if 'bridge_priority' in kwargs:
            command += " bridge-priority %s" % kwargs['bridge_priority']
        if 'mst_config_name' in kwargs:
            command += " mst-config-name %s" % kwargs['mst_config_name']

        return self.send_command(command)


    def stp_port_event_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'stp-port-event-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'vlan' in kwargs:
            command += " vlan %s" % kwargs['vlan']
        if 'instance' in kwargs:
            command += " instance %s" % kwargs['instance']
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def stp_port_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'stp-port-modify'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'block' in kwargs:
            if kwargs['block']:
                command += " block"
            else:
                command += " no-block"
        if 'filter' in kwargs:
            if kwargs['filter']:
                command += " filter"
            else:
                command += " no-filter"
        if 'edge' in kwargs:
            if kwargs['edge']:
                command += " edge"
            else:
                command += " no-edge"
        if 'guard' in kwargs:
            if kwargs['guard']:
                command += " guard"
            else:
                command += " no-guard"

        return self.send_command(command)


    def stp_port_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'stp-port-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'block' in kwargs:
            if kwargs['block']:
                command += " block"
            else:
                command += " no-block"
        if 'filter' in kwargs:
            if kwargs['filter']:
                command += " filter"
            else:
                command += " no-filter"
        if 'edge' in kwargs:
            if kwargs['edge']:
                command += " edge"
            else:
                command += " no-edge"
        if 'guard' in kwargs:
            if kwargs['guard']:
                command += " guard"
            else:
                command += " no-guard"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def stp_port_state_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'stp-port-state-show'
        if 'vlan' in kwargs:
            command += " vlan %s" % kwargs['vlan']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'p_is_d' in kwargs:
            if kwargs['p_is_d']:
                command += " p-is-d"
            else:
                command += " p-is-m"
        if 'designated_priority' in kwargs:
            command += " designated-priority %s" % kwargs['designated_priority']
        if 'port_priority' in kwargs:
            command += " port-priority %s" % kwargs['port_priority']
        if 'message_priority' in kwargs:
            command += " message-priority %s" % kwargs['message_priority']
        if 'info_is' in kwargs:
            for item in [u'disabled', u'received', u'mine', u'aged']:
                if item == kwargs['info_is']:
                    command += " info-is %s" % item
                    break
        if 'designated_times' in kwargs:
            command += " designated-times %s" % kwargs['designated_times']
        if 'port_times' in kwargs:
            command += " port-times %s" % kwargs['port_times']
        if 'message_times' in kwargs:
            command += " message-times %s" % kwargs['message_times']
        if 'hello_timer' in kwargs:
            command += " hello-timer %s" % kwargs['hello_timer']
        if 'topology_timer' in kwargs:
            command += " topology-timer %s" % kwargs['topology_timer']
        if 'forward_timer' in kwargs:
            command += " forward-timer %s" % kwargs['forward_timer']
        if 'rcvd_info_timer' in kwargs:
            command += " rcvd-info-timer %s" % kwargs['rcvd_info_timer']
        if 'recent_root_timer' in kwargs:
            command += " recent-root-timer %s" % kwargs['recent_root_timer']
        if 'recent_backup_timer' in kwargs:
            command += " recent-backup-timer %s" % kwargs['recent_backup_timer']
        if 'edge_delay_timer' in kwargs:
            command += " edge-delay-timer %s" % kwargs['edge_delay_timer']
        if 'migration_timer' in kwargs:
            command += " migration-timer %s" % kwargs['migration_timer']
        if 'sm_table_bits' in kwargs:
            command += " sm-table-bits %s" % kwargs['sm_table_bits']
        if 'sm_table' in kwargs:
            command += " sm-table %s" % kwargs['sm_table']
        if 'vlag_peer_port' in kwargs:
            command += " vlag-peer-port %s" % kwargs['vlag_peer_port']
        if 'peer' in kwargs:
            if kwargs['peer']:
                command += " peer"
            else:
                command += " no-peer"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def stp_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'stp-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def stp_state_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'stp-state-show'
        if 'vlan' in kwargs:
            command += " vlan %s" % kwargs['vlan']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'instance_id' in kwargs:
            command += " instance-id %s" % kwargs['instance_id']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'bridge_id' in kwargs:
            command += " bridge-id %s" % kwargs['bridge_id']
        if 'bridge_priority' in kwargs:
            command += " bridge-priority %s" % kwargs['bridge_priority']
        if 'root_id' in kwargs:
            command += " root-id %s" % kwargs['root_id']
        if 'root_priority' in kwargs:
            command += " root-priority %s" % kwargs['root_priority']
        if 'root_port' in kwargs:
            command += " root-port %s" % kwargs['root_port']
        if 'hello_time' in kwargs:
            command += " hello-time %s" % kwargs['hello_time']
        if 'forwarding_delay' in kwargs:
            command += " forwarding-delay %s" % kwargs['forwarding_delay']
        if 'max_age' in kwargs:
            command += " max-age %s" % kwargs['max_age']
        if 'internal' in kwargs:
            if kwargs['internal']:
                command += " internal"
            else:
                command += " no-internal"
        if 'peer' in kwargs:
            if kwargs['peer']:
                command += " peer"
            else:
                command += " no-peer"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def switch_config_copy_to_import(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-config-copy-to-import'
        if 'switch_config_export' in kwargs:
            command += " switch-config-export"
        if 'switch_config_import' in kwargs:
            command += " switch-config-import"
        if 'apply_system_config' in kwargs:
            if kwargs['apply_system_config']:
                command += " apply-system-config"
            else:
                command += " ignore-system-config"
        if 'do_fabric_join' in kwargs:
            if kwargs['do_fabric_join']:
                command += " do-fabric-join"
            else:
                command += " skip-fabric-join"
        if 'replace_switch' in kwargs:
            if kwargs['replace_switch']:
                command += " replace-switch"
            else:
                command += " no-replace-switch"
        if 'switch_config_reset' in kwargs:
            command += " switch-config-reset"
        if 'switch_config_show' in kwargs:
            command += " switch-config-show"
        if 'apply_system_config' in kwargs:
            if kwargs['apply_system_config']:
                command += " apply-system-config"
            else:
                command += " ignore-system-config"
        if 'do_fabric_join' in kwargs:
            if kwargs['do_fabric_join']:
                command += " do-fabric-join"
            else:
                command += " skip-fabric-join"
        if 'replace_switch' in kwargs:
            if kwargs['replace_switch']:
                command += " replace-switch"
            else:
                command += " no-replace-switch"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"
        if 'switch_info_show' in kwargs:
            command += " switch-info-show"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"
        if 'switch_poweroff' in kwargs:
            command += " switch-poweroff"
        if 'switch_reboot' in kwargs:
            command += " switch-reboot"
        if 'switch_route_create' in kwargs:
            command += " switch-route-create"
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']
        if 'switch_route_delete' in kwargs:
            command += " switch-route-delete"
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'switch_route_modify' in kwargs:
            command += " switch-route-modify"
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']
        if 'switch_route_show' in kwargs:
            command += " switch-route-show"
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"
        if 'switch_setup_modify' in kwargs:
            command += " switch-setup-modify"
        if 'switch_name' in kwargs:
            command += " switch-name %s" % kwargs['switch_name']
        if 'mgmt_ip' in kwargs:
            command += " mgmt-ip %s" % kwargs['mgmt_ip']
        if 'mgmt_netmask' in kwargs:
            command += " mgmt-netmask %s" % kwargs['mgmt_netmask']
        if 'mgmt_ip_assignment' in kwargs:
            command += " mgmt-ip-assignment %s" % kwargs['mgmt_ip_assignment']
        if 'in_band_ip' in kwargs:
            command += " in-band-ip %s" % kwargs['in_band_ip']
        if 'in_band_netmask' in kwargs:
            command += " in-band-netmask %s" % kwargs['in_band_netmask']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']
        if 'dns_ip' in kwargs:
            command += " dns-ip %s" % kwargs['dns_ip']
        if 'dns_secondary_ip' in kwargs:
            command += " dns-secondary-ip %s" % kwargs['dns_secondary_ip']
        if 'domain_name' in kwargs:
            command += " domain-name %s" % kwargs['domain_name']
        if 'ntp_server' in kwargs:
            command += " ntp-server %s" % kwargs['ntp_server']
        if 'eula_accepted' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['eula_accepted']:
                    command += " eula-accepted %s" % item
                    break
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']
        if 'phone_home' in kwargs:
            if kwargs['phone_home']:
                command += " phone-home"
            else:
                command += " no-phone-home"
        if 'analytics_store' in kwargs:
            for item in [u'default', u'optimized']:
                if item == kwargs['analytics_store']:
                    command += " analytics-store %s" % item
                    break
        if 'force' in kwargs:
            if kwargs['force']:
                command += " force"
            else:
                command += " no-force"
        if 'enable_host_ports' in kwargs:
            if kwargs['enable_host_ports']:
                command += " enable-host-ports"
            else:
                command += " disable-host-ports"
        if 'motd' in kwargs:
            command += " motd %s" % kwargs['motd']
        if 'banner' in kwargs:
            command += " banner %s" % kwargs['banner']
        if 'switch_setup_show' in kwargs:
            command += " switch-setup-show"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"
        if 'switch_status_settings_modify' in kwargs:
            command += " switch-status-settings-modify"
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']
        if 'switch_status_settings_show' in kwargs:
            command += " switch-status-settings-show"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"
        if 'switch_status_show' in kwargs:
            command += " switch-status-show"
        if 'since_start' in kwargs:
            command += " since-start"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'value' in kwargs:
            command += " value %s" % kwargs['value']
        if 'state' in kwargs:
            for item in [u'ok', u'fault', u'fatal']:
                if item == kwargs['state']:
                    command += " state %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"
        if 'switch_vnic_create' in kwargs:
            command += " switch-vnic-create"
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'switch_vnic_delete' in kwargs:
            command += " switch-vnic-delete"
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'switch_vnic_modify' in kwargs:
            command += " switch-vnic-modify"
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'switch_vnic_show' in kwargs:
            command += " switch-vnic-show"
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"
        if 'switch' in kwargs:
            command += " switch"
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'switch_local' in kwargs:
            command += " switch-local"

        return self.send_command(command)


    def switch_config_copy_to_import(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-config-copy-to-import'

        return self.send_command(command)


    def switch_config_export(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-config-export'

        return self.send_command(command)


    def switch_config_import(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-config-import'
        if 'apply_system_config' in kwargs:
            if kwargs['apply_system_config']:
                command += " apply-system-config"
            else:
                command += " ignore-system-config"
        if 'do_fabric_join' in kwargs:
            if kwargs['do_fabric_join']:
                command += " do-fabric-join"
            else:
                command += " skip-fabric-join"
        if 'replace_switch' in kwargs:
            if kwargs['replace_switch']:
                command += " replace-switch"
            else:
                command += " no-replace-switch"

        return self.send_command(command)


    def switch_config_reset(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-config-reset'

        return self.send_command(command)


    def switch_config_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-config-show'
        if 'apply_system_config' in kwargs:
            if kwargs['apply_system_config']:
                command += " apply-system-config"
            else:
                command += " ignore-system-config"
        if 'do_fabric_join' in kwargs:
            if kwargs['do_fabric_join']:
                command += " do-fabric-join"
            else:
                command += " skip-fabric-join"
        if 'replace_switch' in kwargs:
            if kwargs['replace_switch']:
                command += " replace-switch"
            else:
                command += " no-replace-switch"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def switch_info_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-info-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def switch_local(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-local'

        return self.send_command(command)


    def switch_poweroff(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-poweroff'

        return self.send_command(command)


    def switch_reboot(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-reboot'

        return self.send_command(command)


    def switch_route_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-route-create'
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']

        return self.send_command(command)


    def switch_route_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-route-delete'
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']

        return self.send_command(command)


    def switch_route_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-route-modify'
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']

        return self.send_command(command)


    def switch_route_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-route-show'
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def switch_setup_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-setup-modify'
        if 'switch_name' in kwargs:
            command += " switch-name %s" % kwargs['switch_name']
        if 'mgmt_ip' in kwargs:
            command += " mgmt-ip %s" % kwargs['mgmt_ip']
        if 'mgmt_netmask' in kwargs:
            command += " mgmt-netmask %s" % kwargs['mgmt_netmask']
        if 'mgmt_ip_assignment' in kwargs:
            command += " mgmt-ip-assignment %s" % kwargs['mgmt_ip_assignment']
        if 'in_band_ip' in kwargs:
            command += " in-band-ip %s" % kwargs['in_band_ip']
        if 'in_band_netmask' in kwargs:
            command += " in-band-netmask %s" % kwargs['in_band_netmask']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']
        if 'dns_ip' in kwargs:
            command += " dns-ip %s" % kwargs['dns_ip']
        if 'dns_secondary_ip' in kwargs:
            command += " dns-secondary-ip %s" % kwargs['dns_secondary_ip']
        if 'domain_name' in kwargs:
            command += " domain-name %s" % kwargs['domain_name']
        if 'ntp_server' in kwargs:
            command += " ntp-server %s" % kwargs['ntp_server']
        if 'eula_accepted' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['eula_accepted']:
                    command += " eula-accepted %s" % item
                    break
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']
        if 'phone_home' in kwargs:
            if kwargs['phone_home']:
                command += " phone-home"
            else:
                command += " no-phone-home"
        if 'analytics_store' in kwargs:
            for item in [u'default', u'optimized']:
                if item == kwargs['analytics_store']:
                    command += " analytics-store %s" % item
                    break
        if 'force' in kwargs:
            if kwargs['force']:
                command += " force"
            else:
                command += " no-force"
        if 'enable_host_ports' in kwargs:
            if kwargs['enable_host_ports']:
                command += " enable-host-ports"
            else:
                command += " disable-host-ports"
        if 'motd' in kwargs:
            command += " motd %s" % kwargs['motd']
        if 'banner' in kwargs:
            command += " banner %s" % kwargs['banner']

        return self.send_command(command)


    def switch_setup_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-setup-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def switch_status_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-status-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']

        return self.send_command(command)


    def switch_status_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-status-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def switch_status_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-status-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'value' in kwargs:
            command += " value %s" % kwargs['value']
        if 'state' in kwargs:
            for item in [u'ok', u'fault', u'fatal']:
                if item == kwargs['state']:
                    command += " state %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def switch_vnic_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-vnic-create'
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def switch_vnic_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-vnic-delete'
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']

        return self.send_command(command)


    def switch_vnic_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-vnic-modify'
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def switch_vnic_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-vnic-show'
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def syslog_tls_cert_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'syslog-tls-cert-clear'

        return self.send_command(command)


    def syslog_tls_cert_import(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'syslog-tls-cert-import'
        if 'file_ca' in kwargs:
            command += " file-ca %s" % kwargs['file_ca']
        if 'file_cert' in kwargs:
            command += " file-cert %s" % kwargs['file_cert']

        return self.send_command(command)


    def syslog_tls_cert_info_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'syslog-tls-cert-info-show'
        if 'cert_type' in kwargs:
            for item in [u'ca', u'intermediate', u'server']:
                if item == kwargs['cert_type']:
                    command += " cert-type %s" % item
                    break
        if 'subject' in kwargs:
            command += " subject %s" % kwargs['subject']
        if 'issuer' in kwargs:
            command += " issuer %s" % kwargs['issuer']
        if 'serial_number' in kwargs:
            command += " serial-number %s" % kwargs['serial_number']
        if 'valid_from' in kwargs:
            command += " valid-from %s" % kwargs['valid_from']
        if 'valid_to' in kwargs:
            command += " valid-to %s" % kwargs['valid_to']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def syslog_tls_cert_request_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'syslog-tls-cert-request-create'
        if 'country' in kwargs:
            command += " country %s" % kwargs['country']
        if 'state' in kwargs:
            command += " state %s" % kwargs['state']
        if 'city' in kwargs:
            command += " city %s" % kwargs['city']
        if 'organization' in kwargs:
            command += " organization %s" % kwargs['organization']
        if 'organizational_unit' in kwargs:
            command += " organizational-unit %s" % kwargs['organizational_unit']
        if 'common_name' in kwargs:
            command += " common-name %s" % kwargs['common_name']

        return self.send_command(command)


    def syslog_tls_cert_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'syslog-tls-cert-show'
        if 'file_ca' in kwargs:
            command += " file-ca %s" % kwargs['file_ca']
        if 'file_cert' in kwargs:
            command += " file-cert %s" % kwargs['file_cert']
        if 'cert_ca' in kwargs:
            command += " cert-ca %s" % kwargs['cert_ca']
        if 'cert_switch' in kwargs:
            command += " cert-switch %s" % kwargs['cert_switch']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def system_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'system-settings-modify'
        if 'optimize_arps' in kwargs:
            if kwargs['optimize_arps']:
                command += " optimize-arps"
            else:
                command += " no-optimize-arps"
        if 'lldp' in kwargs:
            if kwargs['lldp']:
                command += " lldp"
            else:
                command += " no-lldp"
        if 'optimize_nd' in kwargs:
            if kwargs['optimize_nd']:
                command += " optimize-nd"
            else:
                command += " no-optimize-nd"
        if 'reactivate_mac' in kwargs:
            if kwargs['reactivate_mac']:
                command += " reactivate-mac"
            else:
                command += " no-reactivate-mac"
        if 'reactivate_vxlan_tunnel_mac' in kwargs:
            if kwargs['reactivate_vxlan_tunnel_mac']:
                command += " reactivate-vxlan-tunnel-mac"
            else:
                command += " no-reactivate-vxlan-tunnel-mac"
        if 'manage_unknown_unicast' in kwargs:
            if kwargs['manage_unknown_unicast']:
                command += " manage-unknown-unicast"
            else:
                command += " no-manage-unknown-unicast"
        if 'manage_broadcast' in kwargs:
            if kwargs['manage_broadcast']:
                command += " manage-broadcast"
            else:
                command += " no-manage-broadcast"
        if 'block_loops' in kwargs:
            if kwargs['block_loops']:
                command += " block-loops"
            else:
                command += " no-block-loops"
        if 'auto_trunk' in kwargs:
            if kwargs['auto_trunk']:
                command += " auto-trunk"
            else:
                command += " no-auto-trunk"
        if 'auto_host_bundle' in kwargs:
            if kwargs['auto_host_bundle']:
                command += " auto-host-bundle"
            else:
                command += " no-auto-host-bundle"
        if 'cluster_active_active_routing' in kwargs:
            if kwargs['cluster_active_active_routing']:
                command += " cluster-active-active-routing"
            else:
                command += " no-cluster-active-active-routing"
        if 'routing_over_vlags' in kwargs:
            if kwargs['routing_over_vlags']:
                command += " routing-over-vlags"
            else:
                command += " no-routing-over-vlags"
        if 'source_mac_miss' in kwargs:
            for item in [u'to-cpu', u'copy-to-cpu']:
                if item == kwargs['source_mac_miss']:
                    command += " source-mac-miss %s" % item
                    break
        if 'cpu_class_enable' in kwargs:
            if kwargs['cpu_class_enable']:
                command += " cpu-class-enable"
            else:
                command += " no-cpu-class-enable"

        return self.send_command(command)


    def system_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'system-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def system_stats_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'system-stats-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']

        return self.send_command(command)


    def system_stats_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'system-stats-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def system_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'system-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'paging' in kwargs:
            command += " paging %s" % kwargs['paging']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def tech_support_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'tech-support-show'

        return self.send_command(command)


    def traceroute(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'traceroute'

        return self.send_command(command)


    def transaction_node_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'transaction-node-show'
        if 'id' in kwargs:
            command += " id %s" % kwargs['id']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'local_tid' in kwargs:
            command += " local-tid %s" % kwargs['local_tid']
        if 'fabric_tid' in kwargs:
            command += " fabric-tid %s" % kwargs['fabric_tid']
        if 'cluster_tid' in kwargs:
            command += " cluster-tid %s" % kwargs['cluster_tid']
        if 'fabric_changeid' in kwargs:
            command += " fabric-changeid %s" % kwargs['fabric_changeid']
        if 'cluster_changeid' in kwargs:
            command += " cluster-changeid %s" % kwargs['cluster_changeid']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def transaction_rollback_to(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'transaction-rollback-to'
        if 'transaction_scope' in kwargs:
            for item in [u'local', u'cluster', u'fabric']:
                if item == kwargs['transaction_scope']:
                    command += " transaction-scope %s" % item
                    break
        if 'tid' in kwargs:
            command += " tid %s" % kwargs['tid']

        return self.send_command(command)


    def transaction_rollforward_to(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'transaction-rollforward-to'
        if 'transaction_scope' in kwargs:
            for item in [u'local', u'cluster', u'fabric']:
                if item == kwargs['transaction_scope']:
                    command += " transaction-scope %s" % item
                    break
        if 'tid' in kwargs:
            command += " tid %s" % kwargs['tid']

        return self.send_command(command)


    def transaction_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'transaction-settings-modify'
        if 'allow_offline_cluster_nodes' in kwargs:
            if kwargs['allow_offline_cluster_nodes']:
                command += " allow-offline-cluster-nodes"
            else:
                command += " no-allow-offline-cluster-nodes"
        if 'auto_recover' in kwargs:
            if kwargs['auto_recover']:
                command += " auto-recover"
            else:
                command += " no-auto-recover"

        return self.send_command(command)


    def transaction_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'transaction-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def transaction_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'transaction-show'
        if 'transaction_scope' in kwargs:
            for item in [u'local', u'cluster', u'fabric']:
                if item == kwargs['transaction_scope']:
                    command += " transaction-scope %s" % item
                    break
        if 'tid' in kwargs:
            command += " tid %s" % kwargs['tid']
        if 'changeid' in kwargs:
            command += " changeid %s" % kwargs['changeid']
        if 'start_tid' in kwargs:
            command += " start-tid %s" % kwargs['start_tid']
        if 'end_tid' in kwargs:
            command += " end-tid %s" % kwargs['end_tid']
        if 'remote_reserve' in kwargs:
            if kwargs['remote_reserve']:
                command += " remote-reserve"
            else:
                command += " remote-reserve-abort"
        if 'command' in kwargs:
            command += " command %s" % kwargs['command']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def trunk_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'trunk-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'egress_rate_limit' in kwargs:
            command += " egress-rate-limit %s" % kwargs['egress_rate_limit']
        if 'jumbo' in kwargs:
            if kwargs['jumbo']:
                command += " jumbo"
            else:
                command += " no-jumbo"
        if 'lacp_mode' in kwargs:
            for item in [u'off', u'passive', u'active']:
                if item == kwargs['lacp_mode']:
                    command += " lacp-mode %s" % item
                    break
        if 'lacp_timeout' in kwargs:
            for item in [u'slow', u'fast']:
                if item == kwargs['lacp_timeout']:
                    command += " lacp-timeout %s" % item
                    break
        if 'lacp_fallback' in kwargs:
            for item in [u'bundle', u'individual']:
                if item == kwargs['lacp_fallback']:
                    command += " lacp-fallback %s" % item
                    break
        if 'reflect' in kwargs:
            if kwargs['reflect']:
                command += " reflect"
            else:
                command += " no-reflect"
        if 'edge_switch' in kwargs:
            if kwargs['edge_switch']:
                command += " edge-switch"
            else:
                command += " no-edge-switch"
        if 'pause' in kwargs:
            if kwargs['pause']:
                command += " pause"
            else:
                command += " no-pause"
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'loopback' in kwargs:
            if kwargs['loopback']:
                command += " loopback"
            else:
                command += " no-loopback"
        if 'vxlan_termination' in kwargs:
            if kwargs['vxlan_termination']:
                command += " vxlan-termination"
            else:
                command += " no-vxlan-termination"
        if 'unknown_ucast_level' in kwargs:
            command += " unknown-ucast-level %s" % kwargs['unknown_ucast_level']
        if 'unknown_mcast_level' in kwargs:
            command += " unknown-mcast-level %s" % kwargs['unknown_mcast_level']
        if 'broadcast_level' in kwargs:
            command += " broadcast-level %s" % kwargs['broadcast_level']
        if 'port_mac_address' in kwargs:
            command += " port-mac-address %s" % kwargs['port_mac_address']
        if 'loop_vlans' in kwargs:
            command += " loop-vlans %s" % kwargs['loop_vlans']
        if 'routing' in kwargs:
            if kwargs['routing']:
                command += " routing"
            else:
                command += " no-routing"
        if 'host_enable' in kwargs:
            if kwargs['host_enable']:
                command += " host-enable"
            else:
                command += " host-disable"
        if 'local_switching' in kwargs:
            if kwargs['local_switching']:
                command += " local-switching"
            else:
                command += " no-local-switching"
        if 'fabric_guard' in kwargs:
            if kwargs['fabric_guard']:
                command += " fabric-guard"
            else:
                command += " no-fabric-guard"

        return self.send_command(command)


    def trunk_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'trunk-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'trunk_id' in kwargs:
            command += " trunk-id %s" % kwargs['trunk_id']

        return self.send_command(command)


    def trunk_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'trunk-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'trunk_id' in kwargs:
            command += " trunk-id %s" % kwargs['trunk_id']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'egress_rate_limit' in kwargs:
            command += " egress-rate-limit %s" % kwargs['egress_rate_limit']
        if 'jumbo' in kwargs:
            if kwargs['jumbo']:
                command += " jumbo"
            else:
                command += " no-jumbo"
        if 'lacp_mode' in kwargs:
            for item in [u'off', u'passive', u'active']:
                if item == kwargs['lacp_mode']:
                    command += " lacp-mode %s" % item
                    break
        if 'lacp_timeout' in kwargs:
            for item in [u'slow', u'fast']:
                if item == kwargs['lacp_timeout']:
                    command += " lacp-timeout %s" % item
                    break
        if 'lacp_fallback' in kwargs:
            for item in [u'bundle', u'individual']:
                if item == kwargs['lacp_fallback']:
                    command += " lacp-fallback %s" % item
                    break
        if 'reflect' in kwargs:
            if kwargs['reflect']:
                command += " reflect"
            else:
                command += " no-reflect"
        if 'edge_switch' in kwargs:
            if kwargs['edge_switch']:
                command += " edge-switch"
            else:
                command += " no-edge-switch"
        if 'pause' in kwargs:
            if kwargs['pause']:
                command += " pause"
            else:
                command += " no-pause"
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'loopback' in kwargs:
            if kwargs['loopback']:
                command += " loopback"
            else:
                command += " no-loopback"
        if 'vxlan_termination' in kwargs:
            if kwargs['vxlan_termination']:
                command += " vxlan-termination"
            else:
                command += " no-vxlan-termination"
        if 'unknown_ucast_level' in kwargs:
            command += " unknown-ucast-level %s" % kwargs['unknown_ucast_level']
        if 'unknown_mcast_level' in kwargs:
            command += " unknown-mcast-level %s" % kwargs['unknown_mcast_level']
        if 'broadcast_level' in kwargs:
            command += " broadcast-level %s" % kwargs['broadcast_level']
        if 'port_mac_address' in kwargs:
            command += " port-mac-address %s" % kwargs['port_mac_address']
        if 'loop_vlans' in kwargs:
            command += " loop-vlans %s" % kwargs['loop_vlans']
        if 'routing' in kwargs:
            if kwargs['routing']:
                command += " routing"
            else:
                command += " no-routing"
        if 'host_enable' in kwargs:
            if kwargs['host_enable']:
                command += " host-enable"
            else:
                command += " host-disable"
        if 'local_switching' in kwargs:
            if kwargs['local_switching']:
                command += " local-switching"
            else:
                command += " no-local-switching"
        if 'fabric_guard' in kwargs:
            if kwargs['fabric_guard']:
                command += " fabric-guard"
            else:
                command += " no-fabric-guard"

        return self.send_command(command)


    def trunk_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'trunk-show'
        if 'trunk_id' in kwargs:
            command += " trunk-id %s" % kwargs['trunk_id']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'egress_rate_limit' in kwargs:
            command += " egress-rate-limit %s" % kwargs['egress_rate_limit']
        if 'autoneg' in kwargs:
            if kwargs['autoneg']:
                command += " autoneg"
            else:
                command += " no-autoneg"
        if 'jumbo' in kwargs:
            if kwargs['jumbo']:
                command += " jumbo"
            else:
                command += " no-jumbo"
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'lacp_mode' in kwargs:
            for item in [u'off', u'passive', u'active']:
                if item == kwargs['lacp_mode']:
                    command += " lacp-mode %s" % item
                    break
        if 'lacp_timeout' in kwargs:
            for item in [u'slow', u'fast']:
                if item == kwargs['lacp_timeout']:
                    command += " lacp-timeout %s" % item
                    break
        if 'lacp_fallback' in kwargs:
            for item in [u'bundle', u'individual']:
                if item == kwargs['lacp_fallback']:
                    command += " lacp-fallback %s" % item
                    break
        if 'lacp_individual' in kwargs:
            command += " lacp-individual %s" % kwargs['lacp_individual']
        if 'reflect' in kwargs:
            if kwargs['reflect']:
                command += " reflect"
            else:
                command += " no-reflect"
        if 'edge_switch' in kwargs:
            if kwargs['edge_switch']:
                command += " edge-switch"
            else:
                command += " no-edge-switch"
        if 'pause' in kwargs:
            if kwargs['pause']:
                command += " pause"
            else:
                command += " no-pause"
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'loopback' in kwargs:
            if kwargs['loopback']:
                command += " loopback"
            else:
                command += " no-loopback"
        if 'vxlan_termination' in kwargs:
            if kwargs['vxlan_termination']:
                command += " vxlan-termination"
            else:
                command += " no-vxlan-termination"
        if 'mirror_only' in kwargs:
            if kwargs['mirror_only']:
                command += " mirror-only"
            else:
                command += " no-mirror-receive-only"
        if 'trunk_hw_id' in kwargs:
            command += " trunk-hw-id %s" % kwargs['trunk_hw_id']
        if 'send_port' in kwargs:
            command += " send-port %s" % kwargs['send_port']
        if 'loop_vlans' in kwargs:
            command += " loop-vlans %s" % kwargs['loop_vlans']
        if 'routing' in kwargs:
            if kwargs['routing']:
                command += " routing"
            else:
                command += " no-routing"
        if 'host_enable' in kwargs:
            if kwargs['host_enable']:
                command += " host-enable"
            else:
                command += " host-disable"
        if 'local_switching' in kwargs:
            if kwargs['local_switching']:
                command += " local-switching"
            else:
                command += " no-local-switching"
        if 'rhost' in kwargs:
            command += " rhost %s" % kwargs['rhost']
        if 'fabric_guard' in kwargs:
            if kwargs['fabric_guard']:
                command += " fabric-guard"
            else:
                command += " no-fabric-guard"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def tunnel_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'tunnel-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'cluster']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'local_ip' in kwargs:
            command += " local-ip %s" % kwargs['local_ip']
        if 'remote_ip' in kwargs:
            command += " remote-ip %s" % kwargs['remote_ip']
        if 'next_hop' in kwargs:
            command += " next-hop %s" % kwargs['next_hop']
        if 'next_hop_mac' in kwargs:
            command += " next-hop-mac %s" % kwargs['next_hop_mac']

        return self.send_command(command)


    def tunnel_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'tunnel-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def tunnel_history_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'tunnel-history-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']

        return self.send_command(command)


    def tunnel_history_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'tunnel-history-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def tunnel_history_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'tunnel-history-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'caller' in kwargs:
            for item in [u'vxlan', u'logger']:
                if item == kwargs['caller']:
                    command += " caller %s" % item
                    break
        if 'last_caller' in kwargs:
            for item in [u'vxlan', u'logger']:
                if item == kwargs['last_caller']:
                    command += " last-caller %s" % item
                    break
        if 'reason' in kwargs:
            for item in [u'save', u'restart', u'add', u'modify', u'remove', u'remove-all', u'add-nh', u'remove-nh']:
                if item == kwargs['reason']:
                    command += " reason %s" % item
                    break
        if 'remove_nh' in kwargs:
            command += " remove-nh"
        if 'nh_egress_id' in kwargs:
            if kwargs['nh_egress_id']:
                command += " nh-egress-id"
            else:
                command += " auto-tunnel"
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'scope' in kwargs:
            command += " scope %s" % kwargs['scope']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'type' in kwargs:
            for item in [u'ip-in-ip', u'vxlan', u'nvgre']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'local_ip' in kwargs:
            command += " local-ip %s" % kwargs['local_ip']
        if 'remote_ip' in kwargs:
            command += " remote-ip %s" % kwargs['remote_ip']
        if 'tunnel_if_name' in kwargs:
            command += " tunnel-if-name %s" % kwargs['tunnel_if_name']
        if 'next_hop' in kwargs:
            command += " next-hop %s" % kwargs['next_hop']
        if 'next_hop_mac' in kwargs:
            command += " next-hop-mac %s" % kwargs['next_hop_mac']
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'active' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['active']:
                    command += " active %s" % item
                    break
        if 'state' in kwargs:
            for item in [u'init', u'ok', u'error', u'update']:
                if item == kwargs['state']:
                    command += " state %s" % item
                    break
        if 'error' in kwargs:
            command += " error %s" % kwargs['error']
        if 'route_info' in kwargs:
            command += " route-info %s" % kwargs['route_info']
        if 'ecmp_group' in kwargs:
            command += " ecmp-group %s" % kwargs['ecmp_group']
        if 'using_vxlan_loopback' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['using_vxlan_loopback']:
                    command += " using-vxlan-loopback %s" % item
                    break
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'nh_egress_id' in kwargs:
            command += " nh-egress-id %s" % kwargs['nh_egress_id']
        if 'auto_tunnel' in kwargs:
            for item in [u'auto', u'static']:
                if item == kwargs['auto_tunnel']:
                    command += " auto-tunnel %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def tunnel_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'tunnel-show'
        if 'scope' in kwargs:
            for item in [u'local', u'cluster']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'type' in kwargs:
            for item in [u'ip-in-ip', u'vxlan', u'nvgre']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'local_ip' in kwargs:
            command += " local-ip %s" % kwargs['local_ip']
        if 'remote_ip' in kwargs:
            command += " remote-ip %s" % kwargs['remote_ip']
        if 'tunnel_if_name' in kwargs:
            command += " tunnel-if-name %s" % kwargs['tunnel_if_name']
        if 'next_hop' in kwargs:
            command += " next-hop %s" % kwargs['next_hop']
        if 'next_hop_mac' in kwargs:
            command += " next-hop-mac %s" % kwargs['next_hop_mac']
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'active' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['active']:
                    command += " active %s" % item
                    break
        if 'state' in kwargs:
            for item in [u'init', u'ok', u'error', u'update']:
                if item == kwargs['state']:
                    command += " state %s" % item
                    break
        if 'error' in kwargs:
            command += " error %s" % kwargs['error']
        if 'route_info' in kwargs:
            command += " route-info %s" % kwargs['route_info']
        if 'ecmp_group' in kwargs:
            command += " ecmp-group %s" % kwargs['ecmp_group']
        if 'using_vxlan_loopback' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['using_vxlan_loopback']:
                    command += " using-vxlan-loopback %s" % item
                    break
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'nh_egress_id' in kwargs:
            command += " nh-egress-id %s" % kwargs['nh_egress_id']
        if 'auto_tunnel' in kwargs:
            for item in [u'auto', u'static']:
                if item == kwargs['auto_tunnel']:
                    command += " auto-tunnel %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def tunnel_stats_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'tunnel-stats-clear'
        if 'tunnel_stats_clear' in kwargs:
            command += " tunnel-stats-clear"

        return self.send_command(command)


    def tunnel_stats_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'tunnel-stats-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']

        return self.send_command(command)


    def tunnel_stats_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'tunnel-stats-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def tunnel_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'tunnel-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'sw_inpkts' in kwargs:
            command += " sw-inpkts %s" % kwargs['sw_inpkts']
        if 'sw_opkts' in kwargs:
            command += " sw-opkts %s" % kwargs['sw_opkts']
        if 'sw_idrops' in kwargs:
            command += " sw-idrops %s" % kwargs['sw_idrops']
        if 'sw_odrops' in kwargs:
            command += " sw-odrops %s" % kwargs['sw_odrops']
        if 'counter' in kwargs:
            command += " counter %s" % kwargs['counter']
        if 'ibytes' in kwargs:
            command += " ibytes %s" % kwargs['ibytes']
        if 'idiscards' in kwargs:
            command += " idiscards %s" % kwargs['idiscards']
        if 'ierrs' in kwargs:
            command += " ierrs %s" % kwargs['ierrs']
        if 'obytes' in kwargs:
            command += " obytes %s" % kwargs['obytes']
        if 'odiscards' in kwargs:
            command += " odiscards %s" % kwargs['odiscards']
        if 'oerrs' in kwargs:
            command += " oerrs %s" % kwargs['oerrs']
        if 'mtu_errs' in kwargs:
            command += " mtu-errs %s" % kwargs['mtu_errs']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def tunnel_vxlan_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'tunnel-vxlan-add'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def tunnel_vxlan_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'tunnel-vxlan-remove'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def tunnel_vxlan_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'tunnel-vxlan-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def udf_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'udf-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break

        return self.send_command(command)


    def udf_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'udf-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def udf_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'udf-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def udf_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'udf-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def user_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'user-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']

        return self.send_command(command)


    def user_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'user-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def user_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'user-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']

        return self.send_command(command)


    def user_password_set(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'user-password-set'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'uid' in kwargs:
            command += " uid %s" % kwargs['uid']
        if 'type' in kwargs:
            for item in [u'netvisor', u'unix', u'tacacs', u'web-token', u'mfg']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break

        return self.send_command(command)


    def user_role_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'user-role-add'
        if 'user_name' in kwargs:
            command += " user-name %s" % kwargs['user_name']

        return self.send_command(command)


    def user_role_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'user-role-remove'
        if 'user_name' in kwargs:
            command += " user-name %s" % kwargs['user_name']

        return self.send_command(command)


    def user_role_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'user-role-show'
        if 'user_name' in kwargs:
            command += " user-name %s" % kwargs['user_name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def user_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'user-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'uid' in kwargs:
            command += " uid %s" % kwargs['uid']
        if 'type' in kwargs:
            for item in [u'netvisor', u'unix', u'tacacs', u'web-token', u'mfg']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vcenter_connection_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vcenter-connection-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']
        if 'user' in kwargs:
            command += " user %s" % kwargs['user']
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']

        return self.send_command(command)


    def vcenter_connection_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vcenter-connection-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vcenter_connection_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vcenter-connection-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']
        if 'user' in kwargs:
            command += " user %s" % kwargs['user']
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']

        return self.send_command(command)


    def vcenter_connection_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vcenter-connection-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']
        if 'user' in kwargs:
            command += " user %s" % kwargs['user']
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'state' in kwargs:
            for item in [u'init', u'ok', u'error']:
                if item == kwargs['state']:
                    command += " state %s" % item
                    break
        if 'connected_time' in kwargs:
            command += " connected-time %s" % kwargs['connected_time']
        if 'connection_error' in kwargs:
            command += " connection-error %s" % kwargs['connection_error']
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vflow_class_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-class-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break

        return self.send_command(command)


    def vflow_class_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-class-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vflow_class_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-class-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'type' in kwargs:
            for item in [u'system', u'user']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'cos' in kwargs:
            command += " cos %s" % kwargs['cos']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vflow_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'in_port' in kwargs:
            command += " in-port %s" % kwargs['in_port']
        if 'out_port' in kwargs:
            command += " out-port %s" % kwargs['out_port']
        if 'src_mac' in kwargs:
            command += " src-mac %s" % kwargs['src_mac']
        if 'src_mac_mask' in kwargs:
            command += " src-mac-mask %s" % kwargs['src_mac_mask']
        if 'dst_mac' in kwargs:
            command += " dst-mac %s" % kwargs['dst_mac']
        if 'dst_mac_mask' in kwargs:
            command += " dst-mac-mask %s" % kwargs['dst_mac_mask']
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'src_ip_mask' in kwargs:
            command += " src-ip-mask %s" % kwargs['src_ip_mask']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'dst_ip_mask' in kwargs:
            command += " dst-ip-mask %s" % kwargs['dst_ip_mask']
        if 'src_port' in kwargs:
            command += " src-port %s" % kwargs['src_port']
        if 'src_port_mask' in kwargs:
            command += " src-port-mask %s" % kwargs['src_port_mask']
        if 'dst_port' in kwargs:
            command += " dst-port %s" % kwargs['dst_port']
        if 'dst_port_mask' in kwargs:
            command += " dst-port-mask %s" % kwargs['dst_port_mask']
        if 'tos_start' in kwargs:
            command += " tos-start %s" % kwargs['tos_start']
        if 'tos_end' in kwargs:
            command += " tos-end %s" % kwargs['tos_end']
        if 'tos' in kwargs:
            command += " tos %s" % kwargs['tos']
        if 'ttl' in kwargs:
            command += " ttl %s" % kwargs['ttl']
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'tcp_flags' in kwargs:
            for item in [u'fin', u'syn', u'rst', u'push', u'ack', u'urg', u'ece', u'cwr']:
                if item == kwargs['tcp_flags']:
                    command += " tcp-flags %s" % item
                    break
        if 'bw_min' in kwargs:
            command += " bw-min %s" % kwargs['bw_min']
        if 'bw_max' in kwargs:
            command += " bw-max %s" % kwargs['bw_max']
        if 'burst_size' in kwargs:
            command += " burst-size %s" % kwargs['burst_size']
        if 'precedence' in kwargs:
            command += " precedence %s" % kwargs['precedence']
        if 'action_value' in kwargs:
            command += " action-value %s" % kwargs['action_value']
        if 'action_set_mac_value' in kwargs:
            command += " action-set-mac-value %s" % kwargs['action_set_mac_value']
        if 'action_to_ports_value' in kwargs:
            command += " action-to-ports-value %s" % kwargs['action_to_ports_value']
        if 'process_mirror' in kwargs:
            if kwargs['process_mirror']:
                command += " process-mirror"
            else:
                command += " no-process-mirror"
        if 'log_packets' in kwargs:
            if kwargs['log_packets']:
                command += " log-packets"
            else:
                command += " no-log-packets"
        if 'log_stats' in kwargs:
            if kwargs['log_stats']:
                command += " log-stats"
            else:
                command += " no-log-stats"
        if 'dur' in kwargs:
            command += " dur %s" % kwargs['dur']
        if 'metadata' in kwargs:
            command += " metadata %s" % kwargs['metadata']
        if 'transient' in kwargs:
            if kwargs['transient']:
                command += " transient"
            else:
                command += " no-transient"
        if 'vxlan_proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['vxlan_proto']:
                    command += " vxlan-proto %s" % item
                    break
        if 'set_src' in kwargs:
            command += " set-src %s" % kwargs['set_src']
        if 'set_dst' in kwargs:
            command += " set-dst %s" % kwargs['set_dst']
        if 'set_src_port' in kwargs:
            command += " set-src-port %s" % kwargs['set_src_port']
        if 'set_dst_port' in kwargs:
            command += " set-dst-port %s" % kwargs['set_dst_port']
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " no-enable"

        return self.send_command(command)


    def vflow_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vflow_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'in_port' in kwargs:
            command += " in-port %s" % kwargs['in_port']
        if 'src_mac' in kwargs:
            command += " src-mac %s" % kwargs['src_mac']
        if 'src_mac_mask' in kwargs:
            command += " src-mac-mask %s" % kwargs['src_mac_mask']
        if 'dst_mac' in kwargs:
            command += " dst-mac %s" % kwargs['dst_mac']
        if 'dst_mac_mask' in kwargs:
            command += " dst-mac-mask %s" % kwargs['dst_mac_mask']
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'src_ip_mask' in kwargs:
            command += " src-ip-mask %s" % kwargs['src_ip_mask']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'dst_ip_mask' in kwargs:
            command += " dst-ip-mask %s" % kwargs['dst_ip_mask']
        if 'src_port' in kwargs:
            command += " src-port %s" % kwargs['src_port']
        if 'src_port_mask' in kwargs:
            command += " src-port-mask %s" % kwargs['src_port_mask']
        if 'dst_port' in kwargs:
            command += " dst-port %s" % kwargs['dst_port']
        if 'dst_port_mask' in kwargs:
            command += " dst-port-mask %s" % kwargs['dst_port_mask']
        if 'tos_start' in kwargs:
            command += " tos-start %s" % kwargs['tos_start']
        if 'tos_end' in kwargs:
            command += " tos-end %s" % kwargs['tos_end']
        if 'tos' in kwargs:
            command += " tos %s" % kwargs['tos']
        if 'ttl' in kwargs:
            command += " ttl %s" % kwargs['ttl']
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'tcp_flags' in kwargs:
            for item in [u'fin', u'syn', u'rst', u'push', u'ack', u'urg', u'ece', u'cwr']:
                if item == kwargs['tcp_flags']:
                    command += " tcp-flags %s" % item
                    break
        if 'bw_min' in kwargs:
            command += " bw-min %s" % kwargs['bw_min']
        if 'bw_max' in kwargs:
            command += " bw-max %s" % kwargs['bw_max']
        if 'burst_size' in kwargs:
            command += " burst-size %s" % kwargs['burst_size']
        if 'precedence' in kwargs:
            command += " precedence %s" % kwargs['precedence']
        if 'action_value' in kwargs:
            command += " action-value %s" % kwargs['action_value']
        if 'action_set_mac_value' in kwargs:
            command += " action-set-mac-value %s" % kwargs['action_set_mac_value']
        if 'action_to_ports_value' in kwargs:
            command += " action-to-ports-value %s" % kwargs['action_to_ports_value']
        if 'process_mirror' in kwargs:
            if kwargs['process_mirror']:
                command += " process-mirror"
            else:
                command += " no-process-mirror"
        if 'log_packets' in kwargs:
            if kwargs['log_packets']:
                command += " log-packets"
            else:
                command += " no-log-packets"
        if 'log_stats' in kwargs:
            if kwargs['log_stats']:
                command += " log-stats"
            else:
                command += " no-log-stats"
        if 'set_src' in kwargs:
            command += " set-src %s" % kwargs['set_src']
        if 'set_dst' in kwargs:
            command += " set-dst %s" % kwargs['set_dst']
        if 'set_src_port' in kwargs:
            command += " set-src-port %s" % kwargs['set_src_port']
        if 'set_dst_port' in kwargs:
            command += " set-dst-port %s" % kwargs['set_dst_port']
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " no-enable"

        return self.send_command(command)


    def vflow_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-settings-modify'
        if 'enable_user_defined_flow' in kwargs:
            if kwargs['enable_user_defined_flow']:
                command += " enable-user-defined-flow"
            else:
                command += " no-enable-user-defined-flow"
        if 'vxlan_analytics' in kwargs:
            if kwargs['vxlan_analytics']:
                command += " vxlan-analytics"
            else:
                command += " no-vxlan-analytics"
        if 'inflight_vxlan_analytics' in kwargs:
            if kwargs['inflight_vxlan_analytics']:
                command += " inflight-vxlan-analytics"
            else:
                command += " no-inflight-vxlan-analytics"

        return self.send_command(command)


    def vflow_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vflow_share_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-share-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"

        return self.send_command(command)


    def vflow_share_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-share-show'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'share_path' in kwargs:
            command += " share-path %s" % kwargs['share_path']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vflow_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'nat_twice' in kwargs:
            if kwargs['nat_twice']:
                command += " nat-twice"
            else:
                command += " hog-violator"
        if 'hidden' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['hidden']:
                    command += " hidden %s" % item
                    break
        if 'in_port' in kwargs:
            command += " in-port %s" % kwargs['in_port']
        if 'out_port' in kwargs:
            command += " out-port %s" % kwargs['out_port']
        if 'src_mac' in kwargs:
            command += " src-mac %s" % kwargs['src_mac']
        if 'src_mac_mask' in kwargs:
            command += " src-mac-mask %s" % kwargs['src_mac_mask']
        if 'dst_mac' in kwargs:
            command += " dst-mac %s" % kwargs['dst_mac']
        if 'dst_mac_mask' in kwargs:
            command += " dst-mac-mask %s" % kwargs['dst_mac_mask']
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'src_ip_mask' in kwargs:
            command += " src-ip-mask %s" % kwargs['src_ip_mask']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'dst_ip_mask' in kwargs:
            command += " dst-ip-mask %s" % kwargs['dst_ip_mask']
        if 'src_port' in kwargs:
            command += " src-port %s" % kwargs['src_port']
        if 'src_port_mask' in kwargs:
            command += " src-port-mask %s" % kwargs['src_port_mask']
        if 'dst_port' in kwargs:
            command += " dst-port %s" % kwargs['dst_port']
        if 'dst_port_mask' in kwargs:
            command += " dst-port-mask %s" % kwargs['dst_port_mask']
        if 'tos_start' in kwargs:
            command += " tos-start %s" % kwargs['tos_start']
        if 'tos_end' in kwargs:
            command += " tos-end %s" % kwargs['tos_end']
        if 'tos' in kwargs:
            command += " tos %s" % kwargs['tos']
        if 'ttl' in kwargs:
            command += " ttl %s" % kwargs['ttl']
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'tcp_flags' in kwargs:
            for item in [u'fin', u'syn', u'rst', u'push', u'ack', u'urg', u'ece', u'cwr']:
                if item == kwargs['tcp_flags']:
                    command += " tcp-flags %s" % item
                    break
        if 'local_subnet' in kwargs:
            if kwargs['local_subnet']:
                command += " local-subnet"
            else:
                command += " no-local-subnet"
        if 'bw_min' in kwargs:
            command += " bw-min %s" % kwargs['bw_min']
        if 'bw_max' in kwargs:
            command += " bw-max %s" % kwargs['bw_max']
        if 'burst_size' in kwargs:
            command += " burst-size %s" % kwargs['burst_size']
        if 'precedence' in kwargs:
            command += " precedence %s" % kwargs['precedence']
        if 'action_value' in kwargs:
            command += " action-value %s" % kwargs['action_value']
        if 'action_set_mac_value' in kwargs:
            command += " action-set-mac-value %s" % kwargs['action_set_mac_value']
        if 'action_to_ports_value' in kwargs:
            command += " action-to-ports-value %s" % kwargs['action_to_ports_value']
        if 'process_mirror' in kwargs:
            if kwargs['process_mirror']:
                command += " process-mirror"
            else:
                command += " no-process-mirror"
        if 'log_packets' in kwargs:
            if kwargs['log_packets']:
                command += " log-packets"
            else:
                command += " no-log-packets"
        if 'log_stats' in kwargs:
            if kwargs['log_stats']:
                command += " log-stats"
            else:
                command += " no-log-stats"
        if 'dur' in kwargs:
            command += " dur %s" % kwargs['dur']
        if 'metadata' in kwargs:
            command += " metadata %s" % kwargs['metadata']
        if 'metadata_mask' in kwargs:
            command += " metadata-mask %s" % kwargs['metadata_mask']
        if 'transient' in kwargs:
            if kwargs['transient']:
                command += " transient"
            else:
                command += " no-transient"
        if 'vxlan_proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['vxlan_proto']:
                    command += " vxlan-proto %s" % item
                    break
        if 'hw_stats' in kwargs:
            if kwargs['hw_stats']:
                command += " hw-stats"
            else:
                command += " no-hw-stats"
        if 'set_src' in kwargs:
            command += " set-src %s" % kwargs['set_src']
        if 'set_dst' in kwargs:
            command += " set-dst %s" % kwargs['set_dst']
        if 'set_src_port' in kwargs:
            command += " set-src-port %s" % kwargs['set_src_port']
        if 'set_dst_port' in kwargs:
            command += " set-dst-port %s" % kwargs['set_dst_port']
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " no-enable"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vflow_snoop(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-snoop'
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'display_packet_bytes' in kwargs:
            command += " display-packet-bytes %s" % kwargs['display_packet_bytes']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'hog_violator' in kwargs:
            command += " hog-violator"
        if 'hidden' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['hidden']:
                    command += " hidden %s" % item
                    break
        if 'in_port' in kwargs:
            command += " in-port %s" % kwargs['in_port']
        if 'out_port' in kwargs:
            command += " out-port %s" % kwargs['out_port']
        if 'src_mac' in kwargs:
            command += " src-mac %s" % kwargs['src_mac']
        if 'src_mac_mask' in kwargs:
            command += " src-mac-mask %s" % kwargs['src_mac_mask']
        if 'dst_mac' in kwargs:
            command += " dst-mac %s" % kwargs['dst_mac']
        if 'dst_mac_mask' in kwargs:
            command += " dst-mac-mask %s" % kwargs['dst_mac_mask']
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'src_ip_mask' in kwargs:
            command += " src-ip-mask %s" % kwargs['src_ip_mask']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'dst_ip_mask' in kwargs:
            command += " dst-ip-mask %s" % kwargs['dst_ip_mask']
        if 'src_port' in kwargs:
            command += " src-port %s" % kwargs['src_port']
        if 'src_port_mask' in kwargs:
            command += " src-port-mask %s" % kwargs['src_port_mask']
        if 'dst_port' in kwargs:
            command += " dst-port %s" % kwargs['dst_port']
        if 'dst_port_mask' in kwargs:
            command += " dst-port-mask %s" % kwargs['dst_port_mask']
        if 'tos_start' in kwargs:
            command += " tos-start %s" % kwargs['tos_start']
        if 'tos_end' in kwargs:
            command += " tos-end %s" % kwargs['tos_end']
        if 'tos' in kwargs:
            command += " tos %s" % kwargs['tos']
        if 'ttl' in kwargs:
            command += " ttl %s" % kwargs['ttl']
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'tcp_flags' in kwargs:
            for item in [u'fin', u'syn', u'rst', u'push', u'ack', u'urg', u'ece', u'cwr']:
                if item == kwargs['tcp_flags']:
                    command += " tcp-flags %s" % item
                    break
        if 'local_subnet' in kwargs:
            if kwargs['local_subnet']:
                command += " local-subnet"
            else:
                command += " no-local-subnet"
        if 'bw_min' in kwargs:
            command += " bw-min %s" % kwargs['bw_min']
        if 'bw_max' in kwargs:
            command += " bw-max %s" % kwargs['bw_max']
        if 'burst_size' in kwargs:
            command += " burst-size %s" % kwargs['burst_size']
        if 'precedence' in kwargs:
            command += " precedence %s" % kwargs['precedence']
        if 'action_value' in kwargs:
            command += " action-value %s" % kwargs['action_value']
        if 'action_set_mac_value' in kwargs:
            command += " action-set-mac-value %s" % kwargs['action_set_mac_value']
        if 'action_to_ports_value' in kwargs:
            command += " action-to-ports-value %s" % kwargs['action_to_ports_value']
        if 'process_mirror' in kwargs:
            if kwargs['process_mirror']:
                command += " process-mirror"
            else:
                command += " no-process-mirror"
        if 'log_packets' in kwargs:
            if kwargs['log_packets']:
                command += " log-packets"
            else:
                command += " no-log-packets"
        if 'log_stats' in kwargs:
            if kwargs['log_stats']:
                command += " log-stats"
            else:
                command += " no-log-stats"
        if 'dur' in kwargs:
            command += " dur %s" % kwargs['dur']
        if 'metadata' in kwargs:
            command += " metadata %s" % kwargs['metadata']
        if 'metadata_mask' in kwargs:
            command += " metadata-mask %s" % kwargs['metadata_mask']
        if 'transient' in kwargs:
            if kwargs['transient']:
                command += " transient"
            else:
                command += " no-transient"
        if 'vxlan_proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['vxlan_proto']:
                    command += " vxlan-proto %s" % item
                    break
        if 'hw_stats' in kwargs:
            if kwargs['hw_stats']:
                command += " hw-stats"
            else:
                command += " no-hw-stats"
        if 'set_src' in kwargs:
            command += " set-src %s" % kwargs['set_src']
        if 'set_dst' in kwargs:
            command += " set-dst %s" % kwargs['set_dst']
        if 'set_src_port' in kwargs:
            command += " set-src-port %s" % kwargs['set_src_port']
        if 'set_dst_port' in kwargs:
            command += " set-dst-port %s" % kwargs['set_dst_port']
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " no-enable"

        return self.send_command(command)


    def vflow_stats_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-stats-clear'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'pkts' in kwargs:
            command += " pkts %s" % kwargs['pkts']
        if 'bytes' in kwargs:
            command += " bytes %s" % kwargs['bytes']
        if 'cpu_pkts' in kwargs:
            command += " cpu-pkts %s" % kwargs['cpu_pkts']
        if 'cpu_bytes' in kwargs:
            command += " cpu-bytes %s" % kwargs['cpu_bytes']
        if 'mismatches' in kwargs:
            command += " mismatches %s" % kwargs['mismatches']
        if 'drops' in kwargs:
            command += " drops %s" % kwargs['drops']
        if 'drop_bytes' in kwargs:
            command += " drop-bytes %s" % kwargs['drop_bytes']
        if 'policer_drops' in kwargs:
            command += " policer-drops %s" % kwargs['policer_drops']
        if 'policer_drop_bytes' in kwargs:
            command += " policer-drop-bytes %s" % kwargs['policer_drop_bytes']
        if 'cpu_tx_pkts' in kwargs:
            command += " cpu-tx-pkts %s" % kwargs['cpu_tx_pkts']
        if 'cpu_tx_bytes' in kwargs:
            command += " cpu-tx-bytes %s" % kwargs['cpu_tx_bytes']

        return self.send_command(command)


    def vflow_stats_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-stats-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']

        return self.send_command(command)


    def vflow_stats_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-stats-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vflow_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vflow_table_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-table-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'flow_max' in kwargs:
            command += " flow-max %s" % kwargs['flow_max']
        if 'flow_used' in kwargs:
            command += " flow-used %s" % kwargs['flow_used']
        if 'flow_tbl_slices' in kwargs:
            command += " flow-tbl-slices %s" % kwargs['flow_tbl_slices']
        if 'capability' in kwargs:
            for item in [u'none', u'set-metadata', u'match-metadata']:
                if item == kwargs['capability']:
                    command += " capability %s" % item
                    break
        if 'flow_tbl_bank' in kwargs:
            command += " flow-tbl-bank %s" % kwargs['flow_tbl_bank']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vlag_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlag-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'mode' in kwargs:
            for item in [u'active-standby', u'active-active']:
                if item == kwargs['mode']:
                    command += " mode %s" % item
                    break
        if 'lacp_mode' in kwargs:
            for item in [u'off', u'passive', u'active']:
                if item == kwargs['lacp_mode']:
                    command += " lacp-mode %s" % item
                    break
        if 'lacp_timeout' in kwargs:
            for item in [u'slow', u'fast']:
                if item == kwargs['lacp_timeout']:
                    command += " lacp-timeout %s" % item
                    break
        if 'lacp_fallback' in kwargs:
            for item in [u'bundle', u'individual']:
                if item == kwargs['lacp_fallback']:
                    command += " lacp-fallback %s" % item
                    break

        return self.send_command(command)


    def vlag_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlag-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vlag_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlag-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'lacp_mode' in kwargs:
            for item in [u'off', u'passive', u'active']:
                if item == kwargs['lacp_mode']:
                    command += " lacp-mode %s" % item
                    break
        if 'lacp_timeout' in kwargs:
            for item in [u'slow', u'fast']:
                if item == kwargs['lacp_timeout']:
                    command += " lacp-timeout %s" % item
                    break
        if 'lacp_fallback' in kwargs:
            for item in [u'bundle', u'individual']:
                if item == kwargs['lacp_fallback']:
                    command += " lacp-fallback %s" % item
                    break

        return self.send_command(command)


    def vlag_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlag-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'mode' in kwargs:
            for item in [u'active-standby', u'active-active']:
                if item == kwargs['mode']:
                    command += " mode %s" % item
                    break
        if 'status' in kwargs:
            for item in [u'peer-down', u'normal']:
                if item == kwargs['status']:
                    command += " status %s" % item
                    break
        if 'local_state' in kwargs:
            for item in [u'enabled', u'up', u'coming-up']:
                if item == kwargs['local_state']:
                    command += " local-state %s" % item
                    break
        if 'lacp_mode' in kwargs:
            for item in [u'off', u'passive', u'active']:
                if item == kwargs['lacp_mode']:
                    command += " lacp-mode %s" % item
                    break
        if 'lacp_timeout' in kwargs:
            for item in [u'slow', u'fast']:
                if item == kwargs['lacp_timeout']:
                    command += " lacp-timeout %s" % item
                    break
        if 'lacp_key' in kwargs:
            command += " lacp-key %s" % kwargs['lacp_key']
        if 'lacp_system_id' in kwargs:
            command += " lacp-system-id %s" % kwargs['lacp_system_id']
        if 'lacp_fallback' in kwargs:
            for item in [u'bundle', u'individual']:
                if item == kwargs['lacp_fallback']:
                    command += " lacp-fallback %s" % item
                    break
        if 'lacp_individual' in kwargs:
            command += " lacp-individual %s" % kwargs['lacp_individual']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vlan_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlan-create'
        if 'scope' in kwargs:
            for item in [u'local', u'cluster', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'vxlan_mode' in kwargs:
            for item in [u'standard', u'transparent']:
                if item == kwargs['vxlan_mode']:
                    command += " vxlan-mode %s" % item
                    break
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'stats' in kwargs:
            if kwargs['stats']:
                command += " stats"
            else:
                command += " no-stats"
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'untagged_ports' in kwargs:
            command += " untagged-ports %s" % kwargs['untagged_ports']
        if 'vlan_create' in kwargs:
            command += " vlan-create"
        if 'range' in kwargs:
            command += " range %s" % kwargs['range']
        if 'scope' in kwargs:
            for item in [u'local', u'cluster', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'vxlan_mode' in kwargs:
            for item in [u'standard', u'transparent']:
                if item == kwargs['vxlan_mode']:
                    command += " vxlan-mode %s" % item
                    break
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'stats' in kwargs:
            if kwargs['stats']:
                command += " stats"
            else:
                command += " no-stats"
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'untagged_ports' in kwargs:
            command += " untagged-ports %s" % kwargs['untagged_ports']

        return self.send_command(command)


    def vlan_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlan-delete'
        if 'vlan_delete' in kwargs:
            command += " vlan-delete"
        if 'range' in kwargs:
            command += " range %s" % kwargs['range']

        return self.send_command(command)


    def vlan_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlan-modify'
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']

        return self.send_command(command)


    def vlan_port_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlan-port-add'
        if 'vlan_range' in kwargs:
            command += " vlan-range %s" % kwargs['vlan_range']
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'untagged' in kwargs:
            if kwargs['untagged']:
                command += " untagged"
            else:
                command += " tagged"

        return self.send_command(command)


    def vlan_port_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlan-port-remove'
        if 'vlan_range' in kwargs:
            command += " vlan-range %s" % kwargs['vlan_range']
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']

        return self.send_command(command)


    def vlan_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlan-show'
        if 'range' in kwargs:
            command += " range %s" % kwargs['range']
        if 'type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'vxlan_type' in kwargs:
            for item in [u'user', u'fabric']:
                if item == kwargs['vxlan_type']:
                    command += " vxlan-type %s" % item
                    break
        if 'vxlan_mode' in kwargs:
            for item in [u'standard', u'transparent']:
                if item == kwargs['vxlan_mode']:
                    command += " vxlan-mode %s" % item
                    break
        if 'scope' in kwargs:
            for item in [u'local', u'cluster', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'active' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['active']:
                    command += " active %s" % item
                    break
        if 'stats' in kwargs:
            if kwargs['stats']:
                command += " stats"
            else:
                command += " no-stats"
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'untagged_ports' in kwargs:
            command += " untagged-ports %s" % kwargs['untagged_ports']
        if 'active_edge_ports' in kwargs:
            command += " active-edge-ports %s" % kwargs['active_edge_ports']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vlan_stats_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlan-stats-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']

        return self.send_command(command)


    def vlan_stats_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlan-stats-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vlan_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlan-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vlb_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'dedicated_vnet_service' in kwargs:
            if kwargs['dedicated_vnet_service']:
                command += " dedicated-vnet-service"
            else:
                command += " shared-vnet-service"
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"

        return self.send_command(command)


    def vlb_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vlb_group_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-group-add'
        if 'vlb_name' in kwargs:
            command += " vlb-name %s" % kwargs['vlb_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'topology' in kwargs:
            for item in [u'dsr', u'half-nat', u'full-nat']:
                if item == kwargs['topology']:
                    command += " topology %s" % item
                    break
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'algorithm' in kwargs:
            for item in [u'roundrobin', u'hash-ip', u'hash-ip-port', u'hash-ip-vip']:
                if item == kwargs['algorithm']:
                    command += " algorithm %s" % item
                    break
        if 'pmask' in kwargs:
            command += " pmask %s" % kwargs['pmask']
        if 'vip' in kwargs:
            command += " vip %s" % kwargs['vip']
        if 'proxy_src_ip' in kwargs:
            command += " proxy-src-ip %s" % kwargs['proxy_src_ip']
        if 'proxy_src_end_ip' in kwargs:
            command += " proxy-src-end-ip %s" % kwargs['proxy_src_end_ip']
        if 'proxy_src_netmask' in kwargs:
            command += " proxy-src-netmask %s" % kwargs['proxy_src_netmask']
        if 'start_port' in kwargs:
            command += " start-port %s" % kwargs['start_port']
        if 'end_port' in kwargs:
            command += " end-port %s" % kwargs['end_port']
        if 'group_enable' in kwargs:
            if kwargs['group_enable']:
                command += " group-enable"
            else:
                command += " no-group-enable"

        return self.send_command(command)


    def vlb_group_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-group-remove'
        if 'vlb_name' in kwargs:
            command += " vlb-name %s" % kwargs['vlb_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vlb_group_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-group-show'
        if 'vlb_name' in kwargs:
            command += " vlb-name %s" % kwargs['vlb_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'topology' in kwargs:
            for item in [u'dsr', u'half-nat', u'full-nat']:
                if item == kwargs['topology']:
                    command += " topology %s" % item
                    break
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'algorithm' in kwargs:
            for item in [u'roundrobin', u'hash-ip', u'hash-ip-port', u'hash-ip-vip']:
                if item == kwargs['algorithm']:
                    command += " algorithm %s" % item
                    break
        if 'pmask' in kwargs:
            command += " pmask %s" % kwargs['pmask']
        if 'vip' in kwargs:
            command += " vip %s" % kwargs['vip']
        if 'proxy_src_ip' in kwargs:
            command += " proxy-src-ip %s" % kwargs['proxy_src_ip']
        if 'proxy_src_end_ip' in kwargs:
            command += " proxy-src-end-ip %s" % kwargs['proxy_src_end_ip']
        if 'proxy_src_netmask' in kwargs:
            command += " proxy-src-netmask %s" % kwargs['proxy_src_netmask']
        if 'start_port' in kwargs:
            command += " start-port %s" % kwargs['start_port']
        if 'end_port' in kwargs:
            command += " end-port %s" % kwargs['end_port']
        if 'group_enable' in kwargs:
            if kwargs['group_enable']:
                command += " group-enable"
            else:
                command += " no-group-enable"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vlb_group_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-group-stats-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vlb_health_config_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-health-config-add'
        if 'vlb_name' in kwargs:
            command += " vlb-name %s" % kwargs['vlb_name']
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'type' in kwargs:
            for item in [u'tcp', u'udp', u'ping', u'http', u'https']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'timeout' in kwargs:
            command += " timeout %s" % kwargs['timeout']
        if 'attempt' in kwargs:
            command += " attempt %s" % kwargs['attempt']
        if 'interval' in kwargs:
            command += " interval %s" % kwargs['interval']

        return self.send_command(command)


    def vlb_health_config_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-health-config-remove'
        if 'vlb_name' in kwargs:
            command += " vlb-name %s" % kwargs['vlb_name']
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vlb_health_config_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-health-config-show'
        if 'vlb_name' in kwargs:
            command += " vlb-name %s" % kwargs['vlb_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'type' in kwargs:
            for item in [u'tcp', u'udp', u'ping', u'http', u'https']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'timeout' in kwargs:
            command += " timeout %s" % kwargs['timeout']
        if 'attempt' in kwargs:
            command += " attempt %s" % kwargs['attempt']
        if 'interval' in kwargs:
            command += " interval %s" % kwargs['interval']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vlb_health_status_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-health-status-show'
        if 'vlb_name' in kwargs:
            command += " vlb-name %s" % kwargs['vlb_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'id' in kwargs:
            command += " id %s" % kwargs['id']
        if 'status' in kwargs:
            command += " status %s" % kwargs['status']
        if 'fail' in kwargs:
            command += " fail %s" % kwargs['fail']
        if 'rtt' in kwargs:
            command += " rtt %s" % kwargs['rtt']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vlb_interface_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-interface-add'
        if 'vlb_name' in kwargs:
            command += " vlb-name %s" % kwargs['vlb_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def vlb_interface_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-interface-modify'
        if 'vlb_name' in kwargs:
            command += " vlb-name %s" % kwargs['vlb_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def vlb_interface_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-interface-remove'
        if 'vlb_name' in kwargs:
            command += " vlb-name %s" % kwargs['vlb_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']

        return self.send_command(command)


    def vlb_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-interface-show'
        if 'vlb_name' in kwargs:
            command += " vlb-name %s" % kwargs['vlb_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'vrrp_state' in kwargs:
            for item in [u'slave', u'master']:
                if item == kwargs['vrrp_state']:
                    command += " vrrp-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vlb_migrate(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-migrate'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vlb_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'gateway' in kwargs:
            command += " gateway %s" % kwargs['gateway']

        return self.send_command(command)


    def vlb_server_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-server-add'
        if 'vlb_name' in kwargs:
            command += " vlb-name %s" % kwargs['vlb_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']

        return self.send_command(command)


    def vlb_server_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-server-remove'
        if 'vlb_name' in kwargs:
            command += " vlb-name %s" % kwargs['vlb_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']

        return self.send_command(command)


    def vlb_server_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-server-show'
        if 'vlb_name' in kwargs:
            command += " vlb-name %s" % kwargs['vlb_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'server_enable' in kwargs:
            if kwargs['server_enable']:
                command += " server-enable"
            else:
                command += " no-server-enable"
        if 'id' in kwargs:
            command += " id %s" % kwargs['id']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vlb_server_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-server-stats-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'server' in kwargs:
            command += " server %s" % kwargs['server']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vlb_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vlb-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vle_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vle-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'tracking' in kwargs:
            if kwargs['tracking']:
                command += " tracking"
            else:
                command += " no-tracking"

        return self.send_command(command)


    def vle_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vle-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vle_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vle-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'tracking' in kwargs:
            if kwargs['tracking']:
                command += " tracking"
            else:
                command += " no-tracking"

        return self.send_command(command)


    def vle_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vle-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'status' in kwargs:
            for item in [u'unknown', u'remote-down', u'local-down', u'up', u'down']:
                if item == kwargs['status']:
                    command += " status %s" % item
                    break
        if 'tracking' in kwargs:
            if kwargs['tracking']:
                command += " tracking"
            else:
                command += " no-tracking"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vnet_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'cluster', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'public_vlans' in kwargs:
            command += " public-vlans %s" % kwargs['public_vlans']
        if 'managed_ports' in kwargs:
            command += " managed-ports %s" % kwargs['managed_ports']
        if 'shared_ports' in kwargs:
            command += " shared-ports %s" % kwargs['shared_ports']
        if 'config_admin' in kwargs:
            if kwargs['config_admin']:
                command += " config-admin"
            else:
                command += " no-config-admin"
        if 'create_vnet_mgr' in kwargs:
            if kwargs['create_vnet_mgr']:
                command += " create-vnet-mgr"
            else:
                command += " no-create-vnet-mgr"
        if 'vnet_mgr_name' in kwargs:
            command += " vnet-mgr-name %s" % kwargs['vnet_mgr_name']

        return self.send_command(command)


    def vnet_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vnet_manager_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-manager-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"

        return self.send_command(command)


    def vnet_manager_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-manager-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vnet_manager_interface_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-manager-interface-add'
        if 'vnet_manager_name' in kwargs:
            command += " vnet-manager-name %s" % kwargs['vnet_manager_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def vnet_manager_interface_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-manager-interface-modify'
        if 'vnet_manager_name' in kwargs:
            command += " vnet-manager-name %s" % kwargs['vnet_manager_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def vnet_manager_interface_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-manager-interface-remove'
        if 'vnet_manager_name' in kwargs:
            command += " vnet-manager-name %s" % kwargs['vnet_manager_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']

        return self.send_command(command)


    def vnet_manager_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-manager-interface-show'
        if 'vnet_manager_name' in kwargs:
            command += " vnet-manager-name %s" % kwargs['vnet_manager_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'vrrp_state' in kwargs:
            for item in [u'slave', u'master']:
                if item == kwargs['vrrp_state']:
                    command += " vrrp-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vnet_manager_migrate(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-manager-migrate'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vnet_manager_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-manager-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'gateway' in kwargs:
            command += " gateway %s" % kwargs['gateway']

        return self.send_command(command)


    def vnet_manager_service_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-manager-service-modify'
        if 'vnet_manager_name' in kwargs:
            command += " vnet-manager-name %s" % kwargs['vnet_manager_name']
        if 'if' in kwargs:
            command += " if %s" % kwargs['if']
        if 'ssh' in kwargs:
            if kwargs['ssh']:
                command += " ssh"
            else:
                command += " no-ssh"
        if 'web' in kwargs:
            if kwargs['web']:
                command += " web"
            else:
                command += " no-web"
        if 'web_ssl' in kwargs:
            if kwargs['web_ssl']:
                command += " web-ssl"
            else:
                command += " no-web-ssl"
        if 'web_ssl_port' in kwargs:
            command += " web-ssl-port %s" % kwargs['web_ssl_port']
        if 'web_port' in kwargs:
            command += " web-port %s" % kwargs['web_port']
        if 'net_api' in kwargs:
            if kwargs['net_api']:
                command += " net-api"
            else:
                command += " no-net-api"
        if 'icmp' in kwargs:
            if kwargs['icmp']:
                command += " icmp"
            else:
                command += " no-icmp"
        if 'ntp' in kwargs:
            if kwargs['ntp']:
                command += " ntp"
            else:
                command += " no-ntp"

        return self.send_command(command)


    def vnet_manager_service_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-manager-service-show'
        if 'vnet_manager_name' in kwargs:
            command += " vnet-manager-name %s" % kwargs['vnet_manager_name']
        if 'if' in kwargs:
            command += " if %s" % kwargs['if']
        if 'ssh' in kwargs:
            if kwargs['ssh']:
                command += " ssh"
            else:
                command += " no-ssh"
        if 'web' in kwargs:
            if kwargs['web']:
                command += " web"
            else:
                command += " no-web"
        if 'web_ssl' in kwargs:
            if kwargs['web_ssl']:
                command += " web-ssl"
            else:
                command += " no-web-ssl"
        if 'web_ssl_port' in kwargs:
            command += " web-ssl-port %s" % kwargs['web_ssl_port']
        if 'web_port' in kwargs:
            command += " web-port %s" % kwargs['web_port']
        if 'net_api' in kwargs:
            if kwargs['net_api']:
                command += " net-api"
            else:
                command += " no-net-api"
        if 'icmp' in kwargs:
            if kwargs['icmp']:
                command += " icmp"
            else:
                command += " no-icmp"
        if 'ntp' in kwargs:
            if kwargs['ntp']:
                command += " ntp"
            else:
                command += " no-ntp"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vnet_manager_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-manager-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'cluster', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vnet_manager_ssh_host_key_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-manager-ssh-host-key-show'
        if 'scope' in kwargs:
            for item in [u'local', u'cluster', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vnet_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'managed_ports' in kwargs:
            command += " managed-ports %s" % kwargs['managed_ports']
        if 'public_vlans' in kwargs:
            command += " public-vlans %s" % kwargs['public_vlans']
        if 'shared_ports' in kwargs:
            command += " shared-ports %s" % kwargs['shared_ports']
        if 'vnet_modify' in kwargs:
            command += " vnet-modify"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'managed_ports' in kwargs:
            command += " managed-ports %s" % kwargs['managed_ports']
        if 'public_vlans' in kwargs:
            command += " public-vlans %s" % kwargs['public_vlans']
        if 'shared_ports' in kwargs:
            command += " shared-ports %s" % kwargs['shared_ports']

        return self.send_command(command)


    def vnet_port_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-port-add'
        if 'vnet_name' in kwargs:
            command += " vnet-name %s" % kwargs['vnet_name']
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']

        return self.send_command(command)


    def vnet_port_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-port-remove'
        if 'vnet_name' in kwargs:
            command += " vnet-name %s" % kwargs['vnet_name']
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']

        return self.send_command(command)


    def vnet_public_vlans_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-public-vlans-modify'
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']

        return self.send_command(command)


    def vnet_public_vlans_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-public-vlans-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vnet_service_ping(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-service-ping'
        if 'host_ip' in kwargs:
            command += " host-ip %s" % kwargs['host_ip']
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'fragment' in kwargs:
            if kwargs['fragment']:
                command += " fragment"
            else:
                command += " no-fragment"
        if 'interval' in kwargs:
            command += " interval %s" % kwargs['interval']
        if 'outgoing_interface' in kwargs:
            command += " outgoing-interface %s" % kwargs['outgoing_interface']

        return self.send_command(command)


    def vnet_service_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-service-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vnet_service_traceroute(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-service-traceroute'
        if 'host_ip' in kwargs:
            command += " host-ip %s" % kwargs['host_ip']
        if 'resolve' in kwargs:
            if kwargs['resolve']:
                command += " resolve"
            else:
                command += " no-resolve"
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'probe_type' in kwargs:
            for item in [u'icmp-probe', u'udp-probe']:
                if item == kwargs['probe_type']:
                    command += " probe-type %s" % item
                    break
        if 'outgoing_interface' in kwargs:
            command += " outgoing-interface %s" % kwargs['outgoing_interface']

        return self.send_command(command)


    def vnet_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'cluster', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'public_vlans' in kwargs:
            command += " public-vlans %s" % kwargs['public_vlans']
        if 'managed_ports' in kwargs:
            command += " managed-ports %s" % kwargs['managed_ports']
        if 'shared_ports' in kwargs:
            command += " shared-ports %s" % kwargs['shared_ports']
        if 'vnet_mgr_name' in kwargs:
            command += " vnet-mgr-name %s" % kwargs['vnet_mgr_name']
        if 'global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['global']:
                    command += " global %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vnet_tunnel_network_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-tunnel-network-add'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']

        return self.send_command(command)


    def vnet_tunnel_network_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-tunnel-network-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']

        return self.send_command(command)


    def vnet_tunnel_network_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-tunnel-network-remove'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']

        return self.send_command(command)


    def vnet_tunnel_network_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-tunnel-network-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vport_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-create'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'num_ips' in kwargs:
            command += " num-ips %s" % kwargs['num_ips']
        if 'config_intf' in kwargs:
            command += " config-intf %s" % kwargs['config_intf']
        if 'svc_name' in kwargs:
            command += " svc-name %s" % kwargs['svc_name']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'entity' in kwargs:
            command += " entity %s" % kwargs['entity']
        if 'power' in kwargs:
            for item in [u'none', u'powered-off', u'powered-on', u'standby', u'suspended', u'unknown']:
                if item == kwargs['power']:
                    command += " power %s" % item
                    break
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'os' in kwargs:
            command += " os %s" % kwargs['os']
        if 'portgroup' in kwargs:
            command += " portgroup %s" % kwargs['portgroup']
        if 'pg_vlans' in kwargs:
            command += " pg-vlans %s" % kwargs['pg_vlans']
        if 'vswitch' in kwargs:
            command += " vswitch %s" % kwargs['vswitch']
        if 'vs_type' in kwargs:
            for item in [u'none', u'host-vs', u'distributed-vs', u'unknown']:
                if item == kwargs['vs_type']:
                    command += " vs-type %s" % item
                    break
        if 'hw_index' in kwargs:
            command += " hw-index %s" % kwargs['hw_index']
        if 'rt_if' in kwargs:
            command += " rt-if %s" % kwargs['rt_if']
        if 'hw_flags' in kwargs:
            for item in [u'invalid-vlan', u'invalid-port']:
                if item == kwargs['hw_flags']:
                    command += " hw-flags %s" % item
                    break

        return self.send_command(command)


    def vport_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-delete'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']

        return self.send_command(command)


    def vport_history_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-history-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'mac_move' in kwargs:
            if kwargs['mac_move']:
                command += " mac-move"
            else:
                command += " cluster-status"
        if 'vxlan_routing' in kwargs:
            command += " vxlan-routing"
        if 'user_delete' in kwargs:
            if kwargs['user_delete']:
                command += " user-delete"
            else:
                command += " done"
        if 'user_delete' in kwargs:
            if kwargs['user_delete']:
                command += " user-delete"
            else:
                command += " done"
        if 'rt_if' in kwargs:
            if kwargs['rt_if']:
                command += " rt-if"
            else:
                command += " hw-flags"
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'num_ips' in kwargs:
            command += " num-ips %s" % kwargs['num_ips']
        if 'config_intf' in kwargs:
            command += " config-intf %s" % kwargs['config_intf']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'svc_name' in kwargs:
            command += " svc-name %s" % kwargs['svc_name']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'entity' in kwargs:
            command += " entity %s" % kwargs['entity']
        if 'power' in kwargs:
            for item in [u'none', u'powered-off', u'powered-on', u'standby', u'suspended', u'unknown']:
                if item == kwargs['power']:
                    command += " power %s" % item
                    break
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'os' in kwargs:
            command += " os %s" % kwargs['os']
        if 'portgroup' in kwargs:
            command += " portgroup %s" % kwargs['portgroup']
        if 'pg_vlans' in kwargs:
            command += " pg-vlans %s" % kwargs['pg_vlans']
        if 'vswitch' in kwargs:
            command += " vswitch %s" % kwargs['vswitch']
        if 'vs_type' in kwargs:
            for item in [u'none', u'host-vs', u'distributed-vs', u'unknown']:
                if item == kwargs['vs_type']:
                    command += " vs-type %s" % item
                    break
        if 'config' in kwargs:
            for item in [u'none', u'owner', u'ip', u'port', u'hostname', u'entity', u'cpus', u'os']:
                if item == kwargs['config']:
                    command += " config %s" % item
                    break
        if 'rem_intf' in kwargs:
            command += " rem-intf %s" % kwargs['rem_intf']
        if 'rem_ports' in kwargs:
            command += " rem-ports %s" % kwargs['rem_ports']
        if 'peer_intf' in kwargs:
            command += " peer-intf %s" % kwargs['peer_intf']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_cluster_link' in kwargs:
            if kwargs['peer_port_not_cluster_link']:
                command += " peer-port-not-cluster-link"
            else:
                command += " sw-active"
        if 'vle_wait' in kwargs:
            if kwargs['vle_wait']:
                command += " vle-wait"
            else:
                command += " phy-down"
        if 'tunnel' in kwargs:
            command += " tunnel %s" % kwargs['tunnel']
        if 'hit' in kwargs:
            command += " hit %s" % kwargs['hit']
        if 'migrate' in kwargs:
            command += " migrate %s" % kwargs['migrate']
        if 'drops' in kwargs:
            command += " drops %s" % kwargs['drops']
        if 'hw_index' in kwargs:
            command += " hw-index %s" % kwargs['hw_index']
        if 'rt_if' in kwargs:
            command += " rt-if %s" % kwargs['rt_if']
        if 'hw_flags' in kwargs:
            for item in [u'invalid-vlan', u'invalid-port']:
                if item == kwargs['hw_flags']:
                    command += " hw-flags %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vport_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-modify'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'num_ips' in kwargs:
            command += " num-ips %s" % kwargs['num_ips']
        if 'config_intf' in kwargs:
            command += " config-intf %s" % kwargs['config_intf']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'svc_name' in kwargs:
            command += " svc-name %s" % kwargs['svc_name']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'entity' in kwargs:
            command += " entity %s" % kwargs['entity']
        if 'power' in kwargs:
            for item in [u'none', u'powered-off', u'powered-on', u'standby', u'suspended', u'unknown']:
                if item == kwargs['power']:
                    command += " power %s" % item
                    break
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'os' in kwargs:
            command += " os %s" % kwargs['os']
        if 'portgroup' in kwargs:
            command += " portgroup %s" % kwargs['portgroup']
        if 'pg_vlans' in kwargs:
            command += " pg-vlans %s" % kwargs['pg_vlans']
        if 'vswitch' in kwargs:
            command += " vswitch %s" % kwargs['vswitch']
        if 'vs_type' in kwargs:
            for item in [u'none', u'host-vs', u'distributed-vs', u'unknown']:
                if item == kwargs['vs_type']:
                    command += " vs-type %s" % item
                    break
        if 'config' in kwargs:
            for item in [u'none', u'owner', u'ip', u'port', u'hostname', u'entity', u'cpus', u'os']:
                if item == kwargs['config']:
                    command += " config %s" % item
                    break
        if 'hw_index' in kwargs:
            command += " hw-index %s" % kwargs['hw_index']
        if 'rt_if' in kwargs:
            command += " rt-if %s" % kwargs['rt_if']
        if 'hw_flags' in kwargs:
            for item in [u'invalid-vlan', u'invalid-port']:
                if item == kwargs['hw_flags']:
                    command += " hw-flags %s" % item
                    break

        return self.send_command(command)


    def vport_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-settings-modify'
        if 'vport_disk_space' in kwargs:
            command += " vport-disk-space %s" % kwargs['vport_disk_space']
        if 'stats_max_memory' in kwargs:
            command += " stats-max-memory %s" % kwargs['stats_max_memory']
        if 'stats_log_enable' in kwargs:
            if kwargs['stats_log_enable']:
                command += " stats-log-enable"
            else:
                command += " stats-log-disable"
        if 'stats_log_disk_space' in kwargs:
            command += " stats-log-disk-space %s" % kwargs['stats_log_disk_space']
        if 'system_stats_max_memory' in kwargs:
            command += " system-stats-max-memory %s" % kwargs['system_stats_max_memory']
        if 'system_stats_log_enable' in kwargs:
            if kwargs['system_stats_log_enable']:
                command += " system-stats-log-enable"
            else:
                command += " system-stats-log-disable"
        if 'system_stats_log_disk_space' in kwargs:
            command += " system-stats-log-disk-space %s" % kwargs['system_stats_log_disk_space']

        return self.send_command(command)


    def vport_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vport_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-show'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'num_ips' in kwargs:
            command += " num-ips %s" % kwargs['num_ips']
        if 'config_intf' in kwargs:
            command += " config-intf %s" % kwargs['config_intf']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'svc_name' in kwargs:
            command += " svc-name %s" % kwargs['svc_name']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'entity' in kwargs:
            command += " entity %s" % kwargs['entity']
        if 'power' in kwargs:
            for item in [u'none', u'powered-off', u'powered-on', u'standby', u'suspended', u'unknown']:
                if item == kwargs['power']:
                    command += " power %s" % item
                    break
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'os' in kwargs:
            command += " os %s" % kwargs['os']
        if 'portgroup' in kwargs:
            command += " portgroup %s" % kwargs['portgroup']
        if 'pg_vlans' in kwargs:
            command += " pg-vlans %s" % kwargs['pg_vlans']
        if 'vswitch' in kwargs:
            command += " vswitch %s" % kwargs['vswitch']
        if 'vs_type' in kwargs:
            for item in [u'none', u'host-vs', u'distributed-vs', u'unknown']:
                if item == kwargs['vs_type']:
                    command += " vs-type %s" % item
                    break
        if 'config' in kwargs:
            for item in [u'none', u'owner', u'ip', u'port', u'hostname', u'entity', u'cpus', u'os']:
                if item == kwargs['config']:
                    command += " config %s" % item
                    break
        if 'rem_intf' in kwargs:
            command += " rem-intf %s" % kwargs['rem_intf']
        if 'rem_ports' in kwargs:
            command += " rem-ports %s" % kwargs['rem_ports']
        if 'peer_intf' in kwargs:
            command += " peer-intf %s" % kwargs['peer_intf']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_cluster_link' in kwargs:
            if kwargs['peer_port_not_cluster_link']:
                command += " peer-port-not-cluster-link"
            else:
                command += " sw-active"
        if 'vle_wait' in kwargs:
            if kwargs['vle_wait']:
                command += " vle-wait"
            else:
                command += " phy-down"
        if 'tunnel' in kwargs:
            command += " tunnel %s" % kwargs['tunnel']
        if 'hit' in kwargs:
            command += " hit %s" % kwargs['hit']
        if 'migrate' in kwargs:
            command += " migrate %s" % kwargs['migrate']
        if 'drops' in kwargs:
            command += " drops %s" % kwargs['drops']
        if 'hw_index' in kwargs:
            command += " hw-index %s" % kwargs['hw_index']
        if 'rt_if' in kwargs:
            command += " rt-if %s" % kwargs['rt_if']
        if 'hw_flags' in kwargs:
            for item in [u'invalid-vlan', u'invalid-port']:
                if item == kwargs['hw_flags']:
                    command += " hw-flags %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vport_stats_report(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-stats-report'
        if 'ibytes' in kwargs:
            command += " ibytes %s" % kwargs['ibytes']
        if 'ipkts' in kwargs:
            command += " ipkts %s" % kwargs['ipkts']
        if 'idiscards' in kwargs:
            command += " idiscards %s" % kwargs['idiscards']
        if 'ierrs' in kwargs:
            command += " ierrs %s" % kwargs['ierrs']
        if 'obytes' in kwargs:
            command += " obytes %s" % kwargs['obytes']
        if 'opkts' in kwargs:
            command += " opkts %s" % kwargs['opkts']
        if 'odiscards' in kwargs:
            command += " odiscards %s" % kwargs['odiscards']
        if 'oerrs' in kwargs:
            command += " oerrs %s" % kwargs['oerrs']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'entity' in kwargs:
            command += " entity %s" % kwargs['entity']
        if 'vs_type' in kwargs:
            for item in [u'none', u'host-vs', u'distributed-vs', u'unknown']:
                if item == kwargs['vs_type']:
                    command += " vs-type %s" % item
                    break

        return self.send_command(command)


    def vport_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'entity' in kwargs:
            command += " entity %s" % kwargs['entity']
        if 'vs_type' in kwargs:
            for item in [u'none', u'host-vs', u'distributed-vs', u'unknown']:
                if item == kwargs['vs_type']:
                    command += " vs-type %s" % item
                    break
        if 'ibytes' in kwargs:
            command += " ibytes %s" % kwargs['ibytes']
        if 'ipkts' in kwargs:
            command += " ipkts %s" % kwargs['ipkts']
        if 'idiscards' in kwargs:
            command += " idiscards %s" % kwargs['idiscards']
        if 'ierrs' in kwargs:
            command += " ierrs %s" % kwargs['ierrs']
        if 'obytes' in kwargs:
            command += " obytes %s" % kwargs['obytes']
        if 'opkts' in kwargs:
            command += " opkts %s" % kwargs['opkts']
        if 'odiscards' in kwargs:
            command += " odiscards %s" % kwargs['odiscards']
        if 'oerrs' in kwargs:
            command += " oerrs %s" % kwargs['oerrs']
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vport_system_stats_report(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-system-stats-report'
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'used_mem_val' in kwargs:
            command += " used-mem-val %s" % kwargs['used_mem_val']
        if 'used_swap_val' in kwargs:
            command += " used-swap-val %s" % kwargs['used_swap_val']
        if 'paging' in kwargs:
            command += " paging %s" % kwargs['paging']

        return self.send_command(command)


    def vport_system_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-system-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'paging' in kwargs:
            command += " paging %s" % kwargs['paging']
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrg_client_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrg-client-show'
        if 'vrg_name' in kwargs:
            command += " vrg-name %s" % kwargs['vrg_name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrg_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrg-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'shared_ports' in kwargs:
            command += " shared-ports %s" % kwargs['shared_ports']
        if 'num_flows' in kwargs:
            command += " num-flows %s" % kwargs['num_flows']
        if 'data_bw_min' in kwargs:
            command += " data-bw-min %s" % kwargs['data_bw_min']
        if 'data_bw_max' in kwargs:
            command += " data-bw-max %s" % kwargs['data_bw_max']
        if 'storage_bw' in kwargs:
            command += " storage-bw %s" % kwargs['storage_bw']
        if 'service_bw' in kwargs:
            command += " service-bw %s" % kwargs['service_bw']
        if 'service_bw' in kwargs:
            command += " service-bw"

        return self.send_command(command)


    def vrg_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrg-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vrg_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrg-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'shared_ports' in kwargs:
            command += " shared-ports %s" % kwargs['shared_ports']
        if 'num_flows' in kwargs:
            command += " num-flows %s" % kwargs['num_flows']
        if 'data_bw_min' in kwargs:
            command += " data-bw-min %s" % kwargs['data_bw_min']
        if 'data_bw_max' in kwargs:
            command += " data-bw-max %s" % kwargs['data_bw_max']
        if 'service_bw' in kwargs:
            command += " service-bw"

        return self.send_command(command)


    def vrg_port_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrg-port-add'
        if 'vrg_name' in kwargs:
            command += " vrg-name %s" % kwargs['vrg_name']
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']

        return self.send_command(command)


    def vrg_port_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrg-port-remove'
        if 'vrg_name' in kwargs:
            command += " vrg-name %s" % kwargs['vrg_name']
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']

        return self.send_command(command)


    def vrg_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrg-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'shared_ports' in kwargs:
            command += " shared-ports %s" % kwargs['shared_ports']
        if 'num_flows' in kwargs:
            command += " num-flows %s" % kwargs['num_flows']
        if 'data_bw_min' in kwargs:
            command += " data-bw-min %s" % kwargs['data_bw_min']
        if 'data_bw_max' in kwargs:
            command += " data-bw-max %s" % kwargs['data_bw_max']
        if 'storage_bw' in kwargs:
            command += " storage-bw %s" % kwargs['storage_bw']
        if 'service_bw' in kwargs:
            command += " service-bw %s" % kwargs['service_bw']
        if 'service_bw' in kwargs:
            command += " service-bw"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_bfd_neighbor_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-bfd-neighbor-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'out_addr' in kwargs:
            command += " out-addr %s" % kwargs['out_addr']
        if 'neighbor' in kwargs:
            command += " neighbor %s" % kwargs['neighbor']
        if 'local_discr' in kwargs:
            command += " local-discr %s" % kwargs['local_discr']
        if 'remote_discr' in kwargs:
            command += " remote-discr %s" % kwargs['remote_discr']
        if 'multiplier' in kwargs:
            command += " multiplier %s" % kwargs['multiplier']
        if 'state' in kwargs:
            for item in [u'unknown', u'admin-down', u'down', u'init', u'up']:
                if item == kwargs['state']:
                    command += " state %s" % item
                    break
        if 'interface' in kwargs:
            command += " interface %s" % kwargs['interface']
        if 'flap_count' in kwargs:
            command += " flap-count %s" % kwargs['flap_count']
        if 'remote_router' in kwargs:
            command += " remote-router %s" % kwargs['remote_router']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_bgp_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-bgp-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'neighbor' in kwargs:
            command += " neighbor %s" % kwargs['neighbor']
        if 'next_hop_self' in kwargs:
            if kwargs['next_hop_self']:
                command += " next-hop-self"
            else:
                command += " no-next-hop-self"
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']
        if 'route_reflector_client' in kwargs:
            if kwargs['route_reflector_client']:
                command += " route-reflector-client"
            else:
                command += " no-route-reflector-client"
        if 'override_capability' in kwargs:
            if kwargs['override_capability']:
                command += " override-capability"
            else:
                command += " no-override-capability"
        if 'soft_reconfig_inbound' in kwargs:
            if kwargs['soft_reconfig_inbound']:
                command += " soft-reconfig-inbound"
            else:
                command += " no-soft-reconfig-inbound"
        if 'max_prefix' in kwargs:
            command += " max-prefix %s" % kwargs['max_prefix']
        if 'max_prefix_warn_only' in kwargs:
            if kwargs['max_prefix_warn_only']:
                command += " max-prefix-warn-only"
            else:
                command += " no-max-prefix-warn-only"
        if 'bfd' in kwargs:
            if kwargs['bfd']:
                command += " bfd"
            else:
                command += " no-bfd"
        if 'bfd_multihop' in kwargs:
            if kwargs['bfd_multihop']:
                command += " bfd-multihop"
            else:
                command += " no-bfd-multihop"
        if 'weight' in kwargs:
            command += " weight %s" % kwargs['weight']
        if 'default_originate' in kwargs:
            if kwargs['default_originate']:
                command += " default-originate"
            else:
                command += " no-default-originate"
        if 'allowas_in' in kwargs:
            if kwargs['allowas_in']:
                command += " allowas-in"
            else:
                command += " no-allowas-in"

        return self.send_command(command)


    def vrouter_bgp_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-bgp-modify'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'neighbor' in kwargs:
            command += " neighbor %s" % kwargs['neighbor']
        if 'next_hop_self' in kwargs:
            if kwargs['next_hop_self']:
                command += " next-hop-self"
            else:
                command += " no-next-hop-self"
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']
        if 'route_reflector_client' in kwargs:
            if kwargs['route_reflector_client']:
                command += " route-reflector-client"
            else:
                command += " no-route-reflector-client"
        if 'override_capability' in kwargs:
            if kwargs['override_capability']:
                command += " override-capability"
            else:
                command += " no-override-capability"
        if 'soft_reconfig_inbound' in kwargs:
            if kwargs['soft_reconfig_inbound']:
                command += " soft-reconfig-inbound"
            else:
                command += " no-soft-reconfig-inbound"
        if 'max_prefix' in kwargs:
            command += " max-prefix %s" % kwargs['max_prefix']
        if 'max_prefix_warn_only' in kwargs:
            if kwargs['max_prefix_warn_only']:
                command += " max-prefix-warn-only"
            else:
                command += " no-max-prefix-warn-only"
        if 'bfd' in kwargs:
            if kwargs['bfd']:
                command += " bfd"
            else:
                command += " no-bfd"
        if 'bfd_multihop' in kwargs:
            if kwargs['bfd_multihop']:
                command += " bfd-multihop"
            else:
                command += " no-bfd-multihop"
        if 'weight' in kwargs:
            command += " weight %s" % kwargs['weight']
        if 'default_originate' in kwargs:
            if kwargs['default_originate']:
                command += " default-originate"
            else:
                command += " no-default-originate"
        if 'allowas_in' in kwargs:
            if kwargs['allowas_in']:
                command += " allowas-in"
            else:
                command += " no-allowas-in"

        return self.send_command(command)


    def vrouter_bgp_neighbor_reset(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-bgp-neighbor-reset'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'neighbor' in kwargs:
            command += " neighbor %s" % kwargs['neighbor']

        return self.send_command(command)


    def vrouter_bgp_neighbor_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-bgp-neighbor-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'neighbor' in kwargs:
            command += " neighbor %s" % kwargs['neighbor']
        if 'ver' in kwargs:
            command += " ver %s" % kwargs['ver']
        if 'remote_as' in kwargs:
            command += " remote-as %s" % kwargs['remote_as']
        if 'tblver' in kwargs:
            command += " tblver %s" % kwargs['tblver']
        if 'remote_router' in kwargs:
            command += " remote-router %s" % kwargs['remote_router']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_bgp_network_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-bgp-network-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']

        return self.send_command(command)


    def vrouter_bgp_network_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-bgp-network-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']

        return self.send_command(command)


    def vrouter_bgp_network_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-bgp-network-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_bgp_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-bgp-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'neighbor' in kwargs:
            command += " neighbor %s" % kwargs['neighbor']

        return self.send_command(command)


    def vrouter_bgp_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-bgp-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'neighbor' in kwargs:
            command += " neighbor %s" % kwargs['neighbor']
        if 'next_hop_self' in kwargs:
            if kwargs['next_hop_self']:
                command += " next-hop-self"
            else:
                command += " no-next-hop-self"
        if 'route_reflector_client' in kwargs:
            if kwargs['route_reflector_client']:
                command += " route-reflector-client"
            else:
                command += " no-route-reflector-client"
        if 'override_capability' in kwargs:
            if kwargs['override_capability']:
                command += " override-capability"
            else:
                command += " no-override-capability"
        if 'soft_reconfig_inbound' in kwargs:
            if kwargs['soft_reconfig_inbound']:
                command += " soft-reconfig-inbound"
            else:
                command += " no-soft-reconfig-inbound"
        if 'max_prefix' in kwargs:
            command += " max-prefix %s" % kwargs['max_prefix']
        if 'max_prefix_warn_only' in kwargs:
            if kwargs['max_prefix_warn_only']:
                command += " max-prefix-warn-only"
            else:
                command += " no-max-prefix-warn-only"
        if 'bfd' in kwargs:
            if kwargs['bfd']:
                command += " bfd"
            else:
                command += " no-bfd"
        if 'bfd_multihop' in kwargs:
            if kwargs['bfd_multihop']:
                command += " bfd-multihop"
            else:
                command += " no-bfd-multihop"
        if 'weight' in kwargs:
            command += " weight %s" % kwargs['weight']
        if 'default_originate' in kwargs:
            if kwargs['default_originate']:
                command += " default-originate"
            else:
                command += " no-default-originate"
        if 'allowas_in' in kwargs:
            if kwargs['allowas_in']:
                command += " allowas-in"
            else:
                command += " no-allowas-in"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_cached_routes_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-cached-routes-show'
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'vxlan' in kwargs:
            command += " vxlan %s" % kwargs['vxlan']
        if 'nexthop' in kwargs:
            command += " nexthop %s" % kwargs['nexthop']
        if 'age_in_seconds' in kwargs:
            command += " age-in-seconds %s" % kwargs['age_in_seconds']
        if 'index' in kwargs:
            command += " index %s" % kwargs['index']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'dedicated_vnet_service' in kwargs:
            if kwargs['dedicated_vnet_service']:
                command += " dedicated-vnet-service"
            else:
                command += " shared-vnet-service"
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'router_type' in kwargs:
            for item in [u'software', u'hardware']:
                if item == kwargs['router_type']:
                    command += " router-type %s" % item
                    break
        if 'cluster_active_active_routing' in kwargs:
            if kwargs['cluster_active_active_routing']:
                command += " cluster-active-active-routing"
            else:
                command += " no-cluster-active-active-routing"
        if 'router_id' in kwargs:
            command += " router-id %s" % kwargs['router_id']
        if 'proto_multi' in kwargs:
            for item in [u'none', u'dvmrp', u'pim-ssm']:
                if item == kwargs['proto_multi']:
                    command += " proto-multi %s" % item
                    break
        if 'bgp_redistribute' in kwargs:
            for item in [u'static', u'connected', u'rip', u'ospf']:
                if item == kwargs['bgp_redistribute']:
                    command += " bgp-redistribute %s" % item
                    break
        if 'bgp_redist_static_metric' in kwargs:
            command += " bgp-redist-static-metric %s" % kwargs['bgp_redist_static_metric']
        if 'bgp_redist_connected_metric' in kwargs:
            command += " bgp-redist-connected-metric %s" % kwargs['bgp_redist_connected_metric']
        if 'bgp_redist_rip_metric' in kwargs:
            command += " bgp-redist-rip-metric %s" % kwargs['bgp_redist_rip_metric']
        if 'bgp_redist_ospf_metric' in kwargs:
            command += " bgp-redist-ospf-metric %s" % kwargs['bgp_redist_ospf_metric']
        if 'bgp_cluster_id' in kwargs:
            command += " bgp-cluster-id %s" % kwargs['bgp_cluster_id']
        if 'bgp_max_paths' in kwargs:
            command += " bgp-max-paths %s" % kwargs['bgp_max_paths']
        if 'bgp_ibgp_multipath' in kwargs:
            command += " bgp-ibgp-multipath %s" % kwargs['bgp_ibgp_multipath']
        if 'bgp_bestpath_as_path' in kwargs:
            for item in [u'ignore', u'multipath-relax']:
                if item == kwargs['bgp_bestpath_as_path']:
                    command += " bgp-bestpath-as-path %s" % item
                    break
        if 'bgp_dampening' in kwargs:
            if kwargs['bgp_dampening']:
                command += " bgp-dampening"
            else:
                command += " no-bgp-dampening"
        if 'bgp_graceful_restart' in kwargs:
            if kwargs['bgp_graceful_restart']:
                command += " bgp-graceful-restart"
            else:
                command += " no-bgp-graceful-restart"
        if 'rip_redistribute' in kwargs:
            for item in [u'static', u'connected', u'ospf', u'bgp']:
                if item == kwargs['rip_redistribute']:
                    command += " rip-redistribute %s" % item
                    break
        if 'ospf_redistribute' in kwargs:
            for item in [u'static', u'connected', u'rip', u'bgp']:
                if item == kwargs['ospf_redistribute']:
                    command += " ospf-redistribute %s" % item
                    break
        if 'ospf_redist_static_metric' in kwargs:
            command += " ospf-redist-static-metric %s" % kwargs['ospf_redist_static_metric']
        if 'ospf_redist_connected_metric' in kwargs:
            command += " ospf-redist-connected-metric %s" % kwargs['ospf_redist_connected_metric']
        if 'ospf_redist_rip_metric' in kwargs:
            command += " ospf-redist-rip-metric %s" % kwargs['ospf_redist_rip_metric']
        if 'ospf_redist_bgp_metric' in kwargs:
            command += " ospf-redist-bgp-metric %s" % kwargs['ospf_redist_bgp_metric']
        if 'ospf_stub_router_on_startup' in kwargs:
            if kwargs['ospf_stub_router_on_startup']:
                command += " ospf-stub-router-on-startup"
            else:
                command += " no-ospf-stub-router-on-startup"
        if 'ospf_bfd_all_if' in kwargs:
            if kwargs['ospf_bfd_all_if']:
                command += " ospf-bfd-all-if"
            else:
                command += " no-ospf-bfd-all-if"
        if 'vrrp_track_port' in kwargs:
            command += " vrrp-track-port %s" % kwargs['vrrp_track_port']
        if 'cmd' in kwargs:
            command += " cmd %s" % kwargs['cmd']
        if 'vrouter_create' in kwargs:
            command += " vrouter-create"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'router_type' in kwargs:
            command += " router-type %s" % kwargs['router_type']
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'cluster_active_active_routing' in kwargs:
            if kwargs['cluster_active_active_routing']:
                command += " cluster-active-active-routing"
            else:
                command += " no-cluster-active-active-routing"
        if 'hw_vrrp_id' in kwargs:
            command += " hw-vrrp-id %s" % kwargs['hw_vrrp_id']
        if 'router_id' in kwargs:
            command += " router-id %s" % kwargs['router_id']
        if 'proto_multi' in kwargs:
            for item in [u'none', u'dvmrp', u'pim-ssm']:
                if item == kwargs['proto_multi']:
                    command += " proto-multi %s" % item
                    break
        if 'bgp_redistribute' in kwargs:
            for item in [u'static', u'connected', u'rip', u'ospf']:
                if item == kwargs['bgp_redistribute']:
                    command += " bgp-redistribute %s" % item
                    break
        if 'bgp_redist_static_metric' in kwargs:
            command += " bgp-redist-static-metric %s" % kwargs['bgp_redist_static_metric']
        if 'bgp_redist_connected_metric' in kwargs:
            command += " bgp-redist-connected-metric %s" % kwargs['bgp_redist_connected_metric']
        if 'bgp_redist_rip_metric' in kwargs:
            command += " bgp-redist-rip-metric %s" % kwargs['bgp_redist_rip_metric']
        if 'bgp_redist_ospf_metric' in kwargs:
            command += " bgp-redist-ospf-metric %s" % kwargs['bgp_redist_ospf_metric']
        if 'bgp_cluster_id' in kwargs:
            command += " bgp-cluster-id %s" % kwargs['bgp_cluster_id']
        if 'bgp_max_paths' in kwargs:
            command += " bgp-max-paths %s" % kwargs['bgp_max_paths']
        if 'bgp_ibgp_multipath' in kwargs:
            command += " bgp-ibgp-multipath %s" % kwargs['bgp_ibgp_multipath']
        if 'bgp_bestpath_as_path' in kwargs:
            for item in [u'ignore', u'multipath-relax']:
                if item == kwargs['bgp_bestpath_as_path']:
                    command += " bgp-bestpath-as-path %s" % item
                    break
        if 'bgp_dampening' in kwargs:
            if kwargs['bgp_dampening']:
                command += " bgp-dampening"
            else:
                command += " no-bgp-dampening"
        if 'bgp_graceful_restart' in kwargs:
            if kwargs['bgp_graceful_restart']:
                command += " bgp-graceful-restart"
            else:
                command += " no-bgp-graceful-restart"
        if 'rip_redistribute' in kwargs:
            for item in [u'static', u'connected', u'ospf', u'bgp']:
                if item == kwargs['rip_redistribute']:
                    command += " rip-redistribute %s" % item
                    break
        if 'ospf_redistribute' in kwargs:
            for item in [u'static', u'connected', u'rip', u'bgp']:
                if item == kwargs['ospf_redistribute']:
                    command += " ospf-redistribute %s" % item
                    break
        if 'ospf_redist_static_metric' in kwargs:
            command += " ospf-redist-static-metric %s" % kwargs['ospf_redist_static_metric']
        if 'ospf_redist_connected_metric' in kwargs:
            command += " ospf-redist-connected-metric %s" % kwargs['ospf_redist_connected_metric']
        if 'ospf_redist_rip_metric' in kwargs:
            command += " ospf-redist-rip-metric %s" % kwargs['ospf_redist_rip_metric']
        if 'ospf_redist_bgp_metric' in kwargs:
            command += " ospf-redist-bgp-metric %s" % kwargs['ospf_redist_bgp_metric']
        if 'ospf_stub_router_on_startup' in kwargs:
            if kwargs['ospf_stub_router_on_startup']:
                command += " ospf-stub-router-on-startup"
            else:
                command += " no-ospf-stub-router-on-startup"
        if 'ospf_bfd_all_if' in kwargs:
            if kwargs['ospf_bfd_all_if']:
                command += " ospf-bfd-all-if"
            else:
                command += " no-ospf-bfd-all-if"
        if 'vrrp_track_port' in kwargs:
            command += " vrrp-track-port %s" % kwargs['vrrp_track_port']
        if 'cmd' in kwargs:
            command += " cmd %s" % kwargs['cmd']
        if 'vrouter_create' in kwargs:
            command += " vrouter-create"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'router_type' in kwargs:
            command += " router-type %s" % kwargs['router_type']
        if 'dedicated_vnet_service' in kwargs:
            if kwargs['dedicated_vnet_service']:
                command += " dedicated-vnet-service"
            else:
                command += " shared-vnet-service"
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'cluster_active_active_routing' in kwargs:
            if kwargs['cluster_active_active_routing']:
                command += " cluster-active-active-routing"
            else:
                command += " no-cluster-active-active-routing"
        if 'router_id' in kwargs:
            command += " router-id %s" % kwargs['router_id']
        if 'proto_multi' in kwargs:
            for item in [u'none', u'dvmrp', u'pim-ssm']:
                if item == kwargs['proto_multi']:
                    command += " proto-multi %s" % item
                    break
        if 'bgp_redistribute' in kwargs:
            for item in [u'static', u'connected', u'rip', u'ospf']:
                if item == kwargs['bgp_redistribute']:
                    command += " bgp-redistribute %s" % item
                    break
        if 'bgp_redist_static_metric' in kwargs:
            command += " bgp-redist-static-metric %s" % kwargs['bgp_redist_static_metric']
        if 'bgp_redist_connected_metric' in kwargs:
            command += " bgp-redist-connected-metric %s" % kwargs['bgp_redist_connected_metric']
        if 'bgp_redist_rip_metric' in kwargs:
            command += " bgp-redist-rip-metric %s" % kwargs['bgp_redist_rip_metric']
        if 'bgp_redist_ospf_metric' in kwargs:
            command += " bgp-redist-ospf-metric %s" % kwargs['bgp_redist_ospf_metric']
        if 'bgp_cluster_id' in kwargs:
            command += " bgp-cluster-id %s" % kwargs['bgp_cluster_id']
        if 'bgp_max_paths' in kwargs:
            command += " bgp-max-paths %s" % kwargs['bgp_max_paths']
        if 'bgp_ibgp_multipath' in kwargs:
            command += " bgp-ibgp-multipath %s" % kwargs['bgp_ibgp_multipath']
        if 'bgp_bestpath_as_path' in kwargs:
            for item in [u'ignore', u'multipath-relax']:
                if item == kwargs['bgp_bestpath_as_path']:
                    command += " bgp-bestpath-as-path %s" % item
                    break
        if 'bgp_dampening' in kwargs:
            if kwargs['bgp_dampening']:
                command += " bgp-dampening"
            else:
                command += " no-bgp-dampening"
        if 'bgp_graceful_restart' in kwargs:
            if kwargs['bgp_graceful_restart']:
                command += " bgp-graceful-restart"
            else:
                command += " no-bgp-graceful-restart"
        if 'rip_redistribute' in kwargs:
            for item in [u'static', u'connected', u'ospf', u'bgp']:
                if item == kwargs['rip_redistribute']:
                    command += " rip-redistribute %s" % item
                    break
        if 'ospf_redistribute' in kwargs:
            for item in [u'static', u'connected', u'rip', u'bgp']:
                if item == kwargs['ospf_redistribute']:
                    command += " ospf-redistribute %s" % item
                    break
        if 'ospf_redist_static_metric' in kwargs:
            command += " ospf-redist-static-metric %s" % kwargs['ospf_redist_static_metric']
        if 'ospf_redist_connected_metric' in kwargs:
            command += " ospf-redist-connected-metric %s" % kwargs['ospf_redist_connected_metric']
        if 'ospf_redist_rip_metric' in kwargs:
            command += " ospf-redist-rip-metric %s" % kwargs['ospf_redist_rip_metric']
        if 'ospf_redist_bgp_metric' in kwargs:
            command += " ospf-redist-bgp-metric %s" % kwargs['ospf_redist_bgp_metric']
        if 'ospf_stub_router_on_startup' in kwargs:
            if kwargs['ospf_stub_router_on_startup']:
                command += " ospf-stub-router-on-startup"
            else:
                command += " no-ospf-stub-router-on-startup"
        if 'ospf_bfd_all_if' in kwargs:
            if kwargs['ospf_bfd_all_if']:
                command += " ospf-bfd-all-if"
            else:
                command += " no-ospf-bfd-all-if"
        if 'vrrp_track_port' in kwargs:
            command += " vrrp-track-port %s" % kwargs['vrrp_track_port']
        if 'cmd' in kwargs:
            command += " cmd %s" % kwargs['cmd']
        if 'vrouter_create' in kwargs:
            command += " vrouter-create"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'fabric_comm' in kwargs:
            command += " fabric-comm"
        if 'cluster_active_active_routing' in kwargs:
            if kwargs['cluster_active_active_routing']:
                command += " cluster-active-active-routing"
            else:
                command += " no-cluster-active-active-routing"
        if 'hw_vrrp_id' in kwargs:
            command += " hw-vrrp-id %s" % kwargs['hw_vrrp_id']
        if 'router_id' in kwargs:
            command += " router-id %s" % kwargs['router_id']
        if 'proto_multi' in kwargs:
            for item in [u'none', u'dvmrp', u'pim-ssm']:
                if item == kwargs['proto_multi']:
                    command += " proto-multi %s" % item
                    break
        if 'bgp_redistribute' in kwargs:
            for item in [u'static', u'connected', u'rip', u'ospf']:
                if item == kwargs['bgp_redistribute']:
                    command += " bgp-redistribute %s" % item
                    break
        if 'bgp_redist_static_metric' in kwargs:
            command += " bgp-redist-static-metric %s" % kwargs['bgp_redist_static_metric']
        if 'bgp_redist_connected_metric' in kwargs:
            command += " bgp-redist-connected-metric %s" % kwargs['bgp_redist_connected_metric']
        if 'bgp_redist_rip_metric' in kwargs:
            command += " bgp-redist-rip-metric %s" % kwargs['bgp_redist_rip_metric']
        if 'bgp_redist_ospf_metric' in kwargs:
            command += " bgp-redist-ospf-metric %s" % kwargs['bgp_redist_ospf_metric']
        if 'bgp_cluster_id' in kwargs:
            command += " bgp-cluster-id %s" % kwargs['bgp_cluster_id']
        if 'bgp_max_paths' in kwargs:
            command += " bgp-max-paths %s" % kwargs['bgp_max_paths']
        if 'bgp_ibgp_multipath' in kwargs:
            command += " bgp-ibgp-multipath %s" % kwargs['bgp_ibgp_multipath']
        if 'bgp_bestpath_as_path' in kwargs:
            for item in [u'ignore', u'multipath-relax']:
                if item == kwargs['bgp_bestpath_as_path']:
                    command += " bgp-bestpath-as-path %s" % item
                    break
        if 'bgp_dampening' in kwargs:
            if kwargs['bgp_dampening']:
                command += " bgp-dampening"
            else:
                command += " no-bgp-dampening"
        if 'bgp_graceful_restart' in kwargs:
            if kwargs['bgp_graceful_restart']:
                command += " bgp-graceful-restart"
            else:
                command += " no-bgp-graceful-restart"
        if 'rip_redistribute' in kwargs:
            for item in [u'static', u'connected', u'ospf', u'bgp']:
                if item == kwargs['rip_redistribute']:
                    command += " rip-redistribute %s" % item
                    break
        if 'ospf_redistribute' in kwargs:
            for item in [u'static', u'connected', u'rip', u'bgp']:
                if item == kwargs['ospf_redistribute']:
                    command += " ospf-redistribute %s" % item
                    break
        if 'ospf_redist_static_metric' in kwargs:
            command += " ospf-redist-static-metric %s" % kwargs['ospf_redist_static_metric']
        if 'ospf_redist_connected_metric' in kwargs:
            command += " ospf-redist-connected-metric %s" % kwargs['ospf_redist_connected_metric']
        if 'ospf_redist_rip_metric' in kwargs:
            command += " ospf-redist-rip-metric %s" % kwargs['ospf_redist_rip_metric']
        if 'ospf_redist_bgp_metric' in kwargs:
            command += " ospf-redist-bgp-metric %s" % kwargs['ospf_redist_bgp_metric']
        if 'ospf_stub_router_on_startup' in kwargs:
            if kwargs['ospf_stub_router_on_startup']:
                command += " ospf-stub-router-on-startup"
            else:
                command += " no-ospf-stub-router-on-startup"
        if 'ospf_bfd_all_if' in kwargs:
            if kwargs['ospf_bfd_all_if']:
                command += " ospf-bfd-all-if"
            else:
                command += " no-ospf-bfd-all-if"
        if 'vrrp_track_port' in kwargs:
            command += " vrrp-track-port %s" % kwargs['vrrp_track_port']
        if 'cmd' in kwargs:
            command += " cmd %s" % kwargs['cmd']

        return self.send_command(command)


    def vrouter_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vrouter_ecmp_cached_routes_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ecmp-cached-routes-show'
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'nexthop' in kwargs:
            command += " nexthop %s" % kwargs['nexthop']
        if 'age_in_seconds' in kwargs:
            command += " age-in-seconds %s" % kwargs['age_in_seconds']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_ecmp_group_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ecmp-group-show'
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'ecmp_group' in kwargs:
            command += " ecmp-group %s" % kwargs['ecmp_group']
        if 'ecmp_ref_count' in kwargs:
            command += " ecmp-ref-count %s" % kwargs['ecmp_ref_count']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_fib_arps_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-fib-arps-show'
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'if_id' in kwargs:
            command += " if-id %s" % kwargs['if_id']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'egress_id' in kwargs:
            command += " egress-id %s" % kwargs['egress_id']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_fib_routes_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-fib-routes-show'
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'nexthop' in kwargs:
            command += " nexthop %s" % kwargs['nexthop']
        if 'if_ip' in kwargs:
            command += " if-ip %s" % kwargs['if_ip']
        if 'intf_id' in kwargs:
            command += " intf-id %s" % kwargs['intf_id']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'nexthop_mac' in kwargs:
            command += " nexthop-mac %s" % kwargs['nexthop_mac']
        if 'egress_id' in kwargs:
            command += " egress-id %s" % kwargs['egress_id']
        if 'ecmp_group' in kwargs:
            command += " ecmp-group %s" % kwargs['ecmp_group']
        if 'nexthop_down' in kwargs:
            command += " nexthop-down"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_igmp_static_join_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-igmp-static-join-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'source_ip' in kwargs:
            command += " source-ip %s" % kwargs['source_ip']

        return self.send_command(command)


    def vrouter_igmp_static_join_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-igmp-static-join-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vrouter_igmp_static_join_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-igmp-static-join-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'group_ip' in kwargs:
            command += " group-ip %s" % kwargs['group_ip']
        if 'source_ip' in kwargs:
            command += " source-ip %s" % kwargs['source_ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_interface_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-interface-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def vrouter_interface_config_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-interface-config-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'ospf_auth_key' in kwargs:
            command += " ospf-auth-key %s" % kwargs['ospf_auth_key']
        if 'ospf_msg_digest_key' in kwargs:
            command += " ospf-msg-digest-key %s" % kwargs['ospf_msg_digest_key']
        if 'ospf_passive_if' in kwargs:
            if kwargs['ospf_passive_if']:
                command += " ospf-passive-if"
            else:
                command += " no-ospf-passive-if"
        if 'ospf_network_type' in kwargs:
            for item in [u'default', u'point-to-point']:
                if item == kwargs['ospf_network_type']:
                    command += " ospf-network-type %s" % item
                    break
        if 'ospf_bfd' in kwargs:
            for item in [u'default', u'enable', u'disable']:
                if item == kwargs['ospf_bfd']:
                    command += " ospf-bfd %s" % item
                    break
        if 'nd_suppress_ra' in kwargs:
            if kwargs['nd_suppress_ra']:
                command += " nd-suppress-ra"
            else:
                command += " no-nd-suppress-ra"
        if 'prefix_netmask' in kwargs:
            command += " prefix-netmask %s" % kwargs['prefix_netmask']
        if 'autoconf' in kwargs:
            if kwargs['autoconf']:
                command += " autoconf"
            else:
                command += " no-autoconf"

        return self.send_command(command)


    def vrouter_interface_config_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-interface-config-modify'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'ospf_auth_key' in kwargs:
            command += " ospf-auth-key %s" % kwargs['ospf_auth_key']
        if 'ospf_msg_digest_key' in kwargs:
            command += " ospf-msg-digest-key %s" % kwargs['ospf_msg_digest_key']
        if 'ospf_passive_if' in kwargs:
            if kwargs['ospf_passive_if']:
                command += " ospf-passive-if"
            else:
                command += " no-ospf-passive-if"
        if 'ospf_network_type' in kwargs:
            for item in [u'default', u'point-to-point']:
                if item == kwargs['ospf_network_type']:
                    command += " ospf-network-type %s" % item
                    break
        if 'ospf_bfd' in kwargs:
            for item in [u'default', u'enable', u'disable']:
                if item == kwargs['ospf_bfd']:
                    command += " ospf-bfd %s" % item
                    break
        if 'nd_suppress_ra' in kwargs:
            if kwargs['nd_suppress_ra']:
                command += " nd-suppress-ra"
            else:
                command += " no-nd-suppress-ra"
        if 'prefix_netmask' in kwargs:
            command += " prefix-netmask %s" % kwargs['prefix_netmask']
        if 'autoconf' in kwargs:
            if kwargs['autoconf']:
                command += " autoconf"
            else:
                command += " no-autoconf"

        return self.send_command(command)


    def vrouter_interface_config_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-interface-config-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']

        return self.send_command(command)


    def vrouter_interface_config_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-interface-config-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'ospf_auth_key' in kwargs:
            command += " ospf-auth-key %s" % kwargs['ospf_auth_key']
        if 'ospf_msg_digest_key' in kwargs:
            command += " ospf-msg-digest-key %s" % kwargs['ospf_msg_digest_key']
        if 'ospf_passive_if' in kwargs:
            if kwargs['ospf_passive_if']:
                command += " ospf-passive-if"
            else:
                command += " no-ospf-passive-if"
        if 'ospf_network_type' in kwargs:
            for item in [u'default', u'point-to-point']:
                if item == kwargs['ospf_network_type']:
                    command += " ospf-network-type %s" % item
                    break
        if 'ospf_bfd' in kwargs:
            for item in [u'default', u'enable', u'disable']:
                if item == kwargs['ospf_bfd']:
                    command += " ospf-bfd %s" % item
                    break
        if 'nd_suppress_ra' in kwargs:
            if kwargs['nd_suppress_ra']:
                command += " nd-suppress-ra"
            else:
                command += " no-nd-suppress-ra"
        if 'prefix_netmask' in kwargs:
            command += " prefix-netmask %s" % kwargs['prefix_netmask']
        if 'autoconf' in kwargs:
            if kwargs['autoconf']:
                command += " autoconf"
            else:
                command += " no-autoconf"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_interface_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-interface-modify'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def vrouter_interface_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-interface-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']

        return self.send_command(command)


    def vrouter_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-interface-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'vrrp_state' in kwargs:
            for item in [u'slave', u'master']:
                if item == kwargs['vrrp_state']:
                    command += " vrrp-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_log_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-log-clear'

        return self.send_command(command)


    def vrouter_log_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-log-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_loopback_interface_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-loopback-interface-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']

        return self.send_command(command)


    def vrouter_loopback_interface_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-loopback-interface-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']

        return self.send_command(command)


    def vrouter_loopback_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-loopback-interface-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_mfib_routes_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-mfib-routes-show'
        if 'srcip' in kwargs:
            command += " srcip %s" % kwargs['srcip']
        if 'srcip_mask' in kwargs:
            command += " srcip-mask %s" % kwargs['srcip_mask']
        if 'group' in kwargs:
            command += " group %s" % kwargs['group']
        if 'group_mask' in kwargs:
            command += " group-mask %s" % kwargs['group_mask']
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'hw_group_id' in kwargs:
            command += " hw-group-id %s" % kwargs['hw_group_id']
        if 'send_vlan' in kwargs:
            command += " send-vlan %s" % kwargs['send_vlan']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'encap_id' in kwargs:
            command += " encap-id %s" % kwargs['encap_id']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_migrate(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-migrate'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vrouter_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'cluster_active_active_routing' in kwargs:
            if kwargs['cluster_active_active_routing']:
                command += " cluster-active-active-routing"
            else:
                command += " no-cluster-active-active-routing"
        if 'hw_vrrp_id' in kwargs:
            command += " hw-vrrp-id %s" % kwargs['hw_vrrp_id']
        if 'router_id' in kwargs:
            command += " router-id %s" % kwargs['router_id']
        if 'proto_multi' in kwargs:
            for item in [u'none', u'dvmrp', u'pim-ssm']:
                if item == kwargs['proto_multi']:
                    command += " proto-multi %s" % item
                    break
        if 'bgp_redistribute' in kwargs:
            for item in [u'static', u'connected', u'rip', u'ospf']:
                if item == kwargs['bgp_redistribute']:
                    command += " bgp-redistribute %s" % item
                    break
        if 'bgp_redist_static_metric' in kwargs:
            command += " bgp-redist-static-metric %s" % kwargs['bgp_redist_static_metric']
        if 'bgp_redist_connected_metric' in kwargs:
            command += " bgp-redist-connected-metric %s" % kwargs['bgp_redist_connected_metric']
        if 'bgp_redist_rip_metric' in kwargs:
            command += " bgp-redist-rip-metric %s" % kwargs['bgp_redist_rip_metric']
        if 'bgp_redist_ospf_metric' in kwargs:
            command += " bgp-redist-ospf-metric %s" % kwargs['bgp_redist_ospf_metric']
        if 'bgp_cluster_id' in kwargs:
            command += " bgp-cluster-id %s" % kwargs['bgp_cluster_id']
        if 'bgp_max_paths' in kwargs:
            command += " bgp-max-paths %s" % kwargs['bgp_max_paths']
        if 'bgp_ibgp_multipath' in kwargs:
            command += " bgp-ibgp-multipath %s" % kwargs['bgp_ibgp_multipath']
        if 'bgp_bestpath_as_path' in kwargs:
            for item in [u'ignore', u'multipath-relax']:
                if item == kwargs['bgp_bestpath_as_path']:
                    command += " bgp-bestpath-as-path %s" % item
                    break
        if 'bgp_dampening' in kwargs:
            if kwargs['bgp_dampening']:
                command += " bgp-dampening"
            else:
                command += " no-bgp-dampening"
        if 'bgp_graceful_restart' in kwargs:
            if kwargs['bgp_graceful_restart']:
                command += " bgp-graceful-restart"
            else:
                command += " no-bgp-graceful-restart"
        if 'rip_redistribute' in kwargs:
            for item in [u'static', u'connected', u'ospf', u'bgp']:
                if item == kwargs['rip_redistribute']:
                    command += " rip-redistribute %s" % item
                    break
        if 'ospf_redistribute' in kwargs:
            for item in [u'static', u'connected', u'rip', u'bgp']:
                if item == kwargs['ospf_redistribute']:
                    command += " ospf-redistribute %s" % item
                    break
        if 'ospf_redist_static_metric' in kwargs:
            command += " ospf-redist-static-metric %s" % kwargs['ospf_redist_static_metric']
        if 'ospf_redist_connected_metric' in kwargs:
            command += " ospf-redist-connected-metric %s" % kwargs['ospf_redist_connected_metric']
        if 'ospf_redist_rip_metric' in kwargs:
            command += " ospf-redist-rip-metric %s" % kwargs['ospf_redist_rip_metric']
        if 'ospf_redist_bgp_metric' in kwargs:
            command += " ospf-redist-bgp-metric %s" % kwargs['ospf_redist_bgp_metric']
        if 'ospf_stub_router_on_startup' in kwargs:
            if kwargs['ospf_stub_router_on_startup']:
                command += " ospf-stub-router-on-startup"
            else:
                command += " no-ospf-stub-router-on-startup"
        if 'ospf_bfd_all_if' in kwargs:
            if kwargs['ospf_bfd_all_if']:
                command += " ospf-bfd-all-if"
            else:
                command += " no-ospf-bfd-all-if"
        if 'vrrp_track_port' in kwargs:
            command += " vrrp-track-port %s" % kwargs['vrrp_track_port']
        if 'cmd' in kwargs:
            command += " cmd %s" % kwargs['cmd']

        return self.send_command(command)


    def vrouter_mrib_routes_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-mrib-routes-show'
        if 'srcip' in kwargs:
            command += " srcip %s" % kwargs['srcip']
        if 'group' in kwargs:
            command += " group %s" % kwargs['group']
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'hw_group_id' in kwargs:
            command += " hw-group-id %s" % kwargs['hw_group_id']
        if 'vnic' in kwargs:
            command += " vnic %s" % kwargs['vnic']
        if 'vnic_vlan' in kwargs:
            command += " vnic-vlan %s" % kwargs['vnic_vlan']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'flags' in kwargs:
            command += " flags %s" % kwargs['flags']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_multicast_igmp_group_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-multicast-igmp-group-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'if_name' in kwargs:
            command += " if-name %s" % kwargs['if_name']
        if 'address' in kwargs:
            command += " address %s" % kwargs['address']
        if 'vif' in kwargs:
            command += " vif %s" % kwargs['vif']
        if 'reporter' in kwargs:
            command += " reporter %s" % kwargs['reporter']
        if 'timer' in kwargs:
            command += " timer %s" % kwargs['timer']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_multicast_route_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-multicast-route-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'source' in kwargs:
            command += " source %s" % kwargs['source']
        if 'group' in kwargs:
            command += " group %s" % kwargs['group']
        if 'parent' in kwargs:
            command += " parent %s" % kwargs['parent']
        if 'oif_bitmap' in kwargs:
            command += " oif-bitmap %s" % kwargs['oif_bitmap']
        if 'incoming_if' in kwargs:
            command += " incoming-if %s" % kwargs['incoming_if']
        if 'outgoing_ifs' in kwargs:
            command += " outgoing-ifs %s" % kwargs['outgoing_ifs']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_ospf_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'ospf_area' in kwargs:
            command += " ospf-area %s" % kwargs['ospf_area']

        return self.send_command(command)


    def vrouter_ospf_area_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf-area-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'area' in kwargs:
            command += " area %s" % kwargs['area']
        if 'stub_type' in kwargs:
            for item in [u'none', u'stub', u'stub-no-summary', u'nssa', u'nssa-no-summary']:
                if item == kwargs['stub_type']:
                    command += " stub-type %s" % item
                    break

        return self.send_command(command)


    def vrouter_ospf_area_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf-area-modify'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'area' in kwargs:
            command += " area %s" % kwargs['area']
        if 'stub_type' in kwargs:
            for item in [u'none', u'stub', u'stub-no-summary', u'nssa', u'nssa-no-summary']:
                if item == kwargs['stub_type']:
                    command += " stub-type %s" % item
                    break

        return self.send_command(command)


    def vrouter_ospf_area_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf-area-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'area' in kwargs:
            command += " area %s" % kwargs['area']

        return self.send_command(command)


    def vrouter_ospf_area_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf-area-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'area' in kwargs:
            command += " area %s" % kwargs['area']
        if 'stub_type' in kwargs:
            for item in [u'none', u'stub', u'stub-no-summary', u'nssa', u'nssa-no-summary']:
                if item == kwargs['stub_type']:
                    command += " stub-type %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_ospf_neighbor_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf-neighbor-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'neighbor' in kwargs:
            command += " neighbor %s" % kwargs['neighbor']
        if 'pri' in kwargs:
            command += " pri %s" % kwargs['pri']
        if 'dead_time' in kwargs:
            command += " dead-time %s" % kwargs['dead_time']
        if 'address' in kwargs:
            command += " address %s" % kwargs['address']
        if 'interface' in kwargs:
            command += " interface %s" % kwargs['interface']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_ospf_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']

        return self.send_command(command)


    def vrouter_ospf_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'ospf_area' in kwargs:
            command += " ospf-area %s" % kwargs['ospf_area']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_ospf6_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf6-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']

        return self.send_command(command)


    def vrouter_ospf6_neighbor_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf6-neighbor-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'neighbor_rid' in kwargs:
            command += " neighbor-rid %s" % kwargs['neighbor_rid']
        if 'pri' in kwargs:
            command += " pri %s" % kwargs['pri']
        if 'state' in kwargs:
            command += " state %s" % kwargs['state']
        if 'dead_time' in kwargs:
            command += " dead-time %s" % kwargs['dead_time']
        if 'duration' in kwargs:
            command += " duration %s" % kwargs['duration']
        if 'interface' in kwargs:
            command += " interface %s" % kwargs['interface']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_ospf6_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf6-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']

        return self.send_command(command)


    def vrouter_ospf6_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf6-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_packet_relay_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-packet-relay-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'forward_proto' in kwargs:
            command += " forward-proto %s" % kwargs['forward_proto']
        if 'forward_ip' in kwargs:
            command += " forward-ip %s" % kwargs['forward_ip']

        return self.send_command(command)


    def vrouter_packet_relay_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-packet-relay-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'forward_proto' in kwargs:
            command += " forward-proto %s" % kwargs['forward_proto']
        if 'forward_ip' in kwargs:
            command += " forward-ip %s" % kwargs['forward_ip']

        return self.send_command(command)


    def vrouter_packet_relay_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-packet-relay-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'forward_proto' in kwargs:
            command += " forward-proto %s" % kwargs['forward_proto']
        if 'forward_ip' in kwargs:
            command += " forward-ip %s" % kwargs['forward_ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_pim_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-pim-interface-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'local_address' in kwargs:
            command += " local-address %s" % kwargs['local_address']
        if 'index' in kwargs:
            command += " index %s" % kwargs['index']
        if 'if_state' in kwargs:
            for item in [u'down', u'disabled', u'leaf', u'dr', u'no-nbrs', u'pim']:
                if item == kwargs['if_state']:
                    command += " if-state %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_pim_join_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-pim-join-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'source' in kwargs:
            command += " source %s" % kwargs['source']
        if 'upstream' in kwargs:
            command += " upstream %s" % kwargs['upstream']
        if 'group' in kwargs:
            command += " group %s" % kwargs['group']
        if 'sg' in kwargs:
            if kwargs['sg']:
                command += " sg"
            else:
                command += " pmbr"
        if 'incoming_if' in kwargs:
            command += " incoming-if %s" % kwargs['incoming_if']
        if 'incoming' in kwargs:
            command += " incoming %s" % kwargs['incoming']
        if 'outgoing_ifs' in kwargs:
            command += " outgoing-ifs %s" % kwargs['outgoing_ifs']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_pim_neighbor_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-pim-neighbor-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'interface' in kwargs:
            command += " interface %s" % kwargs['interface']
        if 'address' in kwargs:
            command += " address %s" % kwargs['address']
        if 'neighbor' in kwargs:
            command += " neighbor %s" % kwargs['neighbor']
        if 'uptime' in kwargs:
            command += " uptime %s" % kwargs['uptime']
        if 'timer' in kwargs:
            command += " timer %s" % kwargs['timer']
        if 'holdt' in kwargs:
            command += " holdt %s" % kwargs['holdt']
        if 'dr_priority' in kwargs:
            command += " dr-priority %s" % kwargs['dr_priority']
        if 'gen_id' in kwargs:
            command += " gen-id %s" % kwargs['gen_id']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_pim_rp_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-pim-rp-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'rp_address' in kwargs:
            command += " rp-address %s" % kwargs['rp_address']
        if 'group' in kwargs:
            command += " group %s" % kwargs['group']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']

        return self.send_command(command)


    def vrouter_pim_rp_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-pim-rp-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'rp_address' in kwargs:
            command += " rp-address %s" % kwargs['rp_address']
        if 'group' in kwargs:
            command += " group %s" % kwargs['group']

        return self.send_command(command)


    def vrouter_pim_rp_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-pim-rp-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'rp_address' in kwargs:
            command += " rp-address %s" % kwargs['rp_address']
        if 'group' in kwargs:
            command += " group %s" % kwargs['group']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_ping(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ping'
        if 'host_ip' in kwargs:
            command += " host-ip %s" % kwargs['host_ip']
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'fragment' in kwargs:
            if kwargs['fragment']:
                command += " fragment"
            else:
                command += " no-fragment"
        if 'interval' in kwargs:
            command += " interval %s" % kwargs['interval']
        if 'outgoing_interface' in kwargs:
            command += " outgoing-interface %s" % kwargs['outgoing_interface']

        return self.send_command(command)


    def vrouter_prefix_list_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-prefix-list-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'action' in kwargs:
            for item in [u'permit', u'deny']:
                if item == kwargs['action']:
                    command += " action %s" % item
                    break
        if 'prefix' in kwargs:
            command += " prefix %s" % kwargs['prefix']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vrouter_prefix_list_add' in kwargs:
            command += " vrouter-prefix-list-add"
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'action' in kwargs:
            for item in [u'permit', u'deny']:
                if item == kwargs['action']:
                    command += " action %s" % item
                    break
        if 'any' in kwargs:
            command += " any"
        if 'vrouter_prefix_list_add' in kwargs:
            command += " vrouter-prefix-list-add"
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'action' in kwargs:
            for item in [u'permit', u'deny']:
                if item == kwargs['action']:
                    command += " action %s" % item
                    break

        return self.send_command(command)


    def vrouter_prefix_list_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-prefix-list-modify'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'action' in kwargs:
            for item in [u'permit', u'deny']:
                if item == kwargs['action']:
                    command += " action %s" % item
                    break
        if 'prefix' in kwargs:
            command += " prefix %s" % kwargs['prefix']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'any' in kwargs:
            command += " any"

        return self.send_command(command)


    def vrouter_prefix_list_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-prefix-list-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vrouter_prefix_list_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-prefix-list-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'action' in kwargs:
            for item in [u'permit', u'deny']:
                if item == kwargs['action']:
                    command += " action %s" % item
                    break
        if 'prefix' in kwargs:
            command += " prefix %s" % kwargs['prefix']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'any' in kwargs:
            command += " any"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_rib_history_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-rib-history-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']

        return self.send_command(command)


    def vrouter_rib_history_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-rib-history-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_rib_history_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-rib-history-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'router_delete' in kwargs:
            command += " router-delete"
        if 'router_delete' in kwargs:
            command += " router-delete"
        if 'number_of_tunnels' in kwargs:
            command += " number-of-tunnels"
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'number_of_nexthops' in kwargs:
            command += " number-of-nexthops %s" % kwargs['number_of_nexthops']
        if 'nexthops_in_hw' in kwargs:
            command += " nexthops-in-hw %s" % kwargs['nexthops_in_hw']
        if 'ecmp_group' in kwargs:
            command += " ecmp-group %s" % kwargs['ecmp_group']
        if 'nexthop' in kwargs:
            command += " nexthop %s" % kwargs['nexthop']
        if 'egress_id' in kwargs:
            command += " egress-id %s" % kwargs['egress_id']
        if 'in_cache_hw_fail' in kwargs:
            if kwargs['in_cache_hw_fail']:
                command += " in-cache-hw-fail"
            else:
                command += " in-ecmp-cache"
        if 'intf_ip' in kwargs:
            command += " intf-ip %s" % kwargs['intf_ip']
        if 'ecmp_nexthops' in kwargs:
            if kwargs['ecmp_nexthops']:
                command += " ecmp-nexthops"
            else:
                command += " no-ecmp-nexthops"
        if 'number_of_tunnels' in kwargs:
            command += " number-of-tunnels %s" % kwargs['number_of_tunnels']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_rib_routes_lookup(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-rib-routes-lookup'
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_rib_routes_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-rib-routes-show'
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'number_of_nexthops' in kwargs:
            command += " number-of-nexthops %s" % kwargs['number_of_nexthops']
        if 'nexthops_in_hw' in kwargs:
            command += " nexthops-in-hw %s" % kwargs['nexthops_in_hw']
        if 'ecmp_group' in kwargs:
            command += " ecmp-group %s" % kwargs['ecmp_group']
        if 'nexthop' in kwargs:
            command += " nexthop %s" % kwargs['nexthop']
        if 'egress_id' in kwargs:
            command += " egress-id %s" % kwargs['egress_id']
        if 'in_cache_hw_fail' in kwargs:
            if kwargs['in_cache_hw_fail']:
                command += " in-cache-hw-fail"
            else:
                command += " in-ecmp-cache"
        if 'intf_ip' in kwargs:
            command += " intf-ip %s" % kwargs['intf_ip']
        if 'ecmp_nexthops' in kwargs:
            if kwargs['ecmp_nexthops']:
                command += " ecmp-nexthops"
            else:
                command += " no-ecmp-nexthops"
        if 'number_of_tunnels' in kwargs:
            command += " number-of-tunnels %s" % kwargs['number_of_tunnels']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_rip_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-rip-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']

        return self.send_command(command)


    def vrouter_rip_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-rip-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']

        return self.send_command(command)


    def vrouter_rip_routes_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-rip-routes-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'next_hop' in kwargs:
            command += " next-hop %s" % kwargs['next_hop']
        if 'metric' in kwargs:
            command += " metric %s" % kwargs['metric']
        if 'source' in kwargs:
            command += " source %s" % kwargs['source']
        if 'tag' in kwargs:
            command += " tag %s" % kwargs['tag']
        if 'attribute' in kwargs:
            for item in [u'normal', u'static', u'default', u'redistribute', u'interface']:
                if item == kwargs['attribute']:
                    command += " attribute %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_rip_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-rip-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_route_map_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-route-map-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'action' in kwargs:
            for item in [u'permit', u'deny']:
                if item == kwargs['action']:
                    command += " action %s" % item
                    break
        if 'metric' in kwargs:
            command += " metric %s" % kwargs['metric']

        return self.send_command(command)


    def vrouter_route_map_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-route-map-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vrouter_route_map_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-route-map-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'action' in kwargs:
            for item in [u'permit', u'deny']:
                if item == kwargs['action']:
                    command += " action %s" % item
                    break
        if 'metric' in kwargs:
            command += " metric %s" % kwargs['metric']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_routes_multicast_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-routes-multicast-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'source' in kwargs:
            command += " source %s" % kwargs['source']
        if 'group' in kwargs:
            command += " group %s" % kwargs['group']
        if 'input' in kwargs:
            command += " input %s" % kwargs['input']
        if 'output' in kwargs:
            command += " output %s" % kwargs['output']
        if 'ttl' in kwargs:
            command += " ttl %s" % kwargs['ttl']
        if 'uptime' in kwargs:
            command += " uptime %s" % kwargs['uptime']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_routes_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-routes-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'interface' in kwargs:
            command += " interface %s" % kwargs['interface']
        if 'next_hop' in kwargs:
            command += " next-hop %s" % kwargs['next_hop']
        if 'metric' in kwargs:
            command += " metric %s" % kwargs['metric']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_routes_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-routes-stats-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'fib_max_routes' in kwargs:
            command += " fib-max-routes %s" % kwargs['fib_max_routes']
        if 'fib_current_routes' in kwargs:
            command += " fib-current-routes %s" % kwargs['fib_current_routes']
        if 'rib_current_routes' in kwargs:
            command += " rib-current-routes %s" % kwargs['rib_current_routes']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'cluster', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'router_type' in kwargs:
            for item in [u'software', u'hardware']:
                if item == kwargs['router_type']:
                    command += " router-type %s" % item
                    break
        if 'fabric_comm' in kwargs:
            command += " fabric-comm"
        if 'hw_router_mac' in kwargs:
            command += " hw-router-mac %s" % kwargs['hw_router_mac']
        if 'cluster_active_active_routing' in kwargs:
            if kwargs['cluster_active_active_routing']:
                command += " cluster-active-active-routing"
            else:
                command += " no-cluster-active-active-routing"
        if 'hw_vrrp_id' in kwargs:
            command += " hw-vrrp-id %s" % kwargs['hw_vrrp_id']
        if 'router_id' in kwargs:
            command += " router-id %s" % kwargs['router_id']
        if 'proto_multi' in kwargs:
            for item in [u'none', u'dvmrp', u'pim-ssm']:
                if item == kwargs['proto_multi']:
                    command += " proto-multi %s" % item
                    break
        if 'bgp_redistribute' in kwargs:
            for item in [u'static', u'connected', u'rip', u'ospf']:
                if item == kwargs['bgp_redistribute']:
                    command += " bgp-redistribute %s" % item
                    break
        if 'bgp_redist_static_metric' in kwargs:
            command += " bgp-redist-static-metric %s" % kwargs['bgp_redist_static_metric']
        if 'bgp_redist_connected_metric' in kwargs:
            command += " bgp-redist-connected-metric %s" % kwargs['bgp_redist_connected_metric']
        if 'bgp_redist_rip_metric' in kwargs:
            command += " bgp-redist-rip-metric %s" % kwargs['bgp_redist_rip_metric']
        if 'bgp_redist_ospf_metric' in kwargs:
            command += " bgp-redist-ospf-metric %s" % kwargs['bgp_redist_ospf_metric']
        if 'bgp_cluster_id' in kwargs:
            command += " bgp-cluster-id %s" % kwargs['bgp_cluster_id']
        if 'bgp_max_paths' in kwargs:
            command += " bgp-max-paths %s" % kwargs['bgp_max_paths']
        if 'bgp_ibgp_multipath' in kwargs:
            command += " bgp-ibgp-multipath %s" % kwargs['bgp_ibgp_multipath']
        if 'bgp_bestpath_as_path' in kwargs:
            for item in [u'ignore', u'multipath-relax']:
                if item == kwargs['bgp_bestpath_as_path']:
                    command += " bgp-bestpath-as-path %s" % item
                    break
        if 'bgp_dampening' in kwargs:
            if kwargs['bgp_dampening']:
                command += " bgp-dampening"
            else:
                command += " no-bgp-dampening"
        if 'bgp_graceful_restart' in kwargs:
            if kwargs['bgp_graceful_restart']:
                command += " bgp-graceful-restart"
            else:
                command += " no-bgp-graceful-restart"
        if 'rip_redistribute' in kwargs:
            for item in [u'static', u'connected', u'ospf', u'bgp']:
                if item == kwargs['rip_redistribute']:
                    command += " rip-redistribute %s" % item
                    break
        if 'ospf_redistribute' in kwargs:
            for item in [u'static', u'connected', u'rip', u'bgp']:
                if item == kwargs['ospf_redistribute']:
                    command += " ospf-redistribute %s" % item
                    break
        if 'ospf_redist_static_metric' in kwargs:
            command += " ospf-redist-static-metric %s" % kwargs['ospf_redist_static_metric']
        if 'ospf_redist_connected_metric' in kwargs:
            command += " ospf-redist-connected-metric %s" % kwargs['ospf_redist_connected_metric']
        if 'ospf_redist_rip_metric' in kwargs:
            command += " ospf-redist-rip-metric %s" % kwargs['ospf_redist_rip_metric']
        if 'ospf_redist_bgp_metric' in kwargs:
            command += " ospf-redist-bgp-metric %s" % kwargs['ospf_redist_bgp_metric']
        if 'ospf_stub_router_on_startup' in kwargs:
            if kwargs['ospf_stub_router_on_startup']:
                command += " ospf-stub-router-on-startup"
            else:
                command += " no-ospf-stub-router-on-startup"
        if 'ospf_bfd_all_if' in kwargs:
            if kwargs['ospf_bfd_all_if']:
                command += " ospf-bfd-all-if"
            else:
                command += " no-ospf-bfd-all-if"
        if 'vrrp_track_port' in kwargs:
            command += " vrrp-track-port %s" % kwargs['vrrp_track_port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_static_bfd_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-static-bfd-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'type' in kwargs:
            for item in [u'single-hop', u'multi-hop']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break

        return self.send_command(command)


    def vrouter_static_bfd_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-static-bfd-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']

        return self.send_command(command)


    def vrouter_static_bfd_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-static-bfd-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'type' in kwargs:
            for item in [u'none', u'single-hop', u'multi-hop']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_static_route_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-static-route-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']
        if 'bfd_dst_ip' in kwargs:
            command += " bfd-dst-ip %s" % kwargs['bfd_dst_ip']

        return self.send_command(command)


    def vrouter_static_route_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-static-route-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']

        return self.send_command(command)


    def vrouter_static_route_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-static-route-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'gateway_ip' in kwargs:
            command += " gateway-ip %s" % kwargs['gateway_ip']
        if 'bfd_dst_ip' in kwargs:
            command += " bfd-dst-ip %s" % kwargs['bfd_dst_ip']
        if 'bfd' in kwargs:
            for item in [u'none', u'single-hop', u'multi-hop']:
                if item == kwargs['bfd']:
                    command += " bfd %s" % item
                    break
        if 'bfd_src_ip' in kwargs:
            command += " bfd-src-ip %s" % kwargs['bfd_src_ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_traceroute(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-traceroute'
        if 'host_ip' in kwargs:
            command += " host-ip %s" % kwargs['host_ip']
        if 'resolve' in kwargs:
            if kwargs['resolve']:
                command += " resolve"
            else:
                command += " no-resolve"
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'probe_type' in kwargs:
            for item in [u'icmp-probe', u'udp-probe']:
                if item == kwargs['probe_type']:
                    command += " probe-type %s" % item
                    break
        if 'outgoing_interface' in kwargs:
            command += " outgoing-interface %s" % kwargs['outgoing_interface']

        return self.send_command(command)


    def vrouter_vtysh_cmd(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-vtysh-cmd'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'cmd' in kwargs:
            command += " cmd %s" % kwargs['cmd']

        return self.send_command(command)


    def vtep_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vtep-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'virtual_ip' in kwargs:
            command += " virtual-ip %s" % kwargs['virtual_ip']

        return self.send_command(command)


    def vtep_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vtep-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vtep_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vtep-show'
        if 'scope' in kwargs:
            command += " scope %s" % kwargs['scope']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'virtual_ip' in kwargs:
            command += " virtual-ip %s" % kwargs['virtual_ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vtep_vxlan_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vtep-vxlan-add'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vtep_vxlan_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vtep-vxlan-remove'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vtep_vxlan_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vtep-vxlan-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vxlan_dest_port_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vxlan-dest-port-modify'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']

        return self.send_command(command)


    def vxlan_dest_port_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vxlan-dest-port-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vxlan_stats_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vxlan-stats-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']

        return self.send_command(command)


    def vxlan_stats_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vxlan-stats-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vxlan_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vxlan-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def web_cert_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'web-cert-clear'

        return self.send_command(command)


    def web_cert_import(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'web-cert-import'
        if 'file_ca' in kwargs:
            command += " file-ca %s" % kwargs['file_ca']
        if 'file_server' in kwargs:
            command += " file-server %s" % kwargs['file_server']
        if 'file_inter' in kwargs:
            command += " file-inter %s" % kwargs['file_inter']
        if 'web_cert_import' in kwargs:
            command += " web-cert-import"
        if 'file_server' in kwargs:
            command += " file-server %s" % kwargs['file_server']

        return self.send_command(command)


    def web_cert_info_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'web-cert-info-show'
        if 'cert_type' in kwargs:
            for item in [u'ca', u'intermediate', u'server']:
                if item == kwargs['cert_type']:
                    command += " cert-type %s" % item
                    break
        if 'subject' in kwargs:
            command += " subject %s" % kwargs['subject']
        if 'issuer' in kwargs:
            command += " issuer %s" % kwargs['issuer']
        if 'serial_number' in kwargs:
            command += " serial-number %s" % kwargs['serial_number']
        if 'valid_from' in kwargs:
            command += " valid-from %s" % kwargs['valid_from']
        if 'valid_to' in kwargs:
            command += " valid-to %s" % kwargs['valid_to']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def web_cert_request_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'web-cert-request-create'

        return self.send_command(command)


    def web_cert_request_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'web-cert-request-show'
        if 'cert_request' in kwargs:
            command += " cert-request %s" % kwargs['cert_request']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def web_cert_self_signed_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'web-cert-self-signed-create'
        if 'country' in kwargs:
            command += " country %s" % kwargs['country']
        if 'state' in kwargs:
            command += " state %s" % kwargs['state']
        if 'city' in kwargs:
            command += " city %s" % kwargs['city']
        if 'organization' in kwargs:
            command += " organization %s" % kwargs['organization']
        if 'organizational_unit' in kwargs:
            command += " organizational-unit %s" % kwargs['organizational_unit']
        if 'common_name' in kwargs:
            command += " common-name %s" % kwargs['common_name']

        return self.send_command(command)


    def www_restart(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'www-restart'

        return self.send_command(command)


    def alta_rx_debug_reset(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'alta-rx-debug-reset'
        if 'zero_glort' in kwargs:
            command += " zero-glort %s" % kwargs['zero_glort']
        if 'err_not_done' in kwargs:
            command += " err-not-done %s" % kwargs['err_not_done']
        if 'offset' in kwargs:
            command += " offset %s" % kwargs['offset']
        if 'multibuf' in kwargs:
            command += " multibuf %s" % kwargs['multibuf']
        if 'zero' in kwargs:
            command += " zero %s" % kwargs['zero']
        if 'pause_on' in kwargs:
            command += " pause-on %s" % kwargs['pause_on']
        if 'pause_off' in kwargs:
            command += " pause-off %s" % kwargs['pause_off']

        return self.send_command(command)


    def alta_rx_debug_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'alta-rx-debug-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def alta_tx_debug_reset(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'alta-tx-debug-reset'
        if 'zero_desp' in kwargs:
            command += " zero-desp %s" % kwargs['zero_desp']

        return self.send_command(command)


    def alta_tx_debug_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'alta-tx-debug-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def analytics_store_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'analytics-store-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def bezel_portmap_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'bezel-portmap-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'bezel_intf' in kwargs:
            command += " bezel-intf %s" % kwargs['bezel_intf']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def cli_config_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cli_config-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def cli_set_quiet(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cli-set-quiet'

        return self.send_command(command)


    def cli_unset_quiet(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cli-unset-quiet'

        return self.send_command(command)


    def cluster_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cluster-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def cluster_repeer_node_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'cluster-repeer-node-show'
        if 'id' in kwargs:
            command += " id %s" % kwargs['id']
        if 'serial' in kwargs:
            command += " serial %s" % kwargs['serial']
        if 'fab_name' in kwargs:
            command += " fab-name %s" % kwargs['fab_name']
        if 'local_mac' in kwargs:
            command += " local-mac %s" % kwargs['local_mac']
        if 'fabric_network' in kwargs:
            for item in [u'in-band', u'mgmt']:
                if item == kwargs['fabric_network']:
                    command += " fabric-network %s" % item
                    break
        if 'control_network' in kwargs:
            for item in [u'in-band', u'mgmt']:
                if item == kwargs['control_network']:
                    command += " control-network %s" % item
                    break
        if 'mgmt_ip' in kwargs:
            command += " mgmt-ip %s" % kwargs['mgmt_ip']
        if 'mgmt_netmask' in kwargs:
            command += " mgmt-netmask %s" % kwargs['mgmt_netmask']
        if 'mgmt_mac' in kwargs:
            command += " mgmt-mac %s" % kwargs['mgmt_mac']
        if 'mgmt_secondary_macs' in kwargs:
            command += " mgmt-secondary-macs %s" % kwargs['mgmt_secondary_macs']
        if 'mgmt_if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['mgmt_if_nat_realm']:
                    command += " mgmt-if-nat-realm %s" % item
                    break
        if 'in_band_ip' in kwargs:
            command += " in-band-ip %s" % kwargs['in_band_ip']
        if 'in_band_netmask' in kwargs:
            command += " in-band-netmask %s" % kwargs['in_band_netmask']
        if 'in_band_mac' in kwargs:
            command += " in-band-mac %s" % kwargs['in_band_mac']
        if 'in_band_vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['in_band_vlan_type']:
                    command += " in-band-vlan-type %s" % item
                    break
        if 'in_band_secondary_macs' in kwargs:
            command += " in-band-secondary-macs %s" % kwargs['in_band_secondary_macs']
        if 'in_band_if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['in_band_if_nat_realm']:
                    command += " in-band-if-nat-realm %s" % item
                    break
        if 'fab_tid' in kwargs:
            command += " fab-tid %s" % kwargs['fab_tid']
        if 'cluster_tid' in kwargs:
            command += " cluster-tid %s" % kwargs['cluster_tid']
        if 'out_port' in kwargs:
            command += " out-port %s" % kwargs['out_port']
        if 'version' in kwargs:
            command += " version %s" % kwargs['version']
        if 'fresh_install' in kwargs:
            command += " fresh-install"
        if 'firmware_upgrade' in kwargs:
            for item in [u'not-required', u'required', u'reboot-required']:
                if item == kwargs['firmware_upgrade']:
                    command += " firmware-upgrade %s" % item
                    break
        if 'device_state' in kwargs:
            for item in [u'ok', u'error', u'simulator']:
                if item == kwargs['device_state']:
                    command += " device-state %s" % item
                    break
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def command_counter_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'command-counter-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def control_msg_stats_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'control-msg-stats-clear'

        return self.send_command(command)


    def control_msg_stats_settings_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'control-msg-stats-settings-modify'
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'disk_space' in kwargs:
            command += " disk-space %s" % kwargs['disk_space']

        return self.send_command(command)


    def control_msg_stats_settings_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'control-msg-stats-settings-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def control_msg_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'control-msg-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'caller' in kwargs:
            command += " caller %s" % kwargs['caller']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def debug_alta(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'debug-alta'
        if 'alta_log_enable' in kwargs:
            if kwargs['alta_log_enable']:
                command += " alta-log-enable"
            else:
                command += " alta-log-disable"
        if 'alta_set_log_lvl' in kwargs:
            for item in [u'default', u'all', u'all-verbose', u'debug', u'api', u'none']:
                if item == kwargs['alta_set_log_lvl']:
                    command += " alta-set-log-lvl %s" % item
                    break
        if 'port_all' in kwargs:
            if kwargs['port_all']:
                command += " port-all"
            else:
                command += " qos-all"
        if 'debug_alta' in kwargs:
            command += " debug-alta"
        if 'alta_cmd_arg' in kwargs:
            command += " alta-cmd-arg %s" % kwargs['alta_cmd_arg']
        if 'alta_cmd_arg_addr' in kwargs:
            command += " alta-cmd-arg-addr %s" % kwargs['alta_cmd_arg_addr']
        if 'alta_cmd_arg_data' in kwargs:
            command += " alta-cmd-arg-data %s" % kwargs['alta_cmd_arg_data']

        return self.send_command(command)


    def debug_npu(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'debug-npu'
        if 'npu_start_hwdbg' in kwargs:
            if kwargs['npu_start_hwdbg']:
                command += " npu-start-hwdbg"
            else:
                command += " npu-stop-hwdbg"
        if 'debug_npu' in kwargs:
            command += " debug-npu"
        if 'npu_uid' in kwargs:
            command += " npu-uid %s" % kwargs['npu_uid']
        if 'npu_suid' in kwargs:
            command += " npu-suid %s" % kwargs['npu_suid']
        if 'npu_addr' in kwargs:
            command += " npu-addr %s" % kwargs['npu_addr']
        if 'npu_data' in kwargs:
            command += " npu-data %s" % kwargs['npu_data']
        if 'npu_opcode' in kwargs:
            command += " npu-opcode %s" % kwargs['npu_opcode']

        return self.send_command(command)


    def debug_nvOS(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'debug-nvOS'
        if 'cpu_hog' in kwargs:
            command += " cpu-hog"
        if 'cpu_hog' in kwargs:
            command += " cpu-hog"
        if 'run_cluster_sync' in kwargs:
            command += " run-cluster-sync"
        if 'set_crc_err_port' in kwargs:
            command += " set-crc-err-port %s" % kwargs['set_crc_err_port']
        if 'unset_crc_err_port' in kwargs:
            command += " unset-crc-err-port %s" % kwargs['unset_crc_err_port']

        return self.send_command(command)


    def debug_pre_emphasis(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'debug-pre_emphasis'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']

        return self.send_command(command)


    def debug_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'debug-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def debug_status_out_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'debug-status-out-show'
        if 'status_version' in kwargs:
            command += " status-version %s" % kwargs['status_version']
        if 'send_size' in kwargs:
            command += " send-size %s" % kwargs['send_size']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def debug_status_port_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'debug-status-port-show'
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'egress_rate_limit' in kwargs:
            command += " egress-rate-limit %s" % kwargs['egress_rate_limit']
        if 'autoneg' in kwargs:
            if kwargs['autoneg']:
                command += " autoneg"
            else:
                command += " no-autoneg"
        if 'jumbo' in kwargs:
            if kwargs['jumbo']:
                command += " jumbo"
            else:
                command += " no-jumbo"
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'lacp_mode' in kwargs:
            for item in [u'off', u'passive', u'active']:
                if item == kwargs['lacp_mode']:
                    command += " lacp-mode %s" % item
                    break
        if 'lacp_timeout' in kwargs:
            for item in [u'slow', u'fast']:
                if item == kwargs['lacp_timeout']:
                    command += " lacp-timeout %s" % item
                    break
        if 'lacp_fallback' in kwargs:
            for item in [u'bundle', u'individual']:
                if item == kwargs['lacp_fallback']:
                    command += " lacp-fallback %s" % item
                    break
        if 'lacp_individual' in kwargs:
            command += " lacp-individual %s" % kwargs['lacp_individual']
        if 'reflect' in kwargs:
            if kwargs['reflect']:
                command += " reflect"
            else:
                command += " no-reflect"
        if 'edge_switch' in kwargs:
            if kwargs['edge_switch']:
                command += " edge-switch"
            else:
                command += " no-edge-switch"
        if 'pause' in kwargs:
            if kwargs['pause']:
                command += " pause"
            else:
                command += " no-pause"
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'loopback' in kwargs:
            if kwargs['loopback']:
                command += " loopback"
            else:
                command += " no-loopback"
        if 'vxlan_termination' in kwargs:
            if kwargs['vxlan_termination']:
                command += " vxlan-termination"
            else:
                command += " no-vxlan-termination"
        if 'mirror_only' in kwargs:
            if kwargs['mirror_only']:
                command += " mirror-only"
            else:
                command += " no-mirror-receive-only"
        if 'trunk_hw_id' in kwargs:
            command += " trunk-hw-id %s" % kwargs['trunk_hw_id']
        if 'send_port' in kwargs:
            command += " send-port %s" % kwargs['send_port']
        if 'loop_vlans' in kwargs:
            command += " loop-vlans %s" % kwargs['loop_vlans']
        if 'routing' in kwargs:
            if kwargs['routing']:
                command += " routing"
            else:
                command += " no-routing"
        if 'host_enable' in kwargs:
            if kwargs['host_enable']:
                command += " host-enable"
            else:
                command += " host-disable"
        if 'crc_check_enable' in kwargs:
            if kwargs['crc_check_enable']:
                command += " crc-check-enable"
            else:
                command += " crc-check-disable"
        if 'local_switching' in kwargs:
            if kwargs['local_switching']:
                command += " local-switching"
            else:
                command += " no-local-switching"
        if 'rhost' in kwargs:
            command += " rhost %s" % kwargs['rhost']
        if 'fabric_guard' in kwargs:
            if kwargs['fabric_guard']:
                command += " fabric-guard"
            else:
                command += " no-fabric-guard"
        if 'show_all' in kwargs:
            if kwargs['show_all']:
                command += " show-all"
            else:
                command += " no-show-all"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def debug_status_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'debug-status-show'
        if 'ports_in_use' in kwargs:
            command += " ports-in-use %s" % kwargs['ports_in_use']
        if 'ports_up' in kwargs:
            command += " ports-up %s" % kwargs['ports_up']
        if 'internal_ports' in kwargs:
            command += " internal-ports %s" % kwargs['internal_ports']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def debug_status_stg_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'debug-status-stg-show'
        if 'stg_ids' in kwargs:
            command += " stg-ids %s" % kwargs['stg_ids']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def debug_status_vlan_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'debug-status-vlan-show'
        if 'range' in kwargs:
            command += " range %s" % kwargs['range']
        if 'type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'vxlan_type' in kwargs:
            for item in [u'user', u'fabric']:
                if item == kwargs['vxlan_type']:
                    command += " vxlan-type %s" % item
                    break
        if 'vxlan_mode' in kwargs:
            for item in [u'standard', u'transparent']:
                if item == kwargs['vxlan_mode']:
                    command += " vxlan-mode %s" % item
                    break
        if 'scope' in kwargs:
            command += " scope %s" % kwargs['scope']
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'active' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['active']:
                    command += " active %s" % item
                    break
        if 'stats' in kwargs:
            if kwargs['stats']:
                command += " stats"
            else:
                command += " no-stats"
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'untagged_ports' in kwargs:
            command += " untagged-ports %s" % kwargs['untagged_ports']
        if 'active_edge_ports' in kwargs:
            command += " active-edge-ports %s" % kwargs['active_edge_ports']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def debug_trident(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'debug-trident'
        if 'shell' in kwargs:
            command += " shell %s" % kwargs['shell']
        if 'enable_trunk_ip_hash' in kwargs:
            if kwargs['enable_trunk_ip_hash']:
                command += " enable-trunk-ip-hash"
            else:
                command += " dump-if-table"
        if 'knet' in kwargs:
            for item in [u'vnic-show', u'filter-show', u'stats-show', u'dstats-show']:
                if item == kwargs['knet']:
                    command += " knet %s" % item
                    break
        if 'output' in kwargs:
            for item in [u'screen', u'log', u'both']:
                if item == kwargs['output']:
                    command += " output %s" % item
                    break

        return self.send_command(command)


    def debug_upload(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'debug-upload'

        return self.send_command(command)


    def debug_vcenter(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'debug-vcenter'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'set_log_level' in kwargs:
            command += " set-log-level %s" % kwargs['set_log_level']

        return self.send_command(command)


    def debug_xcvr(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'debug-xcvr'
        if 'xcvr_cmd_port' in kwargs:
            command += " xcvr-cmd-port %s" % kwargs['xcvr_cmd_port']
        if 'xcvr_cmd_addr' in kwargs:
            command += " xcvr-cmd-addr %s" % kwargs['xcvr_cmd_addr']
        if 'xcvr_cmd_data' in kwargs:
            command += " xcvr-cmd-data %s" % kwargs['xcvr_cmd_data']

        return self.send_command(command)


    def disk_cleanup_auto(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'disk-cleanup-auto'

        return self.send_command(command)


    def disk_cleanup_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'disk-cleanup-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'disk_cleanup_delete' in kwargs:
            command += " disk-cleanup-delete"
        if 'at_least' in kwargs:
            command += " at-least %s" % kwargs['at_least']

        return self.send_command(command)


    def disk_cleanup_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'disk-cleanup-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'at_least' in kwargs:
            command += " at-least %s" % kwargs['at_least']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def disk_image_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'disk-image-show'
        if 'label' in kwargs:
            command += " label %s" % kwargs['label']
        if 'file' in kwargs:
            command += " file %s" % kwargs['file']
        if 'size' in kwargs:
            command += " size %s" % kwargs['size']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def ecp_port_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'ecp-port-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'ipkts' in kwargs:
            command += " ipkts %s" % kwargs['ipkts']
        if 'opkts' in kwargs:
            command += " opkts %s" % kwargs['opkts']
        if 'timeouts' in kwargs:
            command += " timeouts %s" % kwargs['timeouts']
        if 'retransmits' in kwargs:
            command += " retransmits %s" % kwargs['retransmits']
        if 'tx_errors' in kwargs:
            command += " tx-errors %s" % kwargs['tx_errors']
        if 'last_rx_seqno' in kwargs:
            command += " last-rx-seqno %s" % kwargs['last_rx_seqno']
        if 'last_ack_seqno' in kwargs:
            command += " last-ack-seqno %s" % kwargs['last_ack_seqno']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def eula_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'eula-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def export_diags(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'export-diags'

        return self.send_command(command)


    def fabric_connection_clear(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-connection-clear'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'src_switch_port' in kwargs:
            command += " src-switch-port %s" % kwargs['src_switch_port']
        if 'dst_switch_port' in kwargs:
            command += " dst-switch-port %s" % kwargs['dst_switch_port']
        if 'src_mac' in kwargs:
            command += " src-mac %s" % kwargs['src_mac']
        if 'dst_mac' in kwargs:
            command += " dst-mac %s" % kwargs['dst_mac']
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'dscp' in kwargs:
            command += " dscp %s" % kwargs['dscp']
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'tunnel_src_mac' in kwargs:
            command += " tunnel-src-mac %s" % kwargs['tunnel_src_mac']
        if 'tunnel_dst_mac' in kwargs:
            command += " tunnel-dst-mac %s" % kwargs['tunnel_dst_mac']
        if 'tunnel_src_ip' in kwargs:
            command += " tunnel-src-ip %s" % kwargs['tunnel_src_ip']
        if 'tunnel_dst_ip' in kwargs:
            command += " tunnel-dst-ip %s" % kwargs['tunnel_dst_ip']
        if 'tunnel_proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['tunnel_proto']:
                    command += " tunnel-proto %s" % item
                    break
        if 'cur_state' in kwargs:
            for item in [u'syn', u'est', u'fin', u'rst', u'none']:
                if item == kwargs['cur_state']:
                    command += " cur-state %s" % item
                    break
        if 'syn_resends' in kwargs:
            command += " syn-resends %s" % kwargs['syn_resends']
        if 'syn_ack_resends' in kwargs:
            command += " syn-ack-resends %s" % kwargs['syn_ack_resends']
        if 'obytes' in kwargs:
            command += " obytes %s" % kwargs['obytes']
        if 'ibytes' in kwargs:
            command += " ibytes %s" % kwargs['ibytes']
        if 'total_bytes' in kwargs:
            command += " total-bytes %s" % kwargs['total_bytes']
        if 'transition_state' in kwargs:
            for item in [u'any', u'started-and-ended', u'started', u'ended', u'on-going', u'updated']:
                if item == kwargs['transition_state']:
                    command += " transition-state %s" % item
                    break
        if 'fabric' in kwargs:
            command += " fabric %s" % kwargs['fabric']
        if 'client_name' in kwargs:
            command += " client-name %s" % kwargs['client_name']
        if 'server_name' in kwargs:
            command += " server-name %s" % kwargs['server_name']
        if 'xact_scope' in kwargs:
            for item in [u'local', u'fabric', u'cluster', u'global']:
                if item == kwargs['xact_scope']:
                    command += " xact-scope %s" % item
                    break
        if 'tid' in kwargs:
            command += " tid %s" % kwargs['tid']
        if 'command' in kwargs:
            command += " command %s" % kwargs['command']
        if 'ssl_accept_failed' in kwargs:
            command += " ssl-accept-failed"
        if 'tx_pkts' in kwargs:
            command += " tx-pkts %s" % kwargs['tx_pkts']
        if 'rx_pkts' in kwargs:
            command += " rx-pkts %s" % kwargs['rx_pkts']
        if 'tx_resends' in kwargs:
            command += " tx-resends %s" % kwargs['tx_resends']
        if 'rx_resends' in kwargs:
            command += " rx-resends %s" % kwargs['rx_resends']
        if 'tx_seq' in kwargs:
            command += " tx-seq %s" % kwargs['tx_seq']
        if 'rx_seq' in kwargs:
            command += " rx-seq %s" % kwargs['rx_seq']
        if 'fabric_connection_clear_history' in kwargs:
            command += " fabric-connection-clear-history"

        return self.send_command(command)


    def fabric_connection_clear_history(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-connection-clear-history'

        return self.send_command(command)


    def fabric_connection_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-connection-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'src_switch_port' in kwargs:
            command += " src-switch-port %s" % kwargs['src_switch_port']
        if 'dst_switch_port' in kwargs:
            command += " dst-switch-port %s" % kwargs['dst_switch_port']
        if 'src_mac' in kwargs:
            command += " src-mac %s" % kwargs['src_mac']
        if 'dst_mac' in kwargs:
            command += " dst-mac %s" % kwargs['dst_mac']
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'dscp' in kwargs:
            command += " dscp %s" % kwargs['dscp']
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'tunnel_src_mac' in kwargs:
            command += " tunnel-src-mac %s" % kwargs['tunnel_src_mac']
        if 'tunnel_dst_mac' in kwargs:
            command += " tunnel-dst-mac %s" % kwargs['tunnel_dst_mac']
        if 'tunnel_src_ip' in kwargs:
            command += " tunnel-src-ip %s" % kwargs['tunnel_src_ip']
        if 'tunnel_dst_ip' in kwargs:
            command += " tunnel-dst-ip %s" % kwargs['tunnel_dst_ip']
        if 'tunnel_proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['tunnel_proto']:
                    command += " tunnel-proto %s" % item
                    break
        if 'cur_state' in kwargs:
            for item in [u'syn', u'est', u'fin', u'rst', u'none']:
                if item == kwargs['cur_state']:
                    command += " cur-state %s" % item
                    break
        if 'syn_resends' in kwargs:
            command += " syn-resends %s" % kwargs['syn_resends']
        if 'syn_ack_resends' in kwargs:
            command += " syn-ack-resends %s" % kwargs['syn_ack_resends']
        if 'obytes' in kwargs:
            command += " obytes %s" % kwargs['obytes']
        if 'ibytes' in kwargs:
            command += " ibytes %s" % kwargs['ibytes']
        if 'total_bytes' in kwargs:
            command += " total-bytes %s" % kwargs['total_bytes']
        if 'updated' in kwargs:
            command += " updated"
        if 'fabric' in kwargs:
            command += " fabric %s" % kwargs['fabric']
        if 'client_name' in kwargs:
            command += " client-name %s" % kwargs['client_name']
        if 'server_name' in kwargs:
            command += " server-name %s" % kwargs['server_name']
        if 'xact_scope' in kwargs:
            for item in [u'local', u'fabric', u'cluster', u'global']:
                if item == kwargs['xact_scope']:
                    command += " xact-scope %s" % item
                    break
        if 'tid' in kwargs:
            command += " tid %s" % kwargs['tid']
        if 'command' in kwargs:
            command += " command %s" % kwargs['command']
        if 'accept' in kwargs:
            if kwargs['accept']:
                command += " accept"
            else:
                command += " processing"
        if 'tx_pkts' in kwargs:
            command += " tx-pkts %s" % kwargs['tx_pkts']
        if 'rx_pkts' in kwargs:
            command += " rx-pkts %s" % kwargs['rx_pkts']
        if 'tx_resends' in kwargs:
            command += " tx-resends %s" % kwargs['tx_resends']
        if 'rx_resends' in kwargs:
            command += " rx-resends %s" % kwargs['rx_resends']
        if 'tx_seq' in kwargs:
            command += " tx-seq %s" % kwargs['tx_seq']
        if 'rx_seq' in kwargs:
            command += " rx-seq %s" % kwargs['rx_seq']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def fabric_license_override_join(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-license-override-join'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']
        if 'delete_conflicts' in kwargs:
            if kwargs['delete_conflicts']:
                command += " delete-conflicts"
            else:
                command += " abort-on-conflict"
        if 'fabric_license_override_join' in kwargs:
            command += " fabric-license-override-join"
        if 'switch_ip' in kwargs:
            command += " switch-ip %s" % kwargs['switch_ip']
        if 'password' in kwargs:
            command += " password %s" % kwargs['password']
        if 'delete_conflicts' in kwargs:
            if kwargs['delete_conflicts']:
                command += " delete-conflicts"
            else:
                command += " abort-on-conflict"

        return self.send_command(command)


    def fabric_phys_port_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'fabric-phys-port-show'
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'egress_rate_limit' in kwargs:
            command += " egress-rate-limit %s" % kwargs['egress_rate_limit']
        if 'autoneg' in kwargs:
            if kwargs['autoneg']:
                command += " autoneg"
            else:
                command += " no-autoneg"
        if 'jumbo' in kwargs:
            if kwargs['jumbo']:
                command += " jumbo"
            else:
                command += " no-jumbo"
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " disable"
        if 'lacp_mode' in kwargs:
            for item in [u'off', u'passive', u'active']:
                if item == kwargs['lacp_mode']:
                    command += " lacp-mode %s" % item
                    break
        if 'lacp_timeout' in kwargs:
            for item in [u'slow', u'fast']:
                if item == kwargs['lacp_timeout']:
                    command += " lacp-timeout %s" % item
                    break
        if 'lacp_fallback' in kwargs:
            for item in [u'bundle', u'individual']:
                if item == kwargs['lacp_fallback']:
                    command += " lacp-fallback %s" % item
                    break
        if 'lacp_individual' in kwargs:
            command += " lacp-individual %s" % kwargs['lacp_individual']
        if 'reflect' in kwargs:
            if kwargs['reflect']:
                command += " reflect"
            else:
                command += " no-reflect"
        if 'edge_switch' in kwargs:
            if kwargs['edge_switch']:
                command += " edge-switch"
            else:
                command += " no-edge-switch"
        if 'pause' in kwargs:
            if kwargs['pause']:
                command += " pause"
            else:
                command += " no-pause"
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'loopback' in kwargs:
            if kwargs['loopback']:
                command += " loopback"
            else:
                command += " no-loopback"
        if 'vxlan_termination' in kwargs:
            if kwargs['vxlan_termination']:
                command += " vxlan-termination"
            else:
                command += " no-vxlan-termination"
        if 'mirror_only' in kwargs:
            if kwargs['mirror_only']:
                command += " mirror-only"
            else:
                command += " no-mirror-receive-only"
        if 'trunk_hw_id' in kwargs:
            command += " trunk-hw-id %s" % kwargs['trunk_hw_id']
        if 'send_port' in kwargs:
            command += " send-port %s" % kwargs['send_port']
        if 'loop_vlans' in kwargs:
            command += " loop-vlans %s" % kwargs['loop_vlans']
        if 'routing' in kwargs:
            if kwargs['routing']:
                command += " routing"
            else:
                command += " no-routing"
        if 'host_enable' in kwargs:
            if kwargs['host_enable']:
                command += " host-enable"
            else:
                command += " host-disable"
        if 'crc_check_enable' in kwargs:
            if kwargs['crc_check_enable']:
                command += " crc-check-enable"
            else:
                command += " crc-check-disable"
        if 'local_switching' in kwargs:
            if kwargs['local_switching']:
                command += " local-switching"
            else:
                command += " no-local-switching"
        if 'rhost' in kwargs:
            command += " rhost %s" % kwargs['rhost']
        if 'fabric_guard' in kwargs:
            if kwargs['fabric_guard']:
                command += " fabric-guard"
            else:
                command += " no-fabric-guard"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def factory_reset(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'factory-reset'

        return self.send_command(command)


    def feature_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'feature-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def firmware_upgrade(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'firmware-upgrade'

        return self.send_command(command)


    def flow_group_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'flow-group-modify'

        return self.send_command(command)


    def flow_group_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'flow-group-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def hidden(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hidden'

        return self.send_command(command)


    def hw_nat_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-nat-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def hw_nat_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-nat-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def hw_nat_map_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-nat-map-add'
        if 'hw_nat_name' in kwargs:
            command += " hw-nat-name %s" % kwargs['hw_nat_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'ext_ip' in kwargs:
            command += " ext-ip %s" % kwargs['ext_ip']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']

        return self.send_command(command)


    def hw_nat_map_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-nat-map-remove'
        if 'hw_nat_name' in kwargs:
            command += " hw-nat-name %s" % kwargs['hw_nat_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def hw_nat_map_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-nat-map-show'
        if 'hw_nat_name' in kwargs:
            command += " hw-nat-name %s" % kwargs['hw_nat_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'ext_interface' in kwargs:
            command += " ext-interface %s" % kwargs['ext_interface']
        if 'ext_ip' in kwargs:
            command += " ext-ip %s" % kwargs['ext_ip']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def hw_nat_port_forward_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-nat-port-forward-add'
        if 'hw_nat_name' in kwargs:
            command += " hw-nat-name %s" % kwargs['hw_nat_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'ext_ip' in kwargs:
            command += " ext-ip %s" % kwargs['ext_ip']
        if 'ext_port' in kwargs:
            command += " ext-port %s" % kwargs['ext_port']
        if 'int_ip' in kwargs:
            command += " int-ip %s" % kwargs['int_ip']
        if 'int_port' in kwargs:
            command += " int-port %s" % kwargs['int_port']
        if 'protocol' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['protocol']:
                    command += " protocol %s" % item
                    break

        return self.send_command(command)


    def hw_nat_port_forward_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-nat-port-forward-remove'
        if 'hw_nat_name' in kwargs:
            command += " hw-nat-name %s" % kwargs['hw_nat_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def hw_nat_port_forward_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-nat-port-forward-show'
        if 'hw_nat_name' in kwargs:
            command += " hw-nat-name %s" % kwargs['hw_nat_name']
        if 'nat_index' in kwargs:
            command += " nat-index %s" % kwargs['nat_index']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'ext_interface' in kwargs:
            command += " ext-interface %s" % kwargs['ext_interface']
        if 'ext_ip' in kwargs:
            command += " ext-ip %s" % kwargs['ext_ip']
        if 'ext_port' in kwargs:
            command += " ext-port %s" % kwargs['ext_port']
        if 'int_ip' in kwargs:
            command += " int-ip %s" % kwargs['int_ip']
        if 'int_port' in kwargs:
            command += " int-port %s" % kwargs['int_port']
        if 'protocol' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['protocol']:
                    command += " protocol %s" % item
                    break
        if 'active' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['active']:
                    command += " active %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def hw_nat_session_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-nat-session-show'
        if 'ob_vflow_name' in kwargs:
            command += " ob-vflow-name %s" % kwargs['ob_vflow_name']
        if 'in_vflow_name' in kwargs:
            command += " in-vflow-name %s" % kwargs['in_vflow_name']
        if 'session_id' in kwargs:
            command += " session-id %s" % kwargs['session_id']
        if 'int_ip' in kwargs:
            command += " int-ip %s" % kwargs['int_ip']
        if 'int_port' in kwargs:
            command += " int-port %s" % kwargs['int_port']
        if 'ext_ip' in kwargs:
            command += " ext-ip %s" % kwargs['ext_ip']
        if 'ext_port' in kwargs:
            command += " ext-port %s" % kwargs['ext_port']
        if 'last_cnt' in kwargs:
            command += " last-cnt %s" % kwargs['last_cnt']
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def hw_nat_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-nat-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def hw_nat_static_nat_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-nat-static-nat-add'
        if 'hw_nat_name' in kwargs:
            command += " hw-nat-name %s" % kwargs['hw_nat_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'external_ip' in kwargs:
            command += " external-ip %s" % kwargs['external_ip']
        if 'internal_ip' in kwargs:
            command += " internal-ip %s" % kwargs['internal_ip']

        return self.send_command(command)


    def hw_nat_static_nat_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-nat-static-nat-remove'
        if 'hw_nat_name' in kwargs:
            command += " hw-nat-name %s" % kwargs['hw_nat_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def hw_nat_static_nat_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-nat-static-nat-show'
        if 'hw_nat_name' in kwargs:
            command += " hw-nat-name %s" % kwargs['hw_nat_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'nat_index' in kwargs:
            command += " nat-index %s" % kwargs['nat_index']
        if 'external_ip' in kwargs:
            command += " external-ip %s" % kwargs['external_ip']
        if 'ext_interface' in kwargs:
            command += " ext-interface %s" % kwargs['ext_interface']
        if 'internal_ip' in kwargs:
            command += " internal-ip %s" % kwargs['internal_ip']
        if 'active' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['active']:
                    command += " active %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def hw_platform_desc_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-platform-desc-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def hw_platform_get_serial(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-platform-get_serial'

        return self.send_command(command)


    def hw_platform_init(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-platform-init'

        return self.send_command(command)


    def hw_platform_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-platform-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def hw_platform_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'hw-platform-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def import_password(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'import-password'

        return self.send_command(command)


    def iso_image_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'iso-image-show'
        if 'label' in kwargs:
            command += " label %s" % kwargs['label']
        if 'library' in kwargs:
            command += " library %s" % kwargs['library']
        if 'file' in kwargs:
            command += " file %s" % kwargs['file']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def l2_table_hw_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l2-table-hw-show'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'num_ips' in kwargs:
            command += " num-ips %s" % kwargs['num_ips']
        if 'config_intf' in kwargs:
            command += " config-intf %s" % kwargs['config_intf']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'local_intf' in kwargs:
            command += " local-intf %s" % kwargs['local_intf']
        if 'local_ports' in kwargs:
            command += " local-ports %s" % kwargs['local_ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'alt_owner_port' in kwargs:
            command += " alt-owner-port %s" % kwargs['alt_owner_port']
        if 'alt_owner_ports' in kwargs:
            command += " alt-owner-ports %s" % kwargs['alt_owner_ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'svc_name' in kwargs:
            command += " svc-name %s" % kwargs['svc_name']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'entity' in kwargs:
            command += " entity %s" % kwargs['entity']
        if 'power' in kwargs:
            for item in [u'none', u'powered-off', u'powered-on', u'standby', u'suspended', u'unknown']:
                if item == kwargs['power']:
                    command += " power %s" % item
                    break
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'os' in kwargs:
            command += " os %s" % kwargs['os']
        if 'portgroup' in kwargs:
            command += " portgroup %s" % kwargs['portgroup']
        if 'pg_vlans' in kwargs:
            command += " pg-vlans %s" % kwargs['pg_vlans']
        if 'vswitch' in kwargs:
            command += " vswitch %s" % kwargs['vswitch']
        if 'vs_type' in kwargs:
            for item in [u'none', u'host-vs', u'distributed-vs', u'unknown']:
                if item == kwargs['vs_type']:
                    command += " vs-type %s" % item
                    break
        if 'config' in kwargs:
            for item in [u'none', u'owner', u'ip', u'port', u'hostname', u'entity', u'cpus', u'os']:
                if item == kwargs['config']:
                    command += " config %s" % item
                    break
        if 'rem_intf' in kwargs:
            command += " rem-intf %s" % kwargs['rem_intf']
        if 'rem_ports' in kwargs:
            command += " rem-ports %s" % kwargs['rem_ports']
        if 'peer_intf' in kwargs:
            command += " peer-intf %s" % kwargs['peer_intf']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'vle_wait' in kwargs:
            if kwargs['vle_wait']:
                command += " vle-wait"
            else:
                command += " phy-down"
        if 'tunnel' in kwargs:
            command += " tunnel %s" % kwargs['tunnel']
        if 'hit' in kwargs:
            command += " hit %s" % kwargs['hit']
        if 'migrate' in kwargs:
            command += " migrate %s" % kwargs['migrate']
        if 'drops' in kwargs:
            command += " drops %s" % kwargs['drops']
        if 'hw_index' in kwargs:
            command += " hw-index %s" % kwargs['hw_index']
        if 'rt_if' in kwargs:
            command += " rt-if %s" % kwargs['rt_if']
        if 'hw_flags' in kwargs:
            for item in [u'invalid-vlan', u'invalid-port']:
                if item == kwargs['hw_flags']:
                    command += " hw-flags %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def l3_table_dump(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l3-table-dump'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'hw_intf' in kwargs:
            command += " hw-intf %s" % kwargs['hw_intf']
        if 'rt_if' in kwargs:
            command += " rt-if %s" % kwargs['rt_if']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'egress_id' in kwargs:
            command += " egress-id %s" % kwargs['egress_id']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'hit' in kwargs:
            command += " hit %s" % kwargs['hit']
        if 'tunnel' in kwargs:
            command += " tunnel %s" % kwargs['tunnel']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def l3_table_flush(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'l3-table-flush'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'hw_intf' in kwargs:
            command += " hw-intf %s" % kwargs['hw_intf']
        if 'rt_if' in kwargs:
            command += " rt-if %s" % kwargs['rt_if']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'egress_id' in kwargs:
            command += " egress-id %s" % kwargs['egress_id']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'hit' in kwargs:
            command += " hit %s" % kwargs['hit']
        if 'tunnel' in kwargs:
            command += " tunnel %s" % kwargs['tunnel']

        return self.send_command(command)


    def metadata_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'metadata-create'
        if 'provider' in kwargs:
            command += " provider %s" % kwargs['provider']
        if 'key' in kwargs:
            command += " key %s" % kwargs['key']
        if 'val' in kwargs:
            command += " val %s" % kwargs['val']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break

        return self.send_command(command)


    def metadata_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'metadata-delete'
        if 'provider' in kwargs:
            command += " provider %s" % kwargs['provider']
        if 'key' in kwargs:
            command += " key %s" % kwargs['key']

        return self.send_command(command)


    def metadata_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'metadata-modify'
        if 'provider' in kwargs:
            command += " provider %s" % kwargs['provider']
        if 'key' in kwargs:
            command += " key %s" % kwargs['key']
        if 'val' in kwargs:
            command += " val %s" % kwargs['val']

        return self.send_command(command)


    def metadata_provider_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'metadata-provider-stats-show'
        if 'provider' in kwargs:
            command += " provider %s" % kwargs['provider']
        if 'keys' in kwargs:
            command += " keys %s" % kwargs['keys']
        if 'total_size' in kwargs:
            command += " total-size %s" % kwargs['total_size']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'uuid' in kwargs:
            command += " uuid %s" % kwargs['uuid']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def metadata_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'metadata-show'
        if 'provider' in kwargs:
            command += " provider %s" % kwargs['provider']
        if 'key' in kwargs:
            command += " key %s" % kwargs['key']
        if 'val' in kwargs:
            command += " val %s" % kwargs['val']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nat_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'dedicated_vnet_service' in kwargs:
            if kwargs['dedicated_vnet_service']:
                command += " dedicated-vnet-service"
            else:
                command += " shared-vnet-service"
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"

        return self.send_command(command)


    def nat_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def nat_interface_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-interface-add'
        if 'nat_name' in kwargs:
            command += " nat-name %s" % kwargs['nat_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def nat_interface_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-interface-modify'
        if 'nat_name' in kwargs:
            command += " nat-name %s" % kwargs['nat_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def nat_interface_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-interface-remove'
        if 'nat_name' in kwargs:
            command += " nat-name %s" % kwargs['nat_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']

        return self.send_command(command)


    def nat_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-interface-show'
        if 'nat_name' in kwargs:
            command += " nat-name %s" % kwargs['nat_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nat_map_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-map-add'
        if 'nat_name' in kwargs:
            command += " nat-name %s" % kwargs['nat_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']

        return self.send_command(command)


    def nat_map_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-map-remove'
        if 'nat_name' in kwargs:
            command += " nat-name %s" % kwargs['nat_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def nat_map_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-map-show'
        if 'nat_name' in kwargs:
            command += " nat-name %s" % kwargs['nat_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nat_migrate(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-migrate'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def nat_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'gateway' in kwargs:
            command += " gateway %s" % kwargs['gateway']

        return self.send_command(command)


    def nat_port_forward_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-port-forward-add'
        if 'nat_name' in kwargs:
            command += " nat-name %s" % kwargs['nat_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'ext_ip' in kwargs:
            command += " ext-ip %s" % kwargs['ext_ip']
        if 'ext_port' in kwargs:
            command += " ext-port %s" % kwargs['ext_port']
        if 'int_ip' in kwargs:
            command += " int-ip %s" % kwargs['int_ip']
        if 'int_port' in kwargs:
            command += " int-port %s" % kwargs['int_port']

        return self.send_command(command)


    def nat_port_forward_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-port-forward-remove'
        if 'nat_name' in kwargs:
            command += " nat-name %s" % kwargs['nat_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def nat_port_forward_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-port-forward-show'
        if 'nat_name' in kwargs:
            command += " nat-name %s" % kwargs['nat_name']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'ext_ip' in kwargs:
            command += " ext-ip %s" % kwargs['ext_ip']
        if 'ext_port' in kwargs:
            command += " ext-port %s" % kwargs['ext_port']
        if 'int_ip' in kwargs:
            command += " int-ip %s" % kwargs['int_ip']
        if 'int_port' in kwargs:
            command += " int-port %s" % kwargs['int_port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nat_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nat_static_nat_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-static-nat-add'
        if 'nat_name' in kwargs:
            command += " nat-name %s" % kwargs['nat_name']
        if 'external_ip' in kwargs:
            command += " external-ip %s" % kwargs['external_ip']
        if 'internal_ip' in kwargs:
            command += " internal-ip %s" % kwargs['internal_ip']

        return self.send_command(command)


    def nat_static_nat_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-static-nat-remove'
        if 'nat_name' in kwargs:
            command += " nat-name %s" % kwargs['nat_name']
        if 'external_ip' in kwargs:
            command += " external-ip %s" % kwargs['external_ip']

        return self.send_command(command)


    def nat_static_nat_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nat-static-nat-show'
        if 'nat_name' in kwargs:
            command += " nat-name %s" % kwargs['nat_name']
        if 'external_ip' in kwargs:
            command += " external-ip %s" % kwargs['external_ip']
        if 'internal_ip' in kwargs:
            command += " internal-ip %s" % kwargs['internal_ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nss_group_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nss-group-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'gid' in kwargs:
            command += " gid %s" % kwargs['gid']
        if 'members' in kwargs:
            command += " members %s" % kwargs['members']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nvm_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nvm-create'
        if 'vm_name' in kwargs:
            command += " vm-name %s" % kwargs['vm_name']
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']
        if 'control_network' in kwargs:
            command += " control-network %s" % kwargs['control_network']
        if 'mgmt_network' in kwargs:
            command += " mgmt-network %s" % kwargs['mgmt_network']
        if 'data_network' in kwargs:
            command += " data-network %s" % kwargs['data_network']
        if 'fabric_join' in kwargs:
            if kwargs['fabric_join']:
                command += " fabric-join"
            else:
                command += " no-fabric-join"

        return self.send_command(command)


    def nvm_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nvm-delete'
        if 'vm_name' in kwargs:
            command += " vm-name %s" % kwargs['vm_name']

        return self.send_command(command)


    def nvm_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nvm-show'
        if 'datacenter' in kwargs:
            command += " datacenter %s" % kwargs['datacenter']
        if 'vm_name' in kwargs:
            command += " vm-name %s" % kwargs['vm_name']
        if 'vm_state' in kwargs:
            for item in [u'offline', u'online']:
                if item == kwargs['vm_state']:
                    command += " vm-state %s" % item
                    break
        if 'host' in kwargs:
            command += " host %s" % kwargs['host']
        if 'network' in kwargs:
            command += " network %s" % kwargs['network']
        if 'mgmt_ip' in kwargs:
            command += " mgmt-ip %s" % kwargs['mgmt_ip']
        if 'fabric_join' in kwargs:
            if kwargs['fabric_join']:
                command += " fabric-join"
            else:
                command += " no-fabric-join"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def nvos_restart(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'nvos-restart'

        return self.send_command(command)


    def openflow(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow'
        if 'openflow_connection_add' in kwargs:
            command += " openflow-connection-add"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'controller_ip' in kwargs:
            command += " controller-ip %s" % kwargs['controller_ip']
        if 'control_port' in kwargs:
            command += " control-port %s" % kwargs['control_port']
        if 'openflow_connection_disable' in kwargs:
            command += " openflow-connection-disable"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openflow_connection_disable_failmode' in kwargs:
            command += " openflow-connection-disable-failmode"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openflow_connection_enable' in kwargs:
            command += " openflow-connection-enable"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openflow_connection_enable_failmode' in kwargs:
            command += " openflow-connection-enable-failmode"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openflow_connection_modify' in kwargs:
            command += " openflow-connection-modify"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'status' in kwargs:
            command += " status %s" % kwargs['status']
        if 'controller_ip' in kwargs:
            command += " controller-ip %s" % kwargs['controller_ip']
        if 'openflow_connection_remove' in kwargs:
            command += " openflow-connection-remove"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'controller_ip' in kwargs:
            command += " controller-ip %s" % kwargs['controller_ip']
        if 'openflow_connection_restart' in kwargs:
            command += " openflow-connection-restart"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openflow_connection_show' in kwargs:
            command += " openflow-connection-show"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'controller_ip' in kwargs:
            command += " controller-ip %s" % kwargs['controller_ip']
        if 'control_port' in kwargs:
            command += " control-port %s" % kwargs['control_port']
        if 'status' in kwargs:
            command += " status %s" % kwargs['status']
        if 'dpid' in kwargs:
            command += " dpid %s" % kwargs['dpid']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"
        if 'openflow_create' in kwargs:
            command += " openflow-create"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'dedicated_vnet_service' in kwargs:
            if kwargs['dedicated_vnet_service']:
                command += " dedicated-vnet-service"
            else:
                command += " shared-vnet-service"
        if 'gateway' in kwargs:
            command += " gateway %s" % kwargs['gateway']
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'openflow_delete' in kwargs:
            command += " openflow-delete"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openflow_interface_add' in kwargs:
            command += " openflow-interface-add"
        if 'openflow_name' in kwargs:
            command += " openflow-name %s" % kwargs['openflow_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'openflow_interface_modify' in kwargs:
            command += " openflow-interface-modify"
        if 'openflow_name' in kwargs:
            command += " openflow-name %s" % kwargs['openflow_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'openflow_interface_remove' in kwargs:
            command += " openflow-interface-remove"
        if 'openflow_name' in kwargs:
            command += " openflow-name %s" % kwargs['openflow_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'openflow_interface_show' in kwargs:
            command += " openflow-interface-show"
        if 'openflow_name' in kwargs:
            command += " openflow-name %s" % kwargs['openflow_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"
        if 'openflow_modify' in kwargs:
            command += " openflow-modify"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openflow_show' in kwargs:
            command += " openflow-show"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def openflow_connection_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-connection-add'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'controller_ip' in kwargs:
            command += " controller-ip %s" % kwargs['controller_ip']
        if 'control_port' in kwargs:
            command += " control-port %s" % kwargs['control_port']

        return self.send_command(command)


    def openflow_connection_disable(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-connection-disable'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openflow_connection_disable_failmode' in kwargs:
            command += " openflow-connection-disable-failmode"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def openflow_connection_disable_failmode(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-connection-disable-failmode'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def openflow_connection_enable(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-connection-enable'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openflow_connection_enable_failmode' in kwargs:
            command += " openflow-connection-enable-failmode"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def openflow_connection_enable_failmode(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-connection-enable-failmode'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def openflow_connection_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-connection-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'status' in kwargs:
            command += " status %s" % kwargs['status']
        if 'controller_ip' in kwargs:
            command += " controller-ip %s" % kwargs['controller_ip']

        return self.send_command(command)


    def openflow_connection_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-connection-remove'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'controller_ip' in kwargs:
            command += " controller-ip %s" % kwargs['controller_ip']

        return self.send_command(command)


    def openflow_connection_restart(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-connection-restart'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def openflow_connection_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-connection-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'controller_ip' in kwargs:
            command += " controller-ip %s" % kwargs['controller_ip']
        if 'control_port' in kwargs:
            command += " control-port %s" % kwargs['control_port']
        if 'status' in kwargs:
            command += " status %s" % kwargs['status']
        if 'dpid' in kwargs:
            command += " dpid %s" % kwargs['dpid']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def openflow_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'dedicated_vnet_service' in kwargs:
            if kwargs['dedicated_vnet_service']:
                command += " dedicated-vnet-service"
            else:
                command += " shared-vnet-service"
        if 'gateway' in kwargs:
            command += " gateway %s" % kwargs['gateway']
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']

        return self.send_command(command)


    def openflow_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def openflow_interface_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-interface-add'
        if 'openflow_name' in kwargs:
            command += " openflow-name %s" % kwargs['openflow_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def openflow_interface_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-interface-modify'
        if 'openflow_name' in kwargs:
            command += " openflow-name %s" % kwargs['openflow_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def openflow_interface_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-interface-remove'
        if 'openflow_name' in kwargs:
            command += " openflow-name %s" % kwargs['openflow_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']

        return self.send_command(command)


    def openflow_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-interface-show'
        if 'openflow_name' in kwargs:
            command += " openflow-name %s" % kwargs['openflow_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def openflow_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def openflow_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openflow-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'vlans' in kwargs:
            command += " vlans %s" % kwargs['vlans']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def openstack_config_node_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-config-node-add'
        if 'openstack_name' in kwargs:
            command += " openstack-name %s" % kwargs['openstack_name']
        if 'openstack_bridge_vnic_nic' in kwargs:
            command += " openstack-bridge-vnic-nic %s" % kwargs['openstack_bridge_vnic_nic']
        if 'macid' in kwargs:
            command += " macid %s" % kwargs['macid']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'addr' in kwargs:
            command += " addr %s" % kwargs['addr']
        if 'type' in kwargs:
            for item in [u'controller', u'compute', u'unknown']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'platform' in kwargs:
            command += " platform %s" % kwargs['platform']
        if 'release' in kwargs:
            command += " release %s" % kwargs['release']
        if 'status' in kwargs:
            command += " status %s" % kwargs['status']

        return self.send_command(command)


    def openstack_config_node_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-config-node-modify'
        if 'openstack_name' in kwargs:
            command += " openstack-name %s" % kwargs['openstack_name']
        if 'macid' in kwargs:
            command += " macid %s" % kwargs['macid']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'addr' in kwargs:
            command += " addr %s" % kwargs['addr']
        if 'type' in kwargs:
            for item in [u'controller', u'compute', u'unknown']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'platform' in kwargs:
            command += " platform %s" % kwargs['platform']
        if 'release' in kwargs:
            command += " release %s" % kwargs['release']
        if 'status' in kwargs:
            command += " status %s" % kwargs['status']

        return self.send_command(command)


    def openstack_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openstack-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def openvswitch_hwvtep_dump(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'openvswitch-hwvtep-dump'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def os_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'os-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def peer_vrouter_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'peer-vrouter-interface-show'
        if 'peer_vrid' in kwargs:
            command += " peer-vrid %s" % kwargs['peer_vrid']
        if 'local_vrid' in kwargs:
            command += " local-vrid %s" % kwargs['local_vrid']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def peer_vrouter_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'peer-vrouter-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'hw_router_mac' in kwargs:
            command += " hw-router-mac %s" % kwargs['hw_router_mac']
        if 'peer_vrid' in kwargs:
            command += " peer-vrid %s" % kwargs['peer_vrid']
        if 'local_vrid' in kwargs:
            command += " local-vrid %s" % kwargs['local_vrid']
        if 'in_hw' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['in_hw']:
                    command += " in-hw %s" % item
                    break
        if 'num_if' in kwargs:
            command += " num-if %s" % kwargs['num_if']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def pim_sm_control_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'pim-sm-control-modify'
        if 'hw_forwarding' in kwargs:
            if kwargs['hw_forwarding']:
                command += " hw-forwarding"
            else:
                command += " no-hw-forwarding"

        return self.send_command(command)


    def pim_sm_control_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'pim-sm-control-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_egress_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-egress-modify'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'egress' in kwargs:
            command += " egress %s" % kwargs['egress']
        if 'rx_only' in kwargs:
            command += " rx-only %s" % kwargs['rx_only']
        if 'active_active_vlags' in kwargs:
            command += " active-active-vlags %s" % kwargs['active_active_vlags']
        if 'loopback' in kwargs:
            command += " loopback %s" % kwargs['loopback']
        if 'no_local_switching' in kwargs:
            command += " no-local-switching %s" % kwargs['no_local_switching']

        return self.send_command(command)


    def port_feature_info_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-feature-info-show'
        if 'num' in kwargs:
            command += " num %s" % kwargs['num']
        if 'curr' in kwargs:
            command += " curr %s" % kwargs['curr']
        if 'advert' in kwargs:
            command += " advert %s" % kwargs['advert']
        if 'supported' in kwargs:
            command += " supported %s" % kwargs['supported']
        if 'peer' in kwargs:
            command += " peer %s" % kwargs['peer']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_total_stats_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-total-stats-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'counter' in kwargs:
            command += " counter %s" % kwargs['counter']
        if 'ibytes' in kwargs:
            command += " ibytes %s" % kwargs['ibytes']
        if 'idiscards' in kwargs:
            command += " idiscards %s" % kwargs['idiscards']
        if 'ierrs' in kwargs:
            command += " ierrs %s" % kwargs['ierrs']
        if 'obytes' in kwargs:
            command += " obytes %s" % kwargs['obytes']
        if 'odiscards' in kwargs:
            command += " odiscards %s" % kwargs['odiscards']
        if 'oerrs' in kwargs:
            command += " oerrs %s" % kwargs['oerrs']
        if 'mtu_errs' in kwargs:
            command += " mtu-errs %s" % kwargs['mtu_errs']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def port_xcvr_lane_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'port-xcvr-lane-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def save_diags(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'save-diags'

        return self.send_command(command)


    def sftp_files_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sftp-files-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def snapshot_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snapshot-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def snapshot_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snapshot-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def snapshot_rollback(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snapshot-rollback'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def snapshot_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'snapshot-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'used' in kwargs:
            command += " used %s" % kwargs['used']
        if 'refer' in kwargs:
            command += " refer %s" % kwargs['refer']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def software_reboot_sequence_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-reboot-sequence-show'

        return self.send_command(command)


    def software_refresh(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'software-refresh'

        return self.send_command(command)


    def stack_hex_led_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'stack-hex-led-modify'
        if 'hex_enable' in kwargs:
            if kwargs['hex_enable']:
                command += " hex-enable"
            else:
                command += " hex-disable"
        if 'blink_enable' in kwargs:
            if kwargs['blink_enable']:
                command += " blink-enable"
            else:
                command += " blink-disable"
        if 'dot_enable' in kwargs:
            if kwargs['dot_enable']:
                command += " dot-enable"
            else:
                command += " dot-disable"

        return self.send_command(command)


    def stack_hex_led_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'stack-hex-led-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def status_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'status-show'
        if 'test' in kwargs:
            command += " test %s" % kwargs['test']
        if 'comment' in kwargs:
            command += " comment %s" % kwargs['comment']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def storage_device_free(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-device-free'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def storage_folder_attach(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-folder-attach'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def storage_folder_detach(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'storage-folder-detach'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def supported_xcvr_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'supported-xcvr-show'
        if 'category' in kwargs:
            command += " category %s" % kwargs['category']
        if 'product_id' in kwargs:
            command += " product-id %s" % kwargs['product_id']
        if 'vendor_name' in kwargs:
            command += " vendor-name %s" % kwargs['vendor_name']
        if 'part_number' in kwargs:
            command += " part-number %s" % kwargs['part_number']
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def sw_pid_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sw-pid-delete'
        if 'license_id' in kwargs:
            command += " license-id %s" % kwargs['license_id']

        return self.send_command(command)


    def sw_pid_list(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sw-pid-list'

        return self.send_command(command)


    def sw_pid_set(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sw-pid-set'
        if 'license_id' in kwargs:
            command += " license-id %s" % kwargs['license_id']
        if 'id' in kwargs:
            command += " id %s" % kwargs['id']
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'prompt' in kwargs:
            command += " prompt %s" % kwargs['prompt']
        if 'key' in kwargs:
            command += " key %s" % kwargs['key']
        if 'feature' in kwargs:
            command += " feature %s" % kwargs['feature']
        if 'upgrade' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['upgrade']:
                    command += " upgrade %s" % item
                    break
        if 'upgrade_from' in kwargs:
            command += " upgrade-from %s" % kwargs['upgrade_from']
        if 'sysconfig' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['sysconfig']:
                    command += " sysconfig %s" % item
                    break
        if 'pending' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['pending']:
                    command += " pending %s" % item
                    break
        if 'expires_on' in kwargs:
            command += " expires-on %s" % kwargs['expires_on']

        return self.send_command(command)


    def sw_pid_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sw-pid-show'
        if 'license_id' in kwargs:
            command += " license-id %s" % kwargs['license_id']
        if 'id' in kwargs:
            command += " id %s" % kwargs['id']
        if 'description' in kwargs:
            command += " description %s" % kwargs['description']
        if 'prompt' in kwargs:
            command += " prompt %s" % kwargs['prompt']
        if 'key' in kwargs:
            command += " key %s" % kwargs['key']
        if 'feature' in kwargs:
            command += " feature %s" % kwargs['feature']
        if 'upgrade' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['upgrade']:
                    command += " upgrade %s" % item
                    break
        if 'upgrade_from' in kwargs:
            command += " upgrade-from %s" % kwargs['upgrade_from']
        if 'sysconfig' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['sysconfig']:
                    command += " sysconfig %s" % item
                    break
        if 'pending' in kwargs:
            for item in [u'yes', u'no']:
                if item == kwargs['pending']:
                    command += " pending %s" % item
                    break
        if 'expires_on' in kwargs:
            command += " expires-on %s" % kwargs['expires_on']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def switch_mode_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-mode-modify'
        if 'switch_mode' in kwargs:
            for item in [u'cut-through', u'store-and-forward', u'virtual-wire']:
                if item == kwargs['switch_mode']:
                    command += " switch-mode %s" % item
                    break

        return self.send_command(command)


    def switch_mode_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-mode-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def switch_nic_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-nic-show'
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'vrrp_state' in kwargs:
            for item in [u'slave', u'master']:
                if item == kwargs['vrrp_state']:
                    command += " vrrp-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def switch_setup_ports_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-setup-ports-modify'

        return self.send_command(command)


    def switch_setup_ports_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'switch-setup-ports-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def sys_flow_setting_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sys-flow-setting-modify'
        if 'arp' in kwargs:
            if kwargs['arp']:
                command += " arp"
            else:
                command += " no-arp"
        if 'control' in kwargs:
            if kwargs['control']:
                command += " control"
            else:
                command += " no-control"
        if 'manage_mac_table' in kwargs:
            if kwargs['manage_mac_table']:
                command += " manage-mac-table"
            else:
                command += " no-manage-mac-table"
        if 'cluster_control_flow' in kwargs:
            if kwargs['cluster_control_flow']:
                command += " cluster-control-flow"
            else:
                command += " no-cluster-control-flow"
        if 'fabric_comm_analytics' in kwargs:
            if kwargs['fabric_comm_analytics']:
                command += " fabric-comm-analytics"
            else:
                command += " no-fabric-comm-analytics"
        if 'vxlan_tunnel_timeout' in kwargs:
            if kwargs['vxlan_tunnel_timeout']:
                command += " vxlan-tunnel-timeout"
            else:
                command += " no-vxlan-tunnel-timeout"
        if 'vflow_conflict_check' in kwargs:
            if kwargs['vflow_conflict_check']:
                command += " vflow-conflict-check"
            else:
                command += " no-vflow-conflict-check"
        if 'auto_vlag' in kwargs:
            if kwargs['auto_vlag']:
                command += " auto-vlag"
            else:
                command += " no-auto-vlag"
        if 'encap_cpu_tx_to_pn' in kwargs:
            if kwargs['encap_cpu_tx_to_pn']:
                command += " encap-cpu-tx-to-pn"
            else:
                command += " no-encap-cpu-tx-to-pn"
        if 'encap_cpu_cluster_tx' in kwargs:
            if kwargs['encap_cpu_cluster_tx']:
                command += " encap-cpu-cluster-tx"
            else:
                command += " no-encap-cpu-cluster-tx"
        if 'loopback_process_cpu_packets' in kwargs:
            if kwargs['loopback_process_cpu_packets']:
                command += " loopback-process-cpu-packets"
            else:
                command += " no-loopback-process-cpu-packets"
        if 'cluster_analytics_flag' in kwargs:
            if kwargs['cluster_analytics_flag']:
                command += " cluster-analytics-flag"
            else:
                command += " no-cluster-analytics-flag"

        return self.send_command(command)


    def sys_flow_setting_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'sys-flow-setting-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def system_test_run(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'system-test-run'

        return self.send_command(command)


    def test_check_phrase(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-check-phrase'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'phrase' in kwargs:
            command += " phrase %s" % kwargs['phrase']

        return self.send_command(command)


    def test_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-create'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'phrase' in kwargs:
            command += " phrase %s" % kwargs['phrase']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'test_create' in kwargs:
            command += " test-create"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'connect_timeout_usec' in kwargs:
            command += " connect-timeout-usec %s" % kwargs['connect_timeout_usec']
        if 'timeout_usec' in kwargs:
            command += " timeout-usec %s" % kwargs['timeout_usec']
        if 'phrase' in kwargs:
            command += " phrase %s" % kwargs['phrase']
        if 'dpid' in kwargs:
            command += " dpid %s" % kwargs['dpid']
        if 'fail' in kwargs:
            for item in [u'create', u'update', u'delete', u'add', u'remove']:
                if item == kwargs['fail']:
                    command += " fail %s" % item
                    break
        if 'fail_node' in kwargs:
            command += " fail-node %s" % kwargs['fail_node']
        if 'range' in kwargs:
            command += " range %s" % kwargs['range']
        if 'range_end' in kwargs:
            command += " range-end %s" % kwargs['range_end']
        if 'urange' in kwargs:
            command += " urange %s" % kwargs['urange']
        if 'urange_end' in kwargs:
            command += " urange-end %s" % kwargs['urange_end']

        return self.send_command(command)


    def test_delay_done(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-delay-done'

        return self.send_command(command)


    def test_delay_init(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-delay-init'

        return self.send_command(command)


    def test_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def test_get_by_id(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-get-by-id'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def test_list(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-list'

        return self.send_command(command)


    def test_local_sub_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-local-sub-add'
        if 'test_name' in kwargs:
            command += " test-name %s" % kwargs['test_name']
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'sub_name' in kwargs:
            command += " sub-name %s" % kwargs['sub_name']
        if 'sub_val' in kwargs:
            command += " sub-val %s" % kwargs['sub_val']
        if 'sub_fail' in kwargs:
            for item in [u'create', u'update', u'delete', u'add', u'remove']:
                if item == kwargs['sub_fail']:
                    command += " sub-fail %s" % item
                    break
        if 'sub_fail_node' in kwargs:
            command += " sub-fail-node %s" % kwargs['sub_fail_node']

        return self.send_command(command)


    def test_local_sub_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-local-sub-modify'
        if 'test_name' in kwargs:
            command += " test-name %s" % kwargs['test_name']
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'sub_name' in kwargs:
            command += " sub-name %s" % kwargs['sub_name']
        if 'sub_id' in kwargs:
            command += " sub-id %s" % kwargs['sub_id']
        if 'sub_val' in kwargs:
            command += " sub-val %s" % kwargs['sub_val']
        if 'sub_fail' in kwargs:
            for item in [u'create', u'update', u'delete', u'add', u'remove']:
                if item == kwargs['sub_fail']:
                    command += " sub-fail %s" % item
                    break
        if 'sub_fail_node' in kwargs:
            command += " sub-fail-node %s" % kwargs['sub_fail_node']

        return self.send_command(command)


    def test_local_sub_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-local-sub-remove'
        if 'test_name' in kwargs:
            command += " test-name %s" % kwargs['test_name']
        if 'switch' in kwargs:
            command += " switch %s" % kwargs['switch']
        if 'sub_name' in kwargs:
            command += " sub-name %s" % kwargs['sub_name']
        if 'sub_id' in kwargs:
            command += " sub-id %s" % kwargs['sub_id']

        return self.send_command(command)


    def test_local_sub_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-local-sub-show'
        if 'test_name' in kwargs:
            command += " test-name %s" % kwargs['test_name']
        if 'sub_name' in kwargs:
            command += " sub-name %s" % kwargs['sub_name']
        if 'sub_id' in kwargs:
            command += " sub-id %s" % kwargs['sub_id']
        if 'sub_val' in kwargs:
            command += " sub-val %s" % kwargs['sub_val']
        if 'sub_fail' in kwargs:
            for item in [u'create', u'update', u'delete', u'add', u'remove']:
                if item == kwargs['sub_fail']:
                    command += " sub-fail %s" % item
                    break
        if 'sub_fail_node' in kwargs:
            command += " sub-fail-node %s" % kwargs['sub_fail_node']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def test_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'connect_timeout_usec' in kwargs:
            command += " connect-timeout-usec %s" % kwargs['connect_timeout_usec']
        if 'timeout_usec' in kwargs:
            command += " timeout-usec %s" % kwargs['timeout_usec']
        if 'phrase' in kwargs:
            command += " phrase %s" % kwargs['phrase']
        if 'dpid' in kwargs:
            command += " dpid %s" % kwargs['dpid']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'fail' in kwargs:
            for item in [u'create', u'update', u'delete', u'add', u'remove']:
                if item == kwargs['fail']:
                    command += " fail %s" % item
                    break
        if 'fail_node' in kwargs:
            command += " fail-node %s" % kwargs['fail_node']
        if 'range' in kwargs:
            command += " range %s" % kwargs['range']
        if 'range_end' in kwargs:
            command += " range-end %s" % kwargs['range_end']
        if 'urange' in kwargs:
            command += " urange %s" % kwargs['urange']
        if 'urange_end' in kwargs:
            command += " urange-end %s" % kwargs['urange_end']

        return self.send_command(command)


    def test_ping(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-ping'

        return self.send_command(command)


    def test_proxy_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-proxy-create'
        if 'timeout_usec' in kwargs:
            command += " timeout-usec %s" % kwargs['timeout_usec']
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'phrase' in kwargs:
            command += " phrase %s" % kwargs['phrase']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'test_proxy_create' in kwargs:
            command += " test-proxy-create"
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'connect_timeout_usec' in kwargs:
            command += " connect-timeout-usec %s" % kwargs['connect_timeout_usec']
        if 'timeout_usec' in kwargs:
            command += " timeout-usec %s" % kwargs['timeout_usec']
        if 'phrase' in kwargs:
            command += " phrase %s" % kwargs['phrase']
        if 'dpid' in kwargs:
            command += " dpid %s" % kwargs['dpid']
        if 'next_sub_id' in kwargs:
            command += " next-sub-id %s" % kwargs['next_sub_id']
        if 'fail' in kwargs:
            for item in [u'create', u'update', u'delete', u'add', u'remove']:
                if item == kwargs['fail']:
                    command += " fail %s" % item
                    break
        if 'fail_node' in kwargs:
            command += " fail-node %s" % kwargs['fail_node']
        if 'range' in kwargs:
            command += " range %s" % kwargs['range']
        if 'range_end' in kwargs:
            command += " range-end %s" % kwargs['range_end']
        if 'urange' in kwargs:
            command += " urange %s" % kwargs['urange']
        if 'urange_end' in kwargs:
            command += " urange-end %s" % kwargs['urange_end']

        return self.send_command(command)


    def test_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'connect_timeout_usec' in kwargs:
            command += " connect-timeout-usec %s" % kwargs['connect_timeout_usec']
        if 'timeout_usec' in kwargs:
            command += " timeout-usec %s" % kwargs['timeout_usec']
        if 'phrase' in kwargs:
            command += " phrase %s" % kwargs['phrase']
        if 'dpid' in kwargs:
            command += " dpid %s" % kwargs['dpid']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'next_sub_id' in kwargs:
            command += " next-sub-id %s" % kwargs['next_sub_id']
        if 'fail' in kwargs:
            for item in [u'create', u'update', u'delete', u'add', u'remove']:
                if item == kwargs['fail']:
                    command += " fail %s" % item
                    break
        if 'fail_node' in kwargs:
            command += " fail-node %s" % kwargs['fail_node']
        if 'range' in kwargs:
            command += " range %s" % kwargs['range']
        if 'range_end' in kwargs:
            command += " range-end %s" % kwargs['range_end']
        if 'urange' in kwargs:
            command += " urange %s" % kwargs['urange']
        if 'urange_end' in kwargs:
            command += " urange-end %s" % kwargs['urange_end']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"
        if 'test_show_big' in kwargs:
            command += " test-show-big"

        return self.send_command(command)


    def test_show_big(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-show-big'

        return self.send_command(command)


    def test_sleep_done(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-sleep-done'

        return self.send_command(command)


    def test_sleep_init(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-sleep-init'

        return self.send_command(command)


    def test_stream_group(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-stream-group'

        return self.send_command(command)


    def test_stream_id(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-stream-id'

        return self.send_command(command)


    def test_stream_nonblock_test(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-stream-nonblock-test'

        return self.send_command(command)


    def test_stream_nonblock2_test(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-stream-nonblock2-test'

        return self.send_command(command)


    def test_stream_test(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-stream-test'

        return self.send_command(command)


    def test_sub_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-sub-add'
        if 'test_name' in kwargs:
            command += " test-name %s" % kwargs['test_name']
        if 'sub_name' in kwargs:
            command += " sub-name %s" % kwargs['sub_name']
        if 'sub_val' in kwargs:
            command += " sub-val %s" % kwargs['sub_val']
        if 'sub_fail' in kwargs:
            for item in [u'create', u'update', u'delete', u'add', u'remove']:
                if item == kwargs['sub_fail']:
                    command += " sub-fail %s" % item
                    break
        if 'sub_fail_node' in kwargs:
            command += " sub-fail-node %s" % kwargs['sub_fail_node']

        return self.send_command(command)


    def test_sub_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-sub-modify'
        if 'test_name' in kwargs:
            command += " test-name %s" % kwargs['test_name']
        if 'sub_name' in kwargs:
            command += " sub-name %s" % kwargs['sub_name']
        if 'sub_id' in kwargs:
            command += " sub-id %s" % kwargs['sub_id']
        if 'sub_val' in kwargs:
            command += " sub-val %s" % kwargs['sub_val']
        if 'sub_fail' in kwargs:
            for item in [u'create', u'update', u'delete', u'add', u'remove']:
                if item == kwargs['sub_fail']:
                    command += " sub-fail %s" % item
                    break
        if 'sub_fail_node' in kwargs:
            command += " sub-fail-node %s" % kwargs['sub_fail_node']

        return self.send_command(command)


    def test_sub_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-sub-remove'
        if 'test_name' in kwargs:
            command += " test-name %s" % kwargs['test_name']
        if 'sub_name' in kwargs:
            command += " sub-name %s" % kwargs['sub_name']
        if 'sub_id' in kwargs:
            command += " sub-id %s" % kwargs['sub_id']

        return self.send_command(command)


    def test_sub_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'test-sub-show'
        if 'test_name' in kwargs:
            command += " test-name %s" % kwargs['test_name']
        if 'sub_name' in kwargs:
            command += " sub-name %s" % kwargs['sub_name']
        if 'sub_id' in kwargs:
            command += " sub-id %s" % kwargs['sub_id']
        if 'sub_val' in kwargs:
            command += " sub-val %s" % kwargs['sub_val']
        if 'sub_fail' in kwargs:
            for item in [u'create', u'update', u'delete', u'add', u'remove']:
                if item == kwargs['sub_fail']:
                    command += " sub-fail %s" % item
                    break
        if 'sub_fail_node' in kwargs:
            command += " sub-fail-node %s" % kwargs['sub_fail_node']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def time_zone_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'time-zone-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def user(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'user'

        return self.send_command(command)


    def vdp_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vdp-modify'
        if 'enable' in kwargs:
            command += " enable"
        if 'vdp_modify' in kwargs:
            command += " vdp-modify"
        if 'disable' in kwargs:
            command += " disable"
        if 'vdp_modify' in kwargs:
            command += " vdp-modify"

        return self.send_command(command)


    def vdp_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vdp-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vflow_flush(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-flush'

        return self.send_command(command)


    def vflow_pcap_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-pcap-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vflow_stats_total_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-stats-total-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_diff_interval' in kwargs:
            command += " show-diff-interval %s" % kwargs['show_diff_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vflow_system_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-system-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " no-enable"
        if 'precedence' in kwargs:
            command += " precedence %s" % kwargs['precedence']

        return self.send_command(command)


    def vflow_system_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-system-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'hog_violator' in kwargs:
            command += " hog-violator"
        if 'hidden' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['hidden']:
                    command += " hidden %s" % item
                    break
        if 'in_port' in kwargs:
            command += " in-port %s" % kwargs['in_port']
        if 'out_port' in kwargs:
            command += " out-port %s" % kwargs['out_port']
        if 'src_mac' in kwargs:
            command += " src-mac %s" % kwargs['src_mac']
        if 'src_mac_mask' in kwargs:
            command += " src-mac-mask %s" % kwargs['src_mac_mask']
        if 'dst_mac' in kwargs:
            command += " dst-mac %s" % kwargs['dst_mac']
        if 'dst_mac_mask' in kwargs:
            command += " dst-mac-mask %s" % kwargs['dst_mac_mask']
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'src_ip_mask' in kwargs:
            command += " src-ip-mask %s" % kwargs['src_ip_mask']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'dst_ip_mask' in kwargs:
            command += " dst-ip-mask %s" % kwargs['dst_ip_mask']
        if 'src_port' in kwargs:
            command += " src-port %s" % kwargs['src_port']
        if 'src_port_mask' in kwargs:
            command += " src-port-mask %s" % kwargs['src_port_mask']
        if 'dst_port' in kwargs:
            command += " dst-port %s" % kwargs['dst_port']
        if 'dst_port_mask' in kwargs:
            command += " dst-port-mask %s" % kwargs['dst_port_mask']
        if 'tos_start' in kwargs:
            command += " tos-start %s" % kwargs['tos_start']
        if 'tos_end' in kwargs:
            command += " tos-end %s" % kwargs['tos_end']
        if 'tos' in kwargs:
            command += " tos %s" % kwargs['tos']
        if 'ttl' in kwargs:
            command += " ttl %s" % kwargs['ttl']
        if 'proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['proto']:
                    command += " proto %s" % item
                    break
        if 'tcp_flags' in kwargs:
            for item in [u'fin', u'syn', u'rst', u'push', u'ack', u'urg', u'ece', u'cwr']:
                if item == kwargs['tcp_flags']:
                    command += " tcp-flags %s" % item
                    break
        if 'local_subnet' in kwargs:
            if kwargs['local_subnet']:
                command += " local-subnet"
            else:
                command += " no-local-subnet"
        if 'bw_min' in kwargs:
            command += " bw-min %s" % kwargs['bw_min']
        if 'bw_max' in kwargs:
            command += " bw-max %s" % kwargs['bw_max']
        if 'burst_size' in kwargs:
            command += " burst-size %s" % kwargs['burst_size']
        if 'precedence' in kwargs:
            command += " precedence %s" % kwargs['precedence']
        if 'action_value' in kwargs:
            command += " action-value %s" % kwargs['action_value']
        if 'action_set_mac_value' in kwargs:
            command += " action-set-mac-value %s" % kwargs['action_set_mac_value']
        if 'action_to_ports_value' in kwargs:
            command += " action-to-ports-value %s" % kwargs['action_to_ports_value']
        if 'process_mirror' in kwargs:
            if kwargs['process_mirror']:
                command += " process-mirror"
            else:
                command += " no-process-mirror"
        if 'log_packets' in kwargs:
            if kwargs['log_packets']:
                command += " log-packets"
            else:
                command += " no-log-packets"
        if 'log_stats' in kwargs:
            if kwargs['log_stats']:
                command += " log-stats"
            else:
                command += " no-log-stats"
        if 'dur' in kwargs:
            command += " dur %s" % kwargs['dur']
        if 'metadata' in kwargs:
            command += " metadata %s" % kwargs['metadata']
        if 'metadata_mask' in kwargs:
            command += " metadata-mask %s" % kwargs['metadata_mask']
        if 'transient' in kwargs:
            if kwargs['transient']:
                command += " transient"
            else:
                command += " no-transient"
        if 'vxlan_proto' in kwargs:
            for item in [u'tcp', u'udp', u'icmp', u'igmp', u'ip']:
                if item == kwargs['vxlan_proto']:
                    command += " vxlan-proto %s" % item
                    break
        if 'hw_stats' in kwargs:
            if kwargs['hw_stats']:
                command += " hw-stats"
            else:
                command += " no-hw-stats"
        if 'set_src' in kwargs:
            command += " set-src %s" % kwargs['set_src']
        if 'set_dst' in kwargs:
            command += " set-dst %s" % kwargs['set_dst']
        if 'set_src_port' in kwargs:
            command += " set-src-port %s" % kwargs['set_src_port']
        if 'set_dst_port' in kwargs:
            command += " set-dst-port %s" % kwargs['set_dst_port']
        if 'enable' in kwargs:
            if kwargs['enable']:
                command += " enable"
            else:
                command += " no-enable"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vflow_table_profile_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-table-profile-modify'
        if 'hw_tbl' in kwargs:
            for item in [u'switch-main', u'switch-hash', u'npu-main', u'npu-hash']:
                if item == kwargs['hw_tbl']:
                    command += " hw-tbl %s" % item
                    break

        return self.send_command(command)


    def vflow_table_profile_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vflow-table-profile-show'
        if 'hw_tbl' in kwargs:
            for item in [u'switch-main', u'switch-hash', u'npu-main', u'npu-hash', u'max']:
                if item == kwargs['hw_tbl']:
                    command += " hw-tbl %s" % item
                    break
        if 'min_percent_needed' in kwargs:
            command += " min-percent-needed %s" % kwargs['min_percent_needed']
        if 'capability' in kwargs:
            for item in [u'none', u'set-metadata', u'match-metadata']:
                if item == kwargs['capability']:
                    command += " capability %s" % item
                    break
        if 'flow_capacity' in kwargs:
            command += " flow-capacity %s" % kwargs['flow_capacity']
        if 'flow_slices_needed' in kwargs:
            command += " flow-slices-needed %s" % kwargs['flow_slices_needed']
        if 'flow_slices_used' in kwargs:
            command += " flow-slices-used %s" % kwargs['flow_slices_used']
        if 'actual_percent_used' in kwargs:
            command += " actual-percent-used %s" % kwargs['actual_percent_used']
        if 'expandable' in kwargs:
            if kwargs['expandable']:
                command += " expandable"
            else:
                command += " no-expandable"
        if 'comment' in kwargs:
            command += " comment %s" % kwargs['comment']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vle_config_hw_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vle-config-hw-show'
        if 'vlan' in kwargs:
            command += " vlan %s" % kwargs['vlan']
        if 'vxlan' in kwargs:
            command += " vxlan %s" % kwargs['vxlan']
        if 'vpn' in kwargs:
            command += " vpn %s" % kwargs['vpn']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vnet_service_migrate(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-service-migrate'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'openstack' in kwargs:
            if kwargs['openstack']:
                command += " openstack"
            else:
                command += " netvmm"
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'is_global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_global']:
                    command += " is-global %s" % item
                    break
        if 'dedicated_vnet_service' in kwargs:
            if kwargs['dedicated_vnet_service']:
                command += " dedicated-vnet-service"
            else:
                command += " shared-vnet-service"
        if 'disable' in kwargs:
            if kwargs['disable']:
                command += " disable"
            else:
                command += " enable"
        if 'gateway' in kwargs:
            command += " gateway %s" % kwargs['gateway']
        if 'load_template' in kwargs:
            command += " load-template %s" % kwargs['load_template']
        if 'template' in kwargs:
            if kwargs['template']:
                command += " template"
            else:
                command += " no-template"
        if 'restore_orig' in kwargs:
            if kwargs['restore_orig']:
                command += " restore-orig"
            else:
                command += " delete-new"
        if 'local_node' in kwargs:
            command += " local-node %s" % kwargs['local_node']
        if 'failover_controller' in kwargs:
            command += " failover-controller %s" % kwargs['failover_controller']
        if 'failover_action' in kwargs:
            for item in [u'stop-old', u'start-new', u'restore-orig', u'sync', u'finished']:
                if item == kwargs['failover_action']:
                    command += " failover-action %s" % item
                    break
        if 'force' in kwargs:
            if kwargs['force']:
                command += " force"
            else:
                command += " no-force"

        return self.send_command(command)


    def vnet_service_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vnet-service-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vport_dump(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-dump'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'num_ips' in kwargs:
            command += " num-ips %s" % kwargs['num_ips']
        if 'config_intf' in kwargs:
            command += " config-intf %s" % kwargs['config_intf']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'local_intf' in kwargs:
            command += " local-intf %s" % kwargs['local_intf']
        if 'local_ports' in kwargs:
            command += " local-ports %s" % kwargs['local_ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'alt_owner_port' in kwargs:
            command += " alt-owner-port %s" % kwargs['alt_owner_port']
        if 'alt_owner_ports' in kwargs:
            command += " alt-owner-ports %s" % kwargs['alt_owner_ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'svc_name' in kwargs:
            command += " svc-name %s" % kwargs['svc_name']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'entity' in kwargs:
            command += " entity %s" % kwargs['entity']
        if 'power' in kwargs:
            for item in [u'none', u'powered-off', u'powered-on', u'standby', u'suspended', u'unknown']:
                if item == kwargs['power']:
                    command += " power %s" % item
                    break
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'os' in kwargs:
            command += " os %s" % kwargs['os']
        if 'portgroup' in kwargs:
            command += " portgroup %s" % kwargs['portgroup']
        if 'pg_vlans' in kwargs:
            command += " pg-vlans %s" % kwargs['pg_vlans']
        if 'vswitch' in kwargs:
            command += " vswitch %s" % kwargs['vswitch']
        if 'vs_type' in kwargs:
            for item in [u'none', u'host-vs', u'distributed-vs', u'unknown']:
                if item == kwargs['vs_type']:
                    command += " vs-type %s" % item
                    break
        if 'config' in kwargs:
            for item in [u'none', u'owner', u'ip', u'port', u'hostname', u'entity', u'cpus', u'os']:
                if item == kwargs['config']:
                    command += " config %s" % item
                    break
        if 'rem_intf' in kwargs:
            command += " rem-intf %s" % kwargs['rem_intf']
        if 'rem_ports' in kwargs:
            command += " rem-ports %s" % kwargs['rem_ports']
        if 'peer_intf' in kwargs:
            command += " peer-intf %s" % kwargs['peer_intf']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'vle_wait' in kwargs:
            if kwargs['vle_wait']:
                command += " vle-wait"
            else:
                command += " phy-down"
        if 'tunnel' in kwargs:
            command += " tunnel %s" % kwargs['tunnel']
        if 'hit' in kwargs:
            command += " hit %s" % kwargs['hit']
        if 'migrate' in kwargs:
            command += " migrate %s" % kwargs['migrate']
        if 'drops' in kwargs:
            command += " drops %s" % kwargs['drops']
        if 'hw_index' in kwargs:
            command += " hw-index %s" % kwargs['hw_index']
        if 'rt_if' in kwargs:
            command += " rt-if %s" % kwargs['rt_if']
        if 'hw_flags' in kwargs:
            for item in [u'invalid-vlan', u'invalid-port']:
                if item == kwargs['hw_flags']:
                    command += " hw-flags %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vport_evict(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-evict'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']

        return self.send_command(command)


    def vport_history_dump_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-history-dump-show'
        if 'since_start' in kwargs:
            command += " since-start"
        if 'mac_move' in kwargs:
            if kwargs['mac_move']:
                command += " mac-move"
            else:
                command += " cluster-status"
        if 'vxlan_routing' in kwargs:
            command += " vxlan-routing"
        if 'user_delete' in kwargs:
            if kwargs['user_delete']:
                command += " user-delete"
            else:
                command += " done"
        if 'user_delete' in kwargs:
            if kwargs['user_delete']:
                command += " user-delete"
            else:
                command += " done"
        if 'rt_if' in kwargs:
            if kwargs['rt_if']:
                command += " rt-if"
            else:
                command += " hw-flags"
        if 'count' in kwargs:
            command += " count %s" % kwargs['count']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'num_ips' in kwargs:
            command += " num-ips %s" % kwargs['num_ips']
        if 'config_intf' in kwargs:
            command += " config-intf %s" % kwargs['config_intf']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'svc_name' in kwargs:
            command += " svc-name %s" % kwargs['svc_name']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'entity' in kwargs:
            command += " entity %s" % kwargs['entity']
        if 'power' in kwargs:
            for item in [u'none', u'powered-off', u'powered-on', u'standby', u'suspended', u'unknown']:
                if item == kwargs['power']:
                    command += " power %s" % item
                    break
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'os' in kwargs:
            command += " os %s" % kwargs['os']
        if 'portgroup' in kwargs:
            command += " portgroup %s" % kwargs['portgroup']
        if 'pg_vlans' in kwargs:
            command += " pg-vlans %s" % kwargs['pg_vlans']
        if 'vswitch' in kwargs:
            command += " vswitch %s" % kwargs['vswitch']
        if 'vs_type' in kwargs:
            for item in [u'none', u'host-vs', u'distributed-vs', u'unknown']:
                if item == kwargs['vs_type']:
                    command += " vs-type %s" % item
                    break
        if 'config' in kwargs:
            for item in [u'none', u'owner', u'ip', u'port', u'hostname', u'entity', u'cpus', u'os']:
                if item == kwargs['config']:
                    command += " config %s" % item
                    break
        if 'rem_intf' in kwargs:
            command += " rem-intf %s" % kwargs['rem_intf']
        if 'rem_ports' in kwargs:
            command += " rem-ports %s" % kwargs['rem_ports']
        if 'peer_intf' in kwargs:
            command += " peer-intf %s" % kwargs['peer_intf']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_cluster_link' in kwargs:
            if kwargs['peer_port_not_cluster_link']:
                command += " peer-port-not-cluster-link"
            else:
                command += " sw-active"
        if 'vle_wait' in kwargs:
            if kwargs['vle_wait']:
                command += " vle-wait"
            else:
                command += " phy-down"
        if 'tunnel' in kwargs:
            command += " tunnel %s" % kwargs['tunnel']
        if 'hit' in kwargs:
            command += " hit %s" % kwargs['hit']
        if 'migrate' in kwargs:
            command += " migrate %s" % kwargs['migrate']
        if 'drops' in kwargs:
            command += " drops %s" % kwargs['drops']
        if 'hw_index' in kwargs:
            command += " hw-index %s" % kwargs['hw_index']
        if 'rt_if' in kwargs:
            command += " rt-if %s" % kwargs['rt_if']
        if 'hw_flags' in kwargs:
            for item in [u'invalid-vlan', u'invalid-port']:
                if item == kwargs['hw_flags']:
                    command += " hw-flags %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vport_inject(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vport-inject'
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'num_ips' in kwargs:
            command += " num-ips %s" % kwargs['num_ips']
        if 'config_intf' in kwargs:
            command += " config-intf %s" % kwargs['config_intf']
        if 'intf' in kwargs:
            command += " intf %s" % kwargs['intf']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'local_intf' in kwargs:
            command += " local-intf %s" % kwargs['local_intf']
        if 'local_ports' in kwargs:
            command += " local-ports %s" % kwargs['local_ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'alt_owner_port' in kwargs:
            command += " alt-owner-port %s" % kwargs['alt_owner_port']
        if 'alt_owner_ports' in kwargs:
            command += " alt-owner-ports %s" % kwargs['alt_owner_ports']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'svc_name' in kwargs:
            command += " svc-name %s" % kwargs['svc_name']
        if 'hostname' in kwargs:
            command += " hostname %s" % kwargs['hostname']
        if 'entity' in kwargs:
            command += " entity %s" % kwargs['entity']
        if 'power' in kwargs:
            for item in [u'none', u'powered-off', u'powered-on', u'standby', u'suspended', u'unknown']:
                if item == kwargs['power']:
                    command += " power %s" % item
                    break
        if 'cpus' in kwargs:
            command += " cpus %s" % kwargs['cpus']
        if 'os' in kwargs:
            command += " os %s" % kwargs['os']
        if 'portgroup' in kwargs:
            command += " portgroup %s" % kwargs['portgroup']
        if 'pg_vlans' in kwargs:
            command += " pg-vlans %s" % kwargs['pg_vlans']
        if 'vswitch' in kwargs:
            command += " vswitch %s" % kwargs['vswitch']
        if 'vs_type' in kwargs:
            for item in [u'none', u'host-vs', u'distributed-vs', u'unknown']:
                if item == kwargs['vs_type']:
                    command += " vs-type %s" % item
                    break
        if 'rem_intf' in kwargs:
            command += " rem-intf %s" % kwargs['rem_intf']
        if 'rem_ports' in kwargs:
            command += " rem-ports %s" % kwargs['rem_ports']
        if 'peer_intf' in kwargs:
            command += " peer-intf %s" % kwargs['peer_intf']
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'peer_port_not_orphaned' in kwargs:
            if kwargs['peer_port_not_orphaned']:
                command += " peer-port-not-orphaned"
            else:
                command += " peer-port-not-cluster-link"
        if 'vle_wait' in kwargs:
            if kwargs['vle_wait']:
                command += " vle-wait"
            else:
                command += " phy-down"
        if 'tunnel' in kwargs:
            command += " tunnel %s" % kwargs['tunnel']
        if 'hit' in kwargs:
            command += " hit %s" % kwargs['hit']
        if 'migrate' in kwargs:
            command += " migrate %s" % kwargs['migrate']
        if 'drops' in kwargs:
            command += " drops %s" % kwargs['drops']
        if 'hw_index' in kwargs:
            command += " hw-index %s" % kwargs['hw_index']
        if 'rt_if' in kwargs:
            command += " rt-if %s" % kwargs['rt_if']
        if 'hw_flags' in kwargs:
            for item in [u'invalid-vlan', u'invalid-port']:
                if item == kwargs['hw_flags']:
                    command += " hw-flags %s" % item
                    break

        return self.send_command(command)


    def vrouter_cached_routes_setting_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-cached-routes-setting-modify'
        if 'arp_trigger' in kwargs:
            if kwargs['arp_trigger']:
                command += " arp-trigger"
            else:
                command += " no-arp-trigger"

        return self.send_command(command)


    def vrouter_cached_routes_setting_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-cached-routes-setting-show'
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_console_connect(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-console-connect'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vrouter_direct_access(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-direct-access'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vrouter_ecmp_egress_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ecmp-egress-show'
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'prelen' in kwargs:
            command += " prelen %s" % kwargs['prelen']
        if 'nexthop' in kwargs:
            command += " nexthop %s" % kwargs['nexthop']
        if 'type' in kwargs:
            for item in [u'underlay', u'overlay']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'egress_id' in kwargs:
            command += " egress-id %s" % kwargs['egress_id']
        if 'ecmp_group' in kwargs:
            command += " ecmp-group %s" % kwargs['ecmp_group']
        if 'nexthop_mac' in kwargs:
            command += " nexthop-mac %s" % kwargs['nexthop_mac']
        if 'egress_port' in kwargs:
            command += " egress-port %s" % kwargs['egress_port']
        if 'intf_ip' in kwargs:
            command += " intf-ip %s" % kwargs['intf_ip']
        if 'ref_cnt' in kwargs:
            command += " ref-cnt %s" % kwargs['ref_cnt']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_hw_if_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-hw-if-create'
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'link_local_ip' in kwargs:
            command += " link-local-ip %s" % kwargs['link_local_ip']
        if 'zone' in kwargs:
            command += " zone %s" % kwargs['zone']
        if 'vrrp_change_count' in kwargs:
            command += " vrrp-change-count %s" % kwargs['vrrp_change_count']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def vrouter_hw_if_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-hw-if-delete'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vrouter_hw_if_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-hw-if-modify'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vrouter_hw_if_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-hw-if-show'
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'link_local_ip' in kwargs:
            command += " link-local-ip %s" % kwargs['link_local_ip']
        if 'zone' in kwargs:
            command += " zone %s" % kwargs['zone']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'ports' in kwargs:
            command += " ports %s" % kwargs['ports']
        if 'hw_id' in kwargs:
            command += " hw-id %s" % kwargs['hw_id']
        if 'index' in kwargs:
            command += " index %s" % kwargs['index']
        if 'state' in kwargs:
            for item in [u'up', u'down', u'mirror']:
                if item == kwargs['state']:
                    command += " state %s" % item
                    break
        if 'default_gateway_on' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['default_gateway_on']:
                    command += " default-gateway-on %s" % item
                    break
        if 'is_vrrp' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['is_vrrp']:
                    command += " is-vrrp %s" % item
                    break
        if 'vrrp_primary' in kwargs:
            command += " vrrp-primary %s" % kwargs['vrrp_primary']
        if 'primary_hw_id' in kwargs:
            command += " primary-hw-id %s" % kwargs['primary_hw_id']
        if 'vrrp_change_count' in kwargs:
            command += " vrrp-change-count %s" % kwargs['vrrp_change_count']
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_mrib_routes_create(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-mrib-routes-create'
        if 'srcip' in kwargs:
            command += " srcip %s" % kwargs['srcip']
        if 'group' in kwargs:
            command += " group %s" % kwargs['group']
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'vnic' in kwargs:
            command += " vnic %s" % kwargs['vnic']

        return self.send_command(command)


    def vrouter_mrib_routes_delete(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-mrib-routes-delete'
        if 'srcip' in kwargs:
            command += " srcip %s" % kwargs['srcip']
        if 'group' in kwargs:
            command += " group %s" % kwargs['group']

        return self.send_command(command)


    def vrouter_mrib_routes_flush(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-mrib-routes-flush'
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']

        return self.send_command(command)


    def vrouter_nexthop_down_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-nexthop-down-show'
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'nexthop' in kwargs:
            command += " nexthop %s" % kwargs['nexthop']
        if 'type' in kwargs:
            for item in [u'underlay', u'overlay']:
                if item == kwargs['type']:
                    command += " type %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_ospf6_area_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf6-area-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'area' in kwargs:
            command += " area %s" % kwargs['area']
        if 'stub_type' in kwargs:
            for item in [u'none', u'stub', u'stub-no-summary', u'nssa', u'nssa-no-summary']:
                if item == kwargs['stub_type']:
                    command += " stub-type %s" % item
                    break

        return self.send_command(command)


    def vrouter_ospf6_area_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf6-area-modify'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'area' in kwargs:
            command += " area %s" % kwargs['area']
        if 'stub_type' in kwargs:
            for item in [u'none', u'stub', u'stub-no-summary', u'nssa', u'nssa-no-summary']:
                if item == kwargs['stub_type']:
                    command += " stub-type %s" % item
                    break

        return self.send_command(command)


    def vrouter_ospf6_area_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf6-area-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'area' in kwargs:
            command += " area %s" % kwargs['area']

        return self.send_command(command)


    def vrouter_ospf6_area_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-ospf6-area-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'area' in kwargs:
            command += " area %s" % kwargs['area']
        if 'stub_type' in kwargs:
            for item in [u'none', u'stub', u'stub-no-summary', u'nssa', u'nssa-no-summary']:
                if item == kwargs['stub_type']:
                    command += " stub-type %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vrouter_rib_routes_evict(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-rib-routes-evict'
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'nexthop' in kwargs:
            command += " nexthop %s" % kwargs['nexthop']

        return self.send_command(command)


    def vrouter_rib_routes_flush(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-rib-routes-flush'

        return self.send_command(command)


    def vrouter_rib_routes_inject(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-rib-routes-inject'
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'nexthop' in kwargs:
            command += " nexthop %s" % kwargs['nexthop']

        return self.send_command(command)


    def vrouter_running_config_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-running-config-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']

        return self.send_command(command)


    def vrouter_static_arp_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-static-arp-add'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']

        return self.send_command(command)


    def vrouter_static_arp_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-static-arp-remove'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']

        return self.send_command(command)


    def vrouter_static_arp_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vrouter-static-arp-show'
        if 'vrouter_name' in kwargs:
            command += " vrouter-name %s" % kwargs['vrouter_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vsi_state_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vsi-state-show'
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'linkspeed' in kwargs:
            command += " linkspeed %s" % kwargs['linkspeed']
        if 'bw_max' in kwargs:
            command += " bw-max %s" % kwargs['bw_max']
        if 'keepalive' in kwargs:
            command += " keepalive %s" % kwargs['keepalive']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vxlan_port_hw_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vxlan-port-hw-show'
        if 'vlan' in kwargs:
            command += " vlan %s" % kwargs['vlan']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'egress_id' in kwargs:
            command += " egress-id %s" % kwargs['egress_id']
        if 'vpn' in kwargs:
            command += " vpn %s" % kwargs['vpn']
        if 'gport' in kwargs:
            command += " gport %s" % kwargs['gport']
        if 'service_tpid_replace' in kwargs:
            if kwargs['service_tpid_replace']:
                command += " service-tpid-replace"
            else:
                command += " multicast"
        if 'match_port' in kwargs:
            command += " match-port %s" % kwargs['match_port']
        if 'criteria' in kwargs:
            for item in [u'invalid', u'none', u'port', u'port-vlan', u'other']:
                if item == kwargs['criteria']:
                    command += " criteria %s" % item
                    break
        if 'match_vlan' in kwargs:
            command += " match-vlan %s" % kwargs['match_vlan']
        if 'egress_vlan' in kwargs:
            command += " egress-vlan %s" % kwargs['egress_vlan']
        if 'hw_egress_id' in kwargs:
            command += " hw-egress-id %s" % kwargs['hw_egress_id']
        if 'mcast_hw_group' in kwargs:
            command += " mcast-hw-group %s" % kwargs['mcast_hw_group']
        if 'mcast_encap_id' in kwargs:
            command += " mcast-encap-id %s" % kwargs['mcast_encap_id']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def vxlan_tunnel_hw_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'vxlan-tunnel-hw-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'id' in kwargs:
            command += " id %s" % kwargs['id']
        if 'virtual_port_id' in kwargs:
            command += " virtual-port-id %s" % kwargs['virtual_port_id']
        if 'mcast_virtual_port_id' in kwargs:
            command += " mcast-virtual-port-id %s" % kwargs['mcast_virtual_port_id']
        if 'hw_egress_id' in kwargs:
            command += " hw-egress-id %s" % kwargs['hw_egress_id']
        if 'mcast_hw_egress_id' in kwargs:
            command += " mcast-hw-egress-id %s" % kwargs['mcast_hw_egress_id']
        if 'vrf' in kwargs:
            command += " vrf %s" % kwargs['vrf']
        if 'term_src_ip' in kwargs:
            command += " term-src-ip %s" % kwargs['term_src_ip']
        if 'term_dst_ip' in kwargs:
            command += " term-dst-ip %s" % kwargs['term_dst_ip']
        if 'src_ip' in kwargs:
            command += " src-ip %s" % kwargs['src_ip']
        if 'dst_ip' in kwargs:
            command += " dst-ip %s" % kwargs['dst_ip']
        if 'dport' in kwargs:
            command += " dport %s" % kwargs['dport']
        if 'sport' in kwargs:
            command += " sport %s" % kwargs['sport']
        if 'ttl' in kwargs:
            command += " ttl %s" % kwargs['ttl']
        if 'dmac' in kwargs:
            command += " dmac %s" % kwargs['dmac']
        if 'smac' in kwargs:
            command += " smac %s" % kwargs['smac']
        if 'tpid' in kwargs:
            command += " tpid %s" % kwargs['tpid']
        if 'pkt_pri' in kwargs:
            command += " pkt-pri %s" % kwargs['pkt_pri']
        if 'pkt_cfi' in kwargs:
            command += " pkt-cfi %s" % kwargs['pkt_cfi']
        if 'mtu' in kwargs:
            command += " mtu %s" % kwargs['mtu']
        if 'vrid' in kwargs:
            command += " vrid %s" % kwargs['vrid']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'nexthop' in kwargs:
            command += " nexthop %s" % kwargs['nexthop']
        if 'if_ip' in kwargs:
            command += " if-ip %s" % kwargs['if_ip']
        if 'intf_id' in kwargs:
            command += " intf-id %s" % kwargs['intf_id']
        if 'port' in kwargs:
            command += " port %s" % kwargs['port']
        if 'nexthop_mac' in kwargs:
            command += " nexthop-mac %s" % kwargs['nexthop_mac']
        if 'egress_id' in kwargs:
            command += " egress-id %s" % kwargs['egress_id']
        if 'ecmp_group' in kwargs:
            command += " ecmp-group %s" % kwargs['ecmp_group']
        if 'nexthop_down' in kwargs:
            command += " nexthop-down"
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def xact_data_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'xact-data-show'
        if 'scope' in kwargs:
            for item in [u'local', u'cluster', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'tid' in kwargs:
            command += " tid %s" % kwargs['tid']
        if 'remote_reserve' in kwargs:
            if kwargs['remote_reserve']:
                command += " remote-reserve"
            else:
                command += " remote-reserve-abort"
        if 'info' in kwargs:
            command += " info %s" % kwargs['info']
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def zone_interface_add(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'zone-interface-add'
        if 'zone_name' in kwargs:
            command += " zone-name %s" % kwargs['zone_name']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def zone_interface_modify(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'zone-interface-modify'
        if 'zone_name' in kwargs:
            command += " zone-name %s" % kwargs['zone_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break

        return self.send_command(command)


    def zone_interface_remove(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'zone-interface-remove'
        if 'zone_name' in kwargs:
            command += " zone-name %s" % kwargs['zone_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']

        return self.send_command(command)


    def zone_interface_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'zone-interface-show'
        if 'zone_name' in kwargs:
            command += " zone-name %s" % kwargs['zone_name']
        if 'nic' in kwargs:
            command += " nic %s" % kwargs['nic']
        if 'ip' in kwargs:
            command += " ip %s" % kwargs['ip']
        if 'netmask' in kwargs:
            command += " netmask %s" % kwargs['netmask']
        if 'mac' in kwargs:
            command += " mac %s" % kwargs['mac']
        if 'vlan_type' in kwargs:
            for item in [u'public', u'private']:
                if item == kwargs['vlan_type']:
                    command += " vlan-type %s" % item
                    break
        if 'if' in kwargs:
            for item in [u'mgmt', u'data', u'span']:
                if item == kwargs['if']:
                    command += " if %s" % item
                    break
        if 'alias_on' in kwargs:
            command += " alias-on %s" % kwargs['alias_on']
        if 'exclusive' in kwargs:
            if kwargs['exclusive']:
                command += " exclusive"
            else:
                command += " no-exclusive"
        if 'nic_enable' in kwargs:
            if kwargs['nic_enable']:
                command += " nic-enable"
            else:
                command += " nic-disable"
        if 'nic_state' in kwargs:
            for item in [u'down', u'up']:
                if item == kwargs['nic_state']:
                    command += " nic-state %s" % item
                    break
        if 'secondary_macs' in kwargs:
            command += " secondary-macs %s" % kwargs['secondary_macs']
        if 'sriov_vf' in kwargs:
            if kwargs['sriov_vf']:
                command += " sriov-vf"
            else:
                command += " no-sriov-vf"
        if 'mirror_traffic' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['mirror_traffic']:
                    command += " mirror-traffic %s" % item
                    break
        if 'if_nat_realm' in kwargs:
            for item in [u'internal', u'external']:
                if item == kwargs['if_nat_realm']:
                    command += " if-nat-realm %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)


    def zone_show(self, **kwargs):
        """
        THIS IS AN AUTO-GENERATED METHOD, SEE generate_python_wrappers.py
        """
        command = 'zone-show'
        if 'name' in kwargs:
            command += " name %s" % kwargs['name']
        if 'scope' in kwargs:
            for item in [u'local', u'fabric']:
                if item == kwargs['scope']:
                    command += " scope %s" % item
                    break
        if 'hw_rt' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['hw_rt']:
                    command += " hw-rt %s" % item
                    break
        if 'gateway' in kwargs:
            command += " gateway %s" % kwargs['gateway']
        if 'changing_location' in kwargs:
            command += " changing-location"
        if 'kvm' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['kvm']:
                    command += " kvm %s" % item
                    break
        if 'vmm' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['vmm']:
                    command += " vmm %s" % item
                    break
        if 'global' in kwargs:
            for item in [u'true', u'false']:
                if item == kwargs['global']:
                    command += " global %s" % item
                    break
        if 'format' in kwargs:
            command += " format %s" % kwargs['format']
        if 'parsable_delim' in kwargs:
            command += " parsable-delim %s" % kwargs['parsable_delim']
        if 'sort_asc' in kwargs:
            command += " sort-asc"
        if 'sort_desc' in kwargs:
            command += " sort-desc"
        if 'show_dups' in kwargs:
            command += " show-dups"
        if 'layout' in kwargs:
            for item in [u'vertical', u'horizontal']:
                if item == kwargs['layout']:
                    command += " layout %s" % item
                    break
        if 'show_interval' in kwargs:
            command += " show-interval %s" % kwargs['show_interval']
        if 'show_headers' in kwargs:
            if kwargs['show_headers']:
                command += " show-headers"
            else:
                command += " no-show-headers"
        if 'limit_output' in kwargs:
            command += " limit-output %s" % kwargs['limit_output']
        if 'count_output' in kwargs:
            command += " count-output"
        if 'unscaled' in kwargs:
            command += " unscaled"
        if 'raw_int_values' in kwargs:
            command += " raw-int-values"

        return self.send_command(command)

